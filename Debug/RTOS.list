
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c0  080069c0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c8  080069c8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080069d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014490  2000001c  080069ec  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144ac  080069ec  000244ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148eb  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306e  00000000  00000000  00034937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  000379a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00038cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019126  00000000  00000000  00039eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001518e  00000000  00000000  00052fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a893  00000000  00000000  00068164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001029f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  00102a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006874 	.word	0x08006874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08006874 	.word	0x08006874

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ed8 	.word	0x20012ed8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fa4b 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f86d 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8d3 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL|=(1<<0);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <main+0xc8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <main+0xc8>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000596:	482b      	ldr	r0, [pc, #172]	; (8000644 <main+0xcc>)
 8000598:	f004 fa72 	bl	8004a80 <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 800059c:	f004 f89a 	bl	80046d4 <SEGGER_SYSVIEW_Conf>

//  SEGGER_SYSVIEW_Start();

status =xTaskCreate(LEDgreen, "LEDgreen", 100, "LEDgreen", 0, &taskLedGreen);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2300      	movs	r3, #0
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	4b27      	ldr	r3, [pc, #156]	; (8000648 <main+0xd0>)
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	4926      	ldr	r1, [pc, #152]	; (8000648 <main+0xd0>)
 80005b0:	4826      	ldr	r0, [pc, #152]	; (800064c <main+0xd4>)
 80005b2:	f002 f9e3 	bl	800297c <xTaskCreate>
 80005b6:	61f8      	str	r0, [r7, #28]
configASSERT(status==pdPASS);
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d00a      	beq.n	80005d4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d0:	bf00      	nop
 80005d2:	e7fe      	b.n	80005d2 <main+0x5a>
status =xTaskCreate(LEDred, "LEDred", 100, "LEDred", 2, &taskLedRed);
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <main+0xd8>)
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	491b      	ldr	r1, [pc, #108]	; (8000650 <main+0xd8>)
 80005e4:	481b      	ldr	r0, [pc, #108]	; (8000654 <main+0xdc>)
 80005e6:	f002 f9c9 	bl	800297c <xTaskCreate>
 80005ea:	61f8      	str	r0, [r7, #28]
configASSERT(status==pdPASS);
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00a      	beq.n	8000608 <main+0x90>
        __asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	617b      	str	r3, [r7, #20]
    }
 8000604:	bf00      	nop
 8000606:	e7fe      	b.n	8000606 <main+0x8e>
status=xTaskCreate(LEDyellow, "LEDyellow", 100, "LEDyellow", 2, &taskLedYellow);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <main+0xe0>)
 8000612:	2264      	movs	r2, #100	; 0x64
 8000614:	4910      	ldr	r1, [pc, #64]	; (8000658 <main+0xe0>)
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0xe4>)
 8000618:	f002 f9b0 	bl	800297c <xTaskCreate>
 800061c:	61f8      	str	r0, [r7, #28]
configASSERT(status==pdPASS);
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d00a      	beq.n	800063a <main+0xc2>
        __asm volatile
 8000624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000628:	f383 8811 	msr	BASEPRI, r3
 800062c:	f3bf 8f6f 	isb	sy
 8000630:	f3bf 8f4f 	dsb	sy
 8000634:	613b      	str	r3, [r7, #16]
    }
 8000636:	bf00      	nop
 8000638:	e7fe      	b.n	8000638 <main+0xc0>
vTaskStartScheduler();
 800063a:	f002 fb2d 	bl	8002c98 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0xc6>
 8000640:	e0001000 	.word	0xe0001000
 8000644:	0007a120 	.word	0x0007a120
 8000648:	0800688c 	.word	0x0800688c
 800064c:	08000799 	.word	0x08000799
 8000650:	08006898 	.word	0x08006898
 8000654:	080007bd 	.word	0x080007bd
 8000658:	080068a0 	.word	0x080068a0
 800065c:	080007dd 	.word	0x080007dd

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f8f8 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a26      	ldr	r2, [pc, #152]	; (8000728 <SystemClock_Config+0xc8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a20      	ldr	r2, [pc, #128]	; (800072c <SystemClock_Config+0xcc>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006d4:	2354      	movs	r3, #84	; 0x54
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fc73 	bl	8000fd0 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f896 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2102      	movs	r1, #2
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fed5 	bl	80014c0 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800071c:	f000 f880 	bl	8000820 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	; 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_GPIO_Init+0x60>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <MX_GPIO_Init+0x60>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6313      	str	r3, [r2, #48]	; 0x30
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_GPIO_Init+0x60>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0x64>)
 8000768:	f000 fbfe 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800076c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0x64>)
 8000784:	f000 fa6c 	bl	8000c60 <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020c00 	.word	0x40020c00

08000798 <LEDgreen>:

/* USER CODE BEGIN 4 */
static void LEDgreen(void *param)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <LEDgreen+0x20>)
 80007a6:	f000 fbf8 	bl	8000f9a <HAL_GPIO_TogglePin>
//		printf("%s\n",(char*)param);
		int ticks=pdMS_TO_TICKS(100);
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	60fb      	str	r3, [r7, #12]
		vTaskDelay(ticks);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fa39 	bl	8002c28 <vTaskDelay>
	{
 80007b6:	e7f3      	b.n	80007a0 <LEDgreen+0x8>
 80007b8:	40020c00 	.word	0x40020c00

080007bc <LEDred>:
	}
}
static void LEDred(void *param)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <LEDred+0x1c>)
 80007ca:	f000 fbe6 	bl	8000f9a <HAL_GPIO_TogglePin>
	//	printf("%s\n",(char*)param);
		vTaskDelay(800);
 80007ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80007d2:	f002 fa29 	bl	8002c28 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80007d6:	e7f5      	b.n	80007c4 <LEDred+0x8>
 80007d8:	40020c00 	.word	0x40020c00

080007dc <LEDyellow>:
	}
}
static void LEDyellow(void *param)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <LEDyellow+0x1c>)
 80007ea:	f000 fbd6 	bl	8000f9a <HAL_GPIO_TogglePin>
		//printf("%s\n",(char*)param);
		vTaskDelay(400);
 80007ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80007f2:	f002 fa19 	bl	8002c28 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007f6:	e7f5      	b.n	80007e4 <LEDyellow+0x8>
 80007f8:	40020c00 	.word	0x40020c00

080007fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d101      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080e:	f000 f925 	bl	8000a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40014000 	.word	0x40014000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 800086a:	f003 fb7d 	bl	8003f68 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <HAL_InitTick+0xd0>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	4a2d      	ldr	r2, [pc, #180]	; (800094c <HAL_InitTick+0xd0>)
 8000896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800089a:	6453      	str	r3, [r2, #68]	; 0x44
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <HAL_InitTick+0xd0>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 020c 	add.w	r2, r7, #12
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ffd0 	bl	8001858 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008b8:	f000 ffba 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 80008bc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	4a23      	ldr	r2, [pc, #140]	; (8000950 <HAL_InitTick+0xd4>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9b      	lsrs	r3, r3, #18
 80008c8:	3b01      	subs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <HAL_InitTick+0xd8>)
 80008ce:	4a22      	ldr	r2, [pc, #136]	; (8000958 <HAL_InitTick+0xdc>)
 80008d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <HAL_InitTick+0xd8>)
 80008d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <HAL_InitTick+0xd8>)
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_InitTick+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_InitTick+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_InitTick+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <HAL_InitTick+0xd8>)
 80008f4:	f000 ffe2 	bl	80018bc <HAL_TIM_Base_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000902:	2b00      	cmp	r3, #0
 8000904:	d11b      	bne.n	800093e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <HAL_InitTick+0xd8>)
 8000908:	f001 f832 	bl	8001970 <HAL_TIM_Base_Start_IT>
 800090c:	4603      	mov	r3, r0
 800090e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000916:	2b00      	cmp	r3, #0
 8000918:	d111      	bne.n	800093e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800091a:	2018      	movs	r0, #24
 800091c:	f000 f992 	bl	8000c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d808      	bhi.n	8000938 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000926:	2200      	movs	r2, #0
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	2018      	movs	r0, #24
 800092c:	f000 f96e 	bl	8000c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_InitTick+0xe0>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e002      	b.n	800093e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800093e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000942:	4618      	mov	r0, r3
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	431bde83 	.word	0x431bde83
 8000954:	20000038 	.word	0x20000038
 8000958:	40014000 	.word	0x40014000
 800095c:	20000004 	.word	0x20000004

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000992:	f001 f84f 	bl	8001a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000038 	.word	0x20000038

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ffd7 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f005 fef5 	bl	80067e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fdbf 	bl	8000578 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a08:	080069d0 	.word	0x080069d0
  ldr r2, =_sbss
 8000a0c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a10:	200144ac 	.word	0x200144ac

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f8d8 	bl	8000bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f7ff ff18 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff feee 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000080 	.word	0x20000080

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000080 	.word	0x20000080

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4c 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1e:	f7ff ff61 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f7ff ffb1 	bl	8000b90 <NVIC_EncodePriority>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff80 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff54 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e159      	b.n	8000f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8148 	bne.w	8000f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a2 	beq.w	8000f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x202>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2f4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x1fe>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a47      	ldr	r2, [pc, #284]	; (8000f58 <HAL_GPIO_Init+0x2f8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x1fa>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2fc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x1f6>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <HAL_GPIO_Init+0x300>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x1f2>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4935      	ldr	r1, [pc, #212]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f aea2 	bls.w	8000c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fac:	887a      	ldrh	r2, [r7, #2]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	041a      	lsls	r2, r3, #16
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	400b      	ands	r3, r1
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e267      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d075      	beq.n	80010da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fee:	4b88      	ldr	r3, [pc, #544]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d00c      	beq.n	8001014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ffa:	4b85      	ldr	r3, [pc, #532]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001002:	2b08      	cmp	r3, #8
 8001004:	d112      	bne.n	800102c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001006:	4b82      	ldr	r3, [pc, #520]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001012:	d10b      	bne.n	800102c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	4b7e      	ldr	r3, [pc, #504]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d05b      	beq.n	80010d8 <HAL_RCC_OscConfig+0x108>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d157      	bne.n	80010d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e242      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001034:	d106      	bne.n	8001044 <HAL_RCC_OscConfig+0x74>
 8001036:	4b76      	ldr	r3, [pc, #472]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a75      	ldr	r2, [pc, #468]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e01d      	b.n	8001080 <HAL_RCC_OscConfig+0xb0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800104c:	d10c      	bne.n	8001068 <HAL_RCC_OscConfig+0x98>
 800104e:	4b70      	ldr	r3, [pc, #448]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6f      	ldr	r2, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a6c      	ldr	r2, [pc, #432]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e00b      	b.n	8001080 <HAL_RCC_OscConfig+0xb0>
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a68      	ldr	r2, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800106e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b66      	ldr	r3, [pc, #408]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a65      	ldr	r2, [pc, #404]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800107a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d013      	beq.n	80010b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fcfc 	bl	8000a84 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fcf8 	bl	8000a84 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	; 0x64
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e207      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0xc0>
 80010ae:	e014      	b.n	80010da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fce8 	bl	8000a84 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fce4 	bl	8000a84 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	; 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e1f3      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ca:	4b51      	ldr	r3, [pc, #324]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0xe8>
 80010d6:	e000      	b.n	80010da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d063      	beq.n	80011ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00b      	beq.n	800110a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f2:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d11c      	bne.n	8001138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fe:	4b44      	ldr	r3, [pc, #272]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d116      	bne.n	8001138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110a:	4b41      	ldr	r3, [pc, #260]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <HAL_RCC_OscConfig+0x152>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e1c7      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4937      	ldr	r1, [pc, #220]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001136:	e03a      	b.n	80011ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d020      	beq.n	8001182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001140:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_RCC_OscConfig+0x244>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff fc9d 	bl	8000a84 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114e:	f7ff fc99 	bl	8000a84 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e1a8      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4925      	ldr	r1, [pc, #148]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 800117c:	4313      	orrs	r3, r2
 800117e:	600b      	str	r3, [r1, #0]
 8001180:	e015      	b.n	80011ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_RCC_OscConfig+0x244>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fc7c 	bl	8000a84 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001190:	f7ff fc78 	bl	8000a84 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e187      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d036      	beq.n	8001228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d016      	beq.n	80011f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_RCC_OscConfig+0x248>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c8:	f7ff fc5c 	bl	8000a84 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc58 	bl	8000a84 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e167      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x240>)
 80011e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x200>
 80011ee:	e01b      	b.n	8001228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_RCC_OscConfig+0x248>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fc45 	bl	8000a84 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fc:	e00e      	b.n	800121c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc41 	bl	8000a84 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d907      	bls.n	800121c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e150      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
 8001210:	40023800 	.word	0x40023800
 8001214:	42470000 	.word	0x42470000
 8001218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 800121e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1ea      	bne.n	80011fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8097 	beq.w	8001364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123a:	4b81      	ldr	r3, [pc, #516]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10f      	bne.n	8001266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b7d      	ldr	r3, [pc, #500]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a7c      	ldr	r2, [pc, #496]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001262:	2301      	movs	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001266:	4b77      	ldr	r3, [pc, #476]	; (8001444 <HAL_RCC_OscConfig+0x474>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d118      	bne.n	80012a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001272:	4b74      	ldr	r3, [pc, #464]	; (8001444 <HAL_RCC_OscConfig+0x474>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a73      	ldr	r2, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x474>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127e:	f7ff fc01 	bl	8000a84 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001286:	f7ff fbfd 	bl	8000a84 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e10c      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <HAL_RCC_OscConfig+0x474>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x2ea>
 80012ac:	4b64      	ldr	r3, [pc, #400]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	4a63      	ldr	r2, [pc, #396]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6713      	str	r3, [r2, #112]	; 0x70
 80012b8:	e01c      	b.n	80012f4 <HAL_RCC_OscConfig+0x324>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x30c>
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a5e      	ldr	r2, [pc, #376]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6713      	str	r3, [r2, #112]	; 0x70
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0x324>
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a57      	ldr	r2, [pc, #348]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a54      	ldr	r2, [pc, #336]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80012ee:	f023 0304 	bic.w	r3, r3, #4
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d015      	beq.n	8001328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fbc2 	bl	8000a84 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff fbbe 	bl	8000a84 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e0cb      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ee      	beq.n	8001304 <HAL_RCC_OscConfig+0x334>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fbac 	bl	8000a84 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001330:	f7ff fba8 	bl	8000a84 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e0b5      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ee      	bne.n	8001330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a38      	ldr	r2, [pc, #224]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 800135e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80a1 	beq.w	80014b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b08      	cmp	r3, #8
 8001378:	d05c      	beq.n	8001434 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d141      	bne.n	8001406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <HAL_RCC_OscConfig+0x478>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fb7c 	bl	8000a84 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fb78 	bl	8000a84 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e087      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69da      	ldr	r2, [r3, #28]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	019b      	lsls	r3, r3, #6
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	3b01      	subs	r3, #1
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	491b      	ldr	r1, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_RCC_OscConfig+0x478>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fb51 	bl	8000a84 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fb4d 	bl	8000a84 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e05c      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x416>
 8001404:	e054      	b.n	80014b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_RCC_OscConfig+0x478>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb3a 	bl	8000a84 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fb36 	bl	8000a84 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e045      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_RCC_OscConfig+0x470>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x444>
 8001432:	e03d      	b.n	80014b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e038      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000
 8001448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d028      	beq.n	80014ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001464:	429a      	cmp	r2, r3
 8001466:	d121      	bne.n	80014ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d11a      	bne.n	80014ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800147c:	4013      	ands	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001484:	4293      	cmp	r3, r2
 8001486:	d111      	bne.n	80014ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	3b01      	subs	r3, #1
 8001496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001498:	429a      	cmp	r2, r3
 800149a:	d107      	bne.n	80014ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0cc      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d90c      	bls.n	80014fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0b8      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001514:	4b59      	ldr	r3, [pc, #356]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800151e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	494d      	ldr	r1, [pc, #308]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d044      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d119      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e07f      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d003      	beq.n	800157e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157a:	2b03      	cmp	r3, #3
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e06f      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e067      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159e:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f023 0203 	bic.w	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4934      	ldr	r1, [pc, #208]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fa68 	bl	8000a84 <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b8:	f7ff fa64 	bl	8000a84 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e04f      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 020c 	and.w	r2, r3, #12
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	429a      	cmp	r2, r3
 80015de:	d1eb      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d20c      	bcs.n	8001608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e032      	b.n	800166e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4916      	ldr	r1, [pc, #88]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	490e      	ldr	r1, [pc, #56]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001646:	f000 f821 	bl	800168c <HAL_RCC_GetSysClockFreq>
 800164a:	4602      	mov	r2, r0
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	490a      	ldr	r1, [pc, #40]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	5ccb      	ldrb	r3, [r1, r3]
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_ClockConfig+0x1c8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f908 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00
 800167c:	40023800 	.word	0x40023800
 8001680:	08006990 	.word	0x08006990
 8001684:	20000000 	.word	0x20000000
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800168c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001690:	b090      	sub	sp, #64	; 0x40
 8001692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
 8001698:	2300      	movs	r3, #0
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_GetSysClockFreq+0x180>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d00d      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x40>
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	f200 80a1 	bhi.w	80017f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x34>
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80016be:	e09b      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_GetSysClockFreq+0x184>)
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016c4:	e09b      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016c6:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_GetSysClockFreq+0x188>)
 80016c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016ca:	e098      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_RCC_GetSysClockFreq+0x180>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_RCC_GetSysClockFreq+0x180>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d028      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_RCC_GetSysClockFreq+0x180>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	099b      	lsrs	r3, r3, #6
 80016e8:	2200      	movs	r2, #0
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	627a      	str	r2, [r7, #36]	; 0x24
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016f4:	2100      	movs	r1, #0
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_GetSysClockFreq+0x188>)
 80016f8:	fb03 f201 	mul.w	r2, r3, r1
 80016fc:	2300      	movs	r3, #0
 80016fe:	fb00 f303 	mul.w	r3, r0, r3
 8001702:	4413      	add	r3, r2
 8001704:	4a43      	ldr	r2, [pc, #268]	; (8001814 <HAL_RCC_GetSysClockFreq+0x188>)
 8001706:	fba0 1202 	umull	r1, r2, r0, r2
 800170a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800170c:	460a      	mov	r2, r1
 800170e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001712:	4413      	add	r3, r2
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	2200      	movs	r2, #0
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	61fa      	str	r2, [r7, #28]
 800171e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001722:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001726:	f7fe fda5 	bl	8000274 <__aeabi_uldivmod>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4613      	mov	r3, r2
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001732:	e053      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_RCC_GetSysClockFreq+0x180>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	2200      	movs	r2, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	617a      	str	r2, [r7, #20]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001746:	f04f 0b00 	mov.w	fp, #0
 800174a:	4652      	mov	r2, sl
 800174c:	465b      	mov	r3, fp
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	0159      	lsls	r1, r3, #5
 8001758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800175c:	0150      	lsls	r0, r2, #5
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	ebb2 080a 	subs.w	r8, r2, sl
 8001766:	eb63 090b 	sbc.w	r9, r3, fp
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001776:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800177a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800177e:	ebb2 0408 	subs.w	r4, r2, r8
 8001782:	eb63 0509 	sbc.w	r5, r3, r9
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	00eb      	lsls	r3, r5, #3
 8001790:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001794:	00e2      	lsls	r2, r4, #3
 8001796:	4614      	mov	r4, r2
 8001798:	461d      	mov	r5, r3
 800179a:	eb14 030a 	adds.w	r3, r4, sl
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	eb45 030b 	adc.w	r3, r5, fp
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017b2:	4629      	mov	r1, r5
 80017b4:	028b      	lsls	r3, r1, #10
 80017b6:	4621      	mov	r1, r4
 80017b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017bc:	4621      	mov	r1, r4
 80017be:	028a      	lsls	r2, r1, #10
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c6:	2200      	movs	r2, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	60fa      	str	r2, [r7, #12]
 80017cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d0:	f7fe fd50 	bl	8000274 <__aeabi_uldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4613      	mov	r3, r2
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_GetSysClockFreq+0x180>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	3301      	adds	r3, #1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetSysClockFreq+0x184>)
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001800:	4618      	mov	r0, r3
 8001802:	3740      	adds	r7, #64	; 0x40
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	00f42400 	.word	0x00f42400
 8001814:	017d7840 	.word	0x017d7840

08001818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_RCC_GetHCLKFreq+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000

08001830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001834:	f7ff fff0 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	0b5b      	lsrs	r3, r3, #13
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4903      	ldr	r1, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	080069a0 	.word	0x080069a0

08001858 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	220f      	movs	r2, #15
 8001866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_RCC_GetClockConfig+0x60>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0207 	and.w	r2, r3, #7
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e041      	b.n	8001952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f839 	bl	800195a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 f9ca 	bl	8001c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d001      	beq.n	8001988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e044      	b.n	8001a12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <HAL_TIM_Base_Start_IT+0xb0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d018      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x6c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b2:	d013      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x6c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_TIM_Base_Start_IT+0xb4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00e      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x6c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_TIM_Base_Start_IT+0xb8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x6c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <HAL_TIM_Base_Start_IT+0xbc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d004      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x6c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <HAL_TIM_Base_Start_IT+0xc0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d111      	bne.n	8001a00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d010      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019fe:	e007      	b.n	8001a10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40000800 	.word	0x40000800
 8001a2c:	40000c00 	.word	0x40000c00
 8001a30:	40014000 	.word	0x40014000

08001a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d122      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d11b      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0202 	mvn.w	r2, #2
 8001a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f8ee 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 8001a7c:	e005      	b.n	8001a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f8e0 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8f1 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d122      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0204 	mvn.w	r2, #4
 8001ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8c4 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 8001ad0:	e005      	b.n	8001ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8b6 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f8c7 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d122      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d11b      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0208 	mvn.w	r2, #8
 8001b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f89a 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 8001b24:	e005      	b.n	8001b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f88c 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f89d 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0210 	mvn.w	r2, #16
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2208      	movs	r2, #8
 8001b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f870 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f862 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f873 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10e      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d107      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0201 	mvn.w	r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fe22 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	2b80      	cmp	r3, #128	; 0x80
 8001bc4:	d10e      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b80      	cmp	r3, #128	; 0x80
 8001bd2:	d107      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8e2 	bl	8001da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d10e      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d107      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f838 	bl	8001c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d10e      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d107      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0220 	mvn.w	r2, #32
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ac 	bl	8001d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <TIM_Base_SetConfig+0xe4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00f      	beq.n	8001ccc <TIM_Base_SetConfig+0x38>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d00b      	beq.n	8001ccc <TIM_Base_SetConfig+0x38>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <TIM_Base_SetConfig+0xe8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <TIM_Base_SetConfig+0x38>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <TIM_Base_SetConfig+0xec>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d003      	beq.n	8001ccc <TIM_Base_SetConfig+0x38>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <TIM_Base_SetConfig+0xf0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d108      	bne.n	8001cde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <TIM_Base_SetConfig+0xe4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01b      	beq.n	8001d1e <TIM_Base_SetConfig+0x8a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cec:	d017      	beq.n	8001d1e <TIM_Base_SetConfig+0x8a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <TIM_Base_SetConfig+0xe8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <TIM_Base_SetConfig+0x8a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <TIM_Base_SetConfig+0xec>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00f      	beq.n	8001d1e <TIM_Base_SetConfig+0x8a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <TIM_Base_SetConfig+0xf0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00b      	beq.n	8001d1e <TIM_Base_SetConfig+0x8a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <TIM_Base_SetConfig+0xf4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <TIM_Base_SetConfig+0x8a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <TIM_Base_SetConfig+0xf8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d003      	beq.n	8001d1e <TIM_Base_SetConfig+0x8a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <TIM_Base_SetConfig+0xfc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d108      	bne.n	8001d30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <TIM_Base_SetConfig+0xe4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d103      	bne.n	8001d64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	615a      	str	r2, [r3, #20]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	40014000 	.word	0x40014000
 8001d8c:	40014400 	.word	0x40014400
 8001d90:	40014800 	.word	0x40014800

08001d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0208 	add.w	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f103 0208 	add.w	r2, r3, #8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 0208 	add.w	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d103      	bne.n	8001e7e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e00c      	b.n	8001e98 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3308      	adds	r3, #8
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e002      	b.n	8001e8c <vListInsert+0x2e>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d2f6      	bcs.n	8001e86 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6852      	ldr	r2, [r2, #4]
 8001ef0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d103      	bne.n	8001f04 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xQueueGenericReset+0x2a>
        __asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	60bb      	str	r3, [r7, #8]
    }
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001f4e:	f002 f889 	bl	8004064 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	441a      	add	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	441a      	add	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00f      	beq.n	8001fcc <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3310      	adds	r3, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f8eb 	bl	800318c <xTaskRemoveFromEventList>
 8001fb6:	e009      	b.n	8001fcc <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3310      	adds	r3, #16
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fefd 	bl	8001dbc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3324      	adds	r3, #36	; 0x24
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fef8 	bl	8001dbc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001fcc:	f002 f87a 	bl	80040c4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b08c      	sub	sp, #48	; 0x30
 8001fde:	af02      	add	r7, sp, #8
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <xQueueGenericCreate+0x2a>
        __asm volatile
 8001fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	61bb      	str	r3, [r7, #24]
    }
 8002000:	bf00      	nop
 8002002:	e7fe      	b.n	8002002 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <xQueueGenericCreate+0x48>
 8002014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	429a      	cmp	r2, r3
 8002020:	d101      	bne.n	8002026 <xQueueGenericCreate+0x4c>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <xQueueGenericCreate+0x4e>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <xQueueGenericCreate+0x68>
        __asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	617b      	str	r3, [r7, #20]
    }
 800203e:	bf00      	nop
 8002040:	e7fe      	b.n	8002040 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002048:	d90a      	bls.n	8002060 <xQueueGenericCreate+0x86>
        __asm volatile
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	613b      	str	r3, [r7, #16]
    }
 800205c:	bf00      	nop
 800205e:	e7fe      	b.n	800205e <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3350      	adds	r3, #80	; 0x50
 8002064:	4618      	mov	r0, r3
 8002066:	f002 f929 	bl	80042bc <pvPortMalloc>
 800206a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3350      	adds	r3, #80	; 0x50
 800207a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f805 	bl	8002098 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800208e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002090:	4618      	mov	r0, r3
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e002      	b.n	80020ba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020c6:	2101      	movs	r1, #1
 80020c8:	69b8      	ldr	r0, [r7, #24]
 80020ca:	f7ff ff2b 	bl	8001f24 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	2073      	movs	r0, #115	; 0x73
 80020de:	f003 fc7b 	bl	80059d8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b090      	sub	sp, #64	; 0x40
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80020fa:	2300      	movs	r3, #0
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <xQueueGenericSend+0x32>
        __asm volatile
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800211a:	bf00      	nop
 800211c:	e7fe      	b.n	800211c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <xQueueGenericSend+0x40>
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <xQueueGenericSend+0x44>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <xQueueGenericSend+0x46>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <xQueueGenericSend+0x60>
        __asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002148:	bf00      	nop
 800214a:	e7fe      	b.n	800214a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d103      	bne.n	800215a <xQueueGenericSend+0x6e>
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <xQueueGenericSend+0x72>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <xQueueGenericSend+0x74>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <xQueueGenericSend+0x8e>
        __asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	623b      	str	r3, [r7, #32]
    }
 8002176:	bf00      	nop
 8002178:	e7fe      	b.n	8002178 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800217a:	f001 f9a1 	bl	80034c0 <xTaskGetSchedulerState>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <xQueueGenericSend+0x9e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <xQueueGenericSend+0xa2>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <xQueueGenericSend+0xa4>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <xQueueGenericSend+0xbe>
        __asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	61fb      	str	r3, [r7, #28]
    }
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021aa:	f001 ff5b 	bl	8004064 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <xQueueGenericSend+0xd4>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d11f      	bne.n	8002200 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 f996 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	460b      	mov	r3, r1
 80021d2:	4601      	mov	r1, r0
 80021d4:	205a      	movs	r0, #90	; 0x5a
 80021d6:	f003 fc75 	bl	8005ac4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021e0:	f000 fa56 	bl	8002690 <prvCopyDataToQueue>
 80021e4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	3324      	adds	r3, #36	; 0x24
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 ffca 	bl	800318c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80021f8:	f001 ff64 	bl	80040c4 <vPortExitCritical>
                return pdPASS;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e07d      	b.n	80022fc <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d110      	bne.n	8002228 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002206:	f001 ff5d 	bl	80040c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	4618      	mov	r0, r3
 800220e:	f004 f971 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	460b      	mov	r3, r1
 800221c:	4601      	mov	r1, r0
 800221e:	205a      	movs	r0, #90	; 0x5a
 8002220:	f003 fc50 	bl	8005ac4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002224:	2300      	movs	r3, #0
 8002226:	e069      	b.n	80022fc <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4618      	mov	r0, r3
 8002234:	f001 f810 	bl	8003258 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002238:	2301      	movs	r3, #1
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800223c:	f001 ff42 	bl	80040c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002240:	f000 fd8c 	bl	8002d5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002244:	f001 ff0e 	bl	8004064 <vPortEnterCritical>
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800224e:	b25b      	sxtb	r3, r3
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002254:	d103      	bne.n	800225e <xQueueGenericSend+0x172>
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002264:	b25b      	sxtb	r3, r3
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800226a:	d103      	bne.n	8002274 <xQueueGenericSend+0x188>
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002274:	f001 ff26 	bl	80040c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002278:	1d3a      	adds	r2, r7, #4
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 ffff 	bl	8003284 <xTaskCheckForTimeOut>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d124      	bne.n	80022d6 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800228c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800228e:	f000 faf7 	bl	8002880 <prvIsQueueFull>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d018      	beq.n	80022ca <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	3310      	adds	r3, #16
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 ff21 	bl	80030e8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80022a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022a8:	f000 fa82 	bl	80027b0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80022ac:	f000 fd64 	bl	8002d78 <xTaskResumeAll>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f47f af79 	bne.w	80021aa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <xQueueGenericSend+0x218>)
 80022ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	e76f      	b.n	80021aa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80022ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022cc:	f000 fa70 	bl	80027b0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022d0:	f000 fd52 	bl	8002d78 <xTaskResumeAll>
 80022d4:	e769      	b.n	80021aa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80022d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022d8:	f000 fa6a 	bl	80027b0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022dc:	f000 fd4c 	bl	8002d78 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 f906 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	460b      	mov	r3, r1
 80022f2:	4601      	mov	r1, r0
 80022f4:	205a      	movs	r0, #90	; 0x5a
 80022f6:	f003 fbe5 	bl	8005ac4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80022fa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3738      	adds	r7, #56	; 0x38
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	e000ed04 	.word	0xe000ed04

08002308 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b090      	sub	sp, #64	; 0x40
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <xQueueGenericSendFromISR+0x3c>
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <xQueueGenericSendFromISR+0x40>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <xQueueGenericSendFromISR+0x42>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10a      	bne.n	8002364 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002360:	bf00      	nop
 8002362:	e7fe      	b.n	8002362 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d103      	bne.n	8002372 <xQueueGenericSendFromISR+0x6a>
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <xQueueGenericSendFromISR+0x6e>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <xQueueGenericSendFromISR+0x70>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	623b      	str	r3, [r7, #32]
    }
 800238e:	bf00      	nop
 8002390:	e7fe      	b.n	8002390 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002392:	f001 ff53 	bl	800423c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002396:	f3ef 8211 	mrs	r2, BASEPRI
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	61fa      	str	r2, [r7, #28]
 80023ac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80023ae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <xQueueGenericSendFromISR+0xbc>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d148      	bne.n	8002456 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80023c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 f88c 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 80023dc:	4601      	mov	r1, r0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	461a      	mov	r2, r3
 80023e2:	2060      	movs	r0, #96	; 0x60
 80023e4:	f003 fa9e 	bl	8005924 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023ee:	f000 f94f 	bl	8002690 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80023f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fa:	d112      	bne.n	8002422 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b00      	cmp	r3, #0
 8002402:	d025      	beq.n	8002450 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002406:	3324      	adds	r3, #36	; 0x24
 8002408:	4618      	mov	r0, r3
 800240a:	f000 febf 	bl	800318c <xTaskRemoveFromEventList>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01d      	beq.n	8002450 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01a      	beq.n	8002450 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e016      	b.n	8002450 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002422:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002426:	2b7f      	cmp	r3, #127	; 0x7f
 8002428:	d10a      	bne.n	8002440 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	617b      	str	r3, [r7, #20]
    }
 800243c:	bf00      	nop
 800243e:	e7fe      	b.n	800243e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002440:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002444:	3301      	adds	r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	b25a      	sxtb	r2, r3
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002450:	2301      	movs	r3, #1
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002454:	e00b      	b.n	800246e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	4618      	mov	r0, r3
 800245a:	f004 f84b 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 800245e:	4601      	mov	r1, r0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	461a      	mov	r2, r3
 8002464:	2060      	movs	r0, #96	; 0x60
 8002466:	f003 fa5d 	bl	8005924 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800246a:	2300      	movs	r3, #0
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002478:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800247a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800247c:	4618      	mov	r0, r3
 800247e:	3740      	adds	r7, #64	; 0x40
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b08f      	sub	sp, #60	; 0x3c
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <xQueueReceive+0x30>
        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	623b      	str	r3, [r7, #32]
    }
 80024b0:	bf00      	nop
 80024b2:	e7fe      	b.n	80024b2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <xQueueReceive+0x3e>
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <xQueueReceive+0x42>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <xQueueReceive+0x44>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <xQueueReceive+0x5e>
        __asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	61fb      	str	r3, [r7, #28]
    }
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e2:	f000 ffed 	bl	80034c0 <xTaskGetSchedulerState>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <xQueueReceive+0x6e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <xQueueReceive+0x72>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <xQueueReceive+0x74>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xQueueReceive+0x8e>
        __asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	61bb      	str	r3, [r7, #24]
    }
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002512:	f001 fda7 	bl	8004064 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	2b00      	cmp	r3, #0
 8002520:	d024      	beq.n	800256c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002526:	f000 f91d 	bl	8002764 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	4618      	mov	r0, r3
 800252e:	f003 ffe1 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002532:	4604      	mov	r4, r0
 8002534:	2000      	movs	r0, #0
 8002536:	f003 ffdd 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2101      	movs	r1, #1
 8002540:	9100      	str	r1, [sp, #0]
 8002542:	4621      	mov	r1, r4
 8002544:	205c      	movs	r0, #92	; 0x5c
 8002546:	f003 fabd 	bl	8005ac4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	3310      	adds	r3, #16
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fe14 	bl	800318c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002564:	f001 fdae 	bl	80040c4 <vPortExitCritical>
                return pdPASS;
 8002568:	2301      	movs	r3, #1
 800256a:	e08a      	b.n	8002682 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d113      	bne.n	800259a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002572:	f001 fda7 	bl	80040c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	4618      	mov	r0, r3
 800257a:	f003 ffbb 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 800257e:	4604      	mov	r4, r0
 8002580:	2000      	movs	r0, #0
 8002582:	f003 ffb7 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002586:	4602      	mov	r2, r0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2101      	movs	r1, #1
 800258c:	9100      	str	r1, [sp, #0]
 800258e:	4621      	mov	r1, r4
 8002590:	205c      	movs	r0, #92	; 0x5c
 8002592:	f003 fa97 	bl	8005ac4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002596:	2300      	movs	r3, #0
 8002598:	e073      	b.n	8002682 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fe57 	bl	8003258 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ae:	f001 fd89 	bl	80040c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025b2:	f000 fbd3 	bl	8002d5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025b6:	f001 fd55 	bl	8004064 <vPortEnterCritical>
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c6:	d103      	bne.n	80025d0 <xQueueReceive+0x14c>
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d6:	b25b      	sxtb	r3, r3
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025dc:	d103      	bne.n	80025e6 <xQueueReceive+0x162>
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e6:	f001 fd6d 	bl	80040c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ea:	1d3a      	adds	r2, r7, #4
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fe46 	bl	8003284 <xTaskCheckForTimeOut>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d124      	bne.n	8002648 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002600:	f000 f928 	bl	8002854 <prvIsQueueEmpty>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d018      	beq.n	800263c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	3324      	adds	r3, #36	; 0x24
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fd68 	bl	80030e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800261a:	f000 f8c9 	bl	80027b0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800261e:	f000 fbab 	bl	8002d78 <xTaskResumeAll>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	f47f af74 	bne.w	8002512 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <xQueueReceive+0x208>)
 800262c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	e76a      	b.n	8002512 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800263c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800263e:	f000 f8b7 	bl	80027b0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002642:	f000 fb99 	bl	8002d78 <xTaskResumeAll>
 8002646:	e764      	b.n	8002512 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264a:	f000 f8b1 	bl	80027b0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800264e:	f000 fb93 	bl	8002d78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002654:	f000 f8fe 	bl	8002854 <prvIsQueueEmpty>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f43f af59 	beq.w	8002512 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	4618      	mov	r0, r3
 8002664:	f003 ff46 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002668:	4604      	mov	r4, r0
 800266a:	2000      	movs	r0, #0
 800266c:	f003 ff42 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002670:	4602      	mov	r2, r0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2101      	movs	r1, #1
 8002676:	9100      	str	r1, [sp, #0]
 8002678:	4621      	mov	r1, r4
 800267a:	205c      	movs	r0, #92	; 0x5c
 800267c:	f003 fa22 	bl	8005ac4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002680:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002682:	4618      	mov	r0, r3
 8002684:	3734      	adds	r7, #52	; 0x34
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	bf00      	nop
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d14d      	bne.n	8002752 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 ff1e 	bl	80034fc <xTaskPriorityDisinherit>
 80026c0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e043      	b.n	8002752 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d119      	bne.n	8002704 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6858      	ldr	r0, [r3, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	461a      	mov	r2, r3
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	f004 f8b4 	bl	8006848 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	441a      	add	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d32b      	bcc.n	8002752 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e026      	b.n	8002752 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68d8      	ldr	r0, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	461a      	mov	r2, r3
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	f004 f89a 	bl	8006848 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	425b      	negs	r3, r3
 800271e:	441a      	add	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d207      	bcs.n	8002740 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	425b      	negs	r3, r3
 800273a:	441a      	add	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d105      	bne.n	8002752 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3b01      	subs	r3, #1
 8002750:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800275a:	697b      	ldr	r3, [r7, #20]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	441a      	add	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d303      	bcc.n	8002798 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	461a      	mov	r2, r3
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f004 f850 	bl	8006848 <memcpy>
    }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027b8:	f001 fc54 	bl	8004064 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027c4:	e011      	b.n	80027ea <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3324      	adds	r3, #36	; 0x24
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fcda 	bl	800318c <xTaskRemoveFromEventList>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80027de:	f000 fdb7 	bl	8003350 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	dce9      	bgt.n	80027c6 <prvUnlockQueue+0x16>
 80027f2:	e000      	b.n	80027f6 <prvUnlockQueue+0x46>
                        break;
 80027f4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80027fe:	f001 fc61 	bl	80040c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002802:	f001 fc2f 	bl	8004064 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800280c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800280e:	e011      	b.n	8002834 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3310      	adds	r3, #16
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fcb5 	bl	800318c <xTaskRemoveFromEventList>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002828:	f000 fd92 	bl	8003350 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	3b01      	subs	r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002838:	2b00      	cmp	r3, #0
 800283a:	dce9      	bgt.n	8002810 <prvUnlockQueue+0x60>
 800283c:	e000      	b.n	8002840 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800283e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002848:	f001 fc3c 	bl	80040c4 <vPortExitCritical>
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800285c:	f001 fc02 	bl	8004064 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002868:	2301      	movs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e001      	b.n	8002872 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002872:	f001 fc27 	bl	80040c4 <vPortExitCritical>

    return xReturn;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002888:	f001 fbec 	bl	8004064 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	429a      	cmp	r2, r3
 8002896:	d102      	bne.n	800289e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002898:	2301      	movs	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e001      	b.n	80028a2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028a2:	f001 fc0f 	bl	80040c4 <vPortExitCritical>

    return xReturn;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e01e      	b.n	80028fe <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <vQueueAddToRegistry+0x60>)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d115      	bne.n	80028f8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028cc:	4910      	ldr	r1, [pc, #64]	; (8002910 <vQueueAddToRegistry+0x60>)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80028d6:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <vQueueAddToRegistry+0x60>)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fe05 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 80028ea:	4601      	mov	r1, r0
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	2071      	movs	r0, #113	; 0x71
 80028f2:	f003 f817 	bl	8005924 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80028f6:	e006      	b.n	8002906 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3301      	adds	r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b07      	cmp	r3, #7
 8002902:	d9dd      	bls.n	80028c0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000084 	.word	0x20000084

08002914 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002924:	f001 fb9e 	bl	8004064 <vPortEnterCritical>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800292e:	b25b      	sxtb	r3, r3
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002934:	d103      	bne.n	800293e <vQueueWaitForMessageRestricted+0x2a>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002944:	b25b      	sxtb	r3, r3
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294a:	d103      	bne.n	8002954 <vQueueWaitForMessageRestricted+0x40>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002954:	f001 fbb6 	bl	80040c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3324      	adds	r3, #36	; 0x24
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fbe1 	bl	8003130 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff1e 	bl	80027b0 <prvUnlockQueue>
    }
 8002974:	bf00      	nop
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af04      	add	r7, sp, #16
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fc93 	bl	80042bc <pvPortMalloc>
 8002996:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00e      	beq.n	80029bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800299e:	2058      	movs	r0, #88	; 0x58
 80029a0:	f001 fc8c 	bl	80042bc <pvPortMalloc>
 80029a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
 80029b2:	e005      	b.n	80029c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80029b4:	6978      	ldr	r0, [r7, #20]
 80029b6:	f001 fd61 	bl	800447c <vPortFree>
 80029ba:	e001      	b.n	80029c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d013      	beq.n	80029ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	2300      	movs	r3, #0
 80029ca:	9303      	str	r3, [sp, #12]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f80e 	bl	80029fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029e2:	69f8      	ldr	r0, [r7, #28]
 80029e4:	f000 f8a2 	bl	8002b2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e002      	b.n	80029f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029f4:	69bb      	ldr	r3, [r7, #24]
    }
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b088      	sub	sp, #32
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	461a      	mov	r2, r3
 8002a16:	21a5      	movs	r1, #165	; 0xa5
 8002a18:	f003 ff24 	bl	8006864 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a26:	3b01      	subs	r3, #1
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f023 0307 	bic.w	r3, r3, #7
 8002a34:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	617b      	str	r3, [r7, #20]
    }
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01f      	beq.n	8002a9c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	e012      	b.n	8002a88 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	7819      	ldrb	r1, [r3, #0]
 8002a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3334      	adds	r3, #52	; 0x34
 8002a72:	460a      	mov	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b09      	cmp	r3, #9
 8002a8c:	d9e9      	bls.n	8002a62 <prvInitialiseNewTask+0x64>
 8002a8e:	e000      	b.n	8002a92 <prvInitialiseNewTask+0x94>
            {
                break;
 8002a90:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a9a:	e003      	b.n	8002aa4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d901      	bls.n	8002aae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	2200      	movs	r2, #0
 8002abe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f999 	bl	8001dfc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	3318      	adds	r3, #24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f994 	bl	8001dfc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	f1c3 0205 	rsb	r2, r3, #5
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	3350      	adds	r3, #80	; 0x50
 8002aee:	2204      	movs	r2, #4
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 feb6 	bl	8006864 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	3354      	adds	r3, #84	; 0x54
 8002afc:	2201      	movs	r2, #1
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 feaf 	bl	8006864 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	69b8      	ldr	r0, [r7, #24]
 8002b0c:	f001 f900 	bl	8003d10 <pxPortInitialiseStack>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b22:	bf00      	nop
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b34:	f001 fa96 	bl	8004064 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <prvAddNewTaskToReadyList+0xe4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <prvAddNewTaskToReadyList+0xe4>)
 8002b40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <prvAddNewTaskToReadyList+0xe8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b4a:	4a32      	ldr	r2, [pc, #200]	; (8002c14 <prvAddNewTaskToReadyList+0xe8>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <prvAddNewTaskToReadyList+0xe4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d110      	bne.n	8002b7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b58:	f000 fc18 	bl	800338c <prvInitialiseTaskLists>
 8002b5c:	e00d      	b.n	8002b7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <prvAddNewTaskToReadyList+0xec>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <prvAddNewTaskToReadyList+0xe8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d802      	bhi.n	8002b7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b74:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <prvAddNewTaskToReadyList+0xe8>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <prvAddNewTaskToReadyList+0xf0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <prvAddNewTaskToReadyList+0xf0>)
 8002b82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <prvAddNewTaskToReadyList+0xf0>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <prvAddNewTaskToReadyList+0x94>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fb87 	bl	80062a8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	461d      	mov	r5, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461c      	mov	r4, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	1ae3      	subs	r3, r4, r3
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	462b      	mov	r3, r5
 8002bbc:	f001 fe2c 	bl	8004818 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fbf4 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <prvAddNewTaskToReadyList+0xf4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <prvAddNewTaskToReadyList+0xf4>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <prvAddNewTaskToReadyList+0xf8>)
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f7ff f910 	bl	8001e16 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002bf6:	f001 fa65 	bl	80040c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <prvAddNewTaskToReadyList+0xec>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <prvAddNewTaskToReadyList+0xe8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000019c 	.word	0x2000019c
 8002c14:	200000c4 	.word	0x200000c4
 8002c18:	200001a8 	.word	0x200001a8
 8002c1c:	200001b8 	.word	0x200001b8
 8002c20:	200001a4 	.word	0x200001a4
 8002c24:	200000c8 	.word	0x200000c8

08002c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01b      	beq.n	8002c72 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <vTaskDelay+0x68>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <vTaskDelay+0x30>
        __asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	60bb      	str	r3, [r7, #8]
    }
 8002c54:	bf00      	nop
 8002c56:	e7fe      	b.n	8002c56 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002c58:	f000 f880 	bl	8002d5c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	2023      	movs	r0, #35	; 0x23
 8002c60:	f002 fe24 	bl	80058ac <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c64:	2100      	movs	r1, #0
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fcc8 	bl	80035fc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c6c:	f000 f884 	bl	8002d78 <xTaskResumeAll>
 8002c70:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <vTaskDelay+0x6c>)
 8002c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200001c4 	.word	0x200001c4
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002c9e:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <vTaskStartScheduler+0xa4>)
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2282      	movs	r2, #130	; 0x82
 8002caa:	4925      	ldr	r1, [pc, #148]	; (8002d40 <vTaskStartScheduler+0xa8>)
 8002cac:	4825      	ldr	r0, [pc, #148]	; (8002d44 <vTaskStartScheduler+0xac>)
 8002cae:	f7ff fe65 	bl	800297c <xTaskCreate>
 8002cb2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002cba:	f000 fd17 	bl	80036ec <xTimerCreateTimerTask>
 8002cbe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d124      	bne.n	8002d10 <vTaskStartScheduler+0x78>
        __asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	60bb      	str	r3, [r7, #8]
    }
 8002cd8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <vTaskStartScheduler+0xb0>)
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <vTaskStartScheduler+0xb4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <vTaskStartScheduler+0xb8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <vTaskStartScheduler+0xbc>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <vTaskStartScheduler+0xa4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d102      	bne.n	8002d00 <vTaskStartScheduler+0x68>
 8002cfa:	f003 fab9 	bl	8006270 <SEGGER_SYSVIEW_OnIdle>
 8002cfe:	e004      	b.n	8002d0a <vTaskStartScheduler+0x72>
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <vTaskStartScheduler+0xbc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fb11 	bl	800632c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d0a:	f001 f88b 	bl	8003e24 <xPortStartScheduler>
 8002d0e:	e00e      	b.n	8002d2e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d16:	d10a      	bne.n	8002d2e <vTaskStartScheduler+0x96>
        __asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	607b      	str	r3, [r7, #4]
    }
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <vTaskStartScheduler+0xc0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200001c0 	.word	0x200001c0
 8002d40:	080068ac 	.word	0x080068ac
 8002d44:	08003369 	.word	0x08003369
 8002d48:	200001bc 	.word	0x200001bc
 8002d4c:	200001a8 	.word	0x200001a8
 8002d50:	200001a0 	.word	0x200001a0
 8002d54:	200000c4 	.word	0x200000c4
 8002d58:	2000000c 	.word	0x2000000c

08002d5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <vTaskSuspendAll+0x18>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a03      	ldr	r2, [pc, #12]	; (8002d74 <vTaskSuspendAll+0x18>)
 8002d68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	200001c4 	.word	0x200001c4

08002d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d86:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <xTaskResumeAll+0x104>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	603b      	str	r3, [r7, #0]
    }
 8002da0:	bf00      	nop
 8002da2:	e7fe      	b.n	8002da2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002da4:	f001 f95e 	bl	8004064 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002da8:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <xTaskResumeAll+0x104>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <xTaskResumeAll+0x104>)
 8002db0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db2:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <xTaskResumeAll+0x104>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d159      	bne.n	8002e6e <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <xTaskResumeAll+0x108>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d055      	beq.n	8002e6e <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dc2:	e032      	b.n	8002e2a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dc4:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <xTaskResumeAll+0x10c>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3318      	adds	r3, #24
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f87d 	bl	8001ed0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f878 	bl	8001ed0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fae4 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	2201      	movs	r2, #1
 8002dee:	409a      	lsls	r2, r3
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <xTaskResumeAll+0x110>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <xTaskResumeAll+0x110>)
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <xTaskResumeAll+0x114>)
 8002e08:	441a      	add	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7ff f800 	bl	8001e16 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <xTaskResumeAll+0x118>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d302      	bcc.n	8002e2a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <xTaskResumeAll+0x11c>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <xTaskResumeAll+0x10c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1c8      	bne.n	8002dc4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e38:	f000 fb26 	bl	8003488 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <xTaskResumeAll+0x120>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e48:	f000 f84a 	bl	8002ee0 <xTaskIncrementTick>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <xTaskResumeAll+0x11c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f1      	bne.n	8002e48 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <xTaskResumeAll+0x120>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <xTaskResumeAll+0x11c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e6e:	f001 f929 	bl	80040c4 <vPortExitCritical>

    return xAlreadyYielded;
 8002e72:	687b      	ldr	r3, [r7, #4]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200001c4 	.word	0x200001c4
 8002e80:	2000019c 	.word	0x2000019c
 8002e84:	2000015c 	.word	0x2000015c
 8002e88:	200001a4 	.word	0x200001a4
 8002e8c:	200000c8 	.word	0x200000c8
 8002e90:	200000c4 	.word	0x200000c4
 8002e94:	200001b0 	.word	0x200001b0
 8002e98:	200001ac 	.word	0x200001ac

08002e9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <xTaskGetTickCount+0x1c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ea8:	687b      	ldr	r3, [r7, #4]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200001a0 	.word	0x200001a0

08002ebc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ec2:	f001 f9bb 	bl	800423c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <xTaskGetTickCountFromISR+0x20>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ed0:	683b      	ldr	r3, [r7, #0]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200001a0 	.word	0x200001a0

08002ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <xTaskIncrementTick+0x110>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d173      	bne.n	8002fda <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef2:	4b40      	ldr	r3, [pc, #256]	; (8002ff4 <xTaskIncrementTick+0x114>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002efa:	4a3e      	ldr	r2, [pc, #248]	; (8002ff4 <xTaskIncrementTick+0x114>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d120      	bne.n	8002f48 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f06:	4b3c      	ldr	r3, [pc, #240]	; (8002ff8 <xTaskIncrementTick+0x118>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <xTaskIncrementTick+0x46>
        __asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	603b      	str	r3, [r7, #0]
    }
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xTaskIncrementTick+0x44>
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <xTaskIncrementTick+0x118>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <xTaskIncrementTick+0x11c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <xTaskIncrementTick+0x118>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <xTaskIncrementTick+0x11c>)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <xTaskIncrementTick+0x120>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <xTaskIncrementTick+0x120>)
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	f000 faa0 	bl	8003488 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f48:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <xTaskIncrementTick+0x124>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d348      	bcc.n	8002fe4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <xTaskIncrementTick+0x118>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f5c:	4b29      	ldr	r3, [pc, #164]	; (8003004 <xTaskIncrementTick+0x124>)
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f62:	601a      	str	r2, [r3, #0]
                    break;
 8002f64:	e03e      	b.n	8002fe4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <xTaskIncrementTick+0x118>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d203      	bcs.n	8002f86 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f7e:	4a21      	ldr	r2, [pc, #132]	; (8003004 <xTaskIncrementTick+0x124>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f84:	e02e      	b.n	8002fe4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe ffa0 	bl	8001ed0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe ff97 	bl	8001ed0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fa03 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	2201      	movs	r2, #1
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <xTaskIncrementTick+0x128>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	4a13      	ldr	r2, [pc, #76]	; (8003008 <xTaskIncrementTick+0x128>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a10      	ldr	r2, [pc, #64]	; (800300c <xTaskIncrementTick+0x12c>)
 8002fca:	441a      	add	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7fe ff1f 	bl	8001e16 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fd8:	e7bb      	b.n	8002f52 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <xTaskIncrementTick+0x130>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <xTaskIncrementTick+0x130>)
 8002fe2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002fe4:	697b      	ldr	r3, [r7, #20]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200001c4 	.word	0x200001c4
 8002ff4:	200001a0 	.word	0x200001a0
 8002ff8:	20000154 	.word	0x20000154
 8002ffc:	20000158 	.word	0x20000158
 8003000:	200001b4 	.word	0x200001b4
 8003004:	200001bc 	.word	0x200001bc
 8003008:	200001a4 	.word	0x200001a4
 800300c:	200000c8 	.word	0x200000c8
 8003010:	200001ac 	.word	0x200001ac

08003014 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <vTaskSwitchContext+0xbc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003022:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <vTaskSwitchContext+0xc0>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003028:	e04d      	b.n	80030c6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <vTaskSwitchContext+0xc0>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <vTaskSwitchContext+0xc4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	f1c3 031f 	rsb	r3, r3, #31
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	4925      	ldr	r1, [pc, #148]	; (80030dc <vTaskSwitchContext+0xc8>)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <vTaskSwitchContext+0x5c>
        __asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	607b      	str	r3, [r7, #4]
    }
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <vTaskSwitchContext+0x5a>
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4a18      	ldr	r2, [pc, #96]	; (80030dc <vTaskSwitchContext+0xc8>)
 800307c:	4413      	add	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3308      	adds	r3, #8
 8003092:	429a      	cmp	r2, r3
 8003094:	d104      	bne.n	80030a0 <vTaskSwitchContext+0x8c>
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <vTaskSwitchContext+0xcc>)
 80030a8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <vTaskSwitchContext+0xcc>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <vTaskSwitchContext+0xd0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d102      	bne.n	80030bc <vTaskSwitchContext+0xa8>
 80030b6:	f003 f8db 	bl	8006270 <SEGGER_SYSVIEW_OnIdle>
}
 80030ba:	e004      	b.n	80030c6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <vTaskSwitchContext+0xcc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 f933 	bl	800632c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200001c4 	.word	0x200001c4
 80030d4:	200001b0 	.word	0x200001b0
 80030d8:	200001a4 	.word	0x200001a4
 80030dc:	200000c8 	.word	0x200000c8
 80030e0:	200000c4 	.word	0x200000c4
 80030e4:	200001c0 	.word	0x200001c0

080030e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	60fb      	str	r3, [r7, #12]
    }
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <vTaskPlaceOnEventList+0x44>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3318      	adds	r3, #24
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fea1 	bl	8001e5e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800311c:	2101      	movs	r1, #1
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f000 fa6c 	bl	80035fc <prvAddCurrentTaskToDelayedList>
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200000c4 	.word	0x200000c4

08003130 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	617b      	str	r3, [r7, #20]
    }
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <vTaskPlaceOnEventListRestricted+0x58>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3318      	adds	r3, #24
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7fe fe58 	bl	8001e16 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003170:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003172:	2024      	movs	r0, #36	; 0x24
 8003174:	f002 fb7c 	bl	8005870 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	68b8      	ldr	r0, [r7, #8]
 800317c:	f000 fa3e 	bl	80035fc <prvAddCurrentTaskToDelayedList>
    }
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200000c4 	.word	0x200000c4

0800318c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	60fb      	str	r3, [r7, #12]
    }
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3318      	adds	r3, #24
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fe87 	bl	8001ed0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <xTaskRemoveFromEventList+0xb4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d120      	bne.n	800320c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fe7e 	bl	8001ed0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 f8ea 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <xTaskRemoveFromEventList+0xb8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	4a16      	ldr	r2, [pc, #88]	; (8003244 <xTaskRemoveFromEventList+0xb8>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <xTaskRemoveFromEventList+0xbc>)
 80031fc:	441a      	add	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f7fe fe06 	bl	8001e16 <vListInsertEnd>
 800320a:	e005      	b.n	8003218 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3318      	adds	r3, #24
 8003210:	4619      	mov	r1, r3
 8003212:	480e      	ldr	r0, [pc, #56]	; (800324c <xTaskRemoveFromEventList+0xc0>)
 8003214:	f7fe fdff 	bl	8001e16 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <xTaskRemoveFromEventList+0xc4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	429a      	cmp	r2, r3
 8003224:	d905      	bls.n	8003232 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003226:	2301      	movs	r3, #1
 8003228:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <xTaskRemoveFromEventList+0xc8>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e001      	b.n	8003236 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003236:	697b      	ldr	r3, [r7, #20]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200001c4 	.word	0x200001c4
 8003244:	200001a4 	.word	0x200001a4
 8003248:	200000c8 	.word	0x200000c8
 800324c:	2000015c 	.word	0x2000015c
 8003250:	200000c4 	.word	0x200000c4
 8003254:	200001b0 	.word	0x200001b0

08003258 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <vTaskInternalSetTimeOutState+0x24>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <vTaskInternalSetTimeOutState+0x28>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	605a      	str	r2, [r3, #4]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	200001b4 	.word	0x200001b4
 8003280:	200001a0 	.word	0x200001a0

08003284 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	613b      	str	r3, [r7, #16]
    }
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	60fb      	str	r3, [r7, #12]
    }
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032c6:	f000 fecd 	bl	8004064 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <xTaskCheckForTimeOut+0xc4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e2:	d102      	bne.n	80032ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	e026      	b.n	8003338 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <xTaskCheckForTimeOut+0xc8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d00a      	beq.n	800330c <xTaskCheckForTimeOut+0x88>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d305      	bcc.n	800330c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003300:	2301      	movs	r3, #1
 8003302:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e015      	b.n	8003338 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	429a      	cmp	r2, r3
 8003314:	d20b      	bcs.n	800332e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad2      	subs	r2, r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff98 	bl	8003258 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	e004      	b.n	8003338 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003334:	2301      	movs	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003338:	f000 fec4 	bl	80040c4 <vPortExitCritical>

    return xReturn;
 800333c:	69fb      	ldr	r3, [r7, #28]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200001a0 	.word	0x200001a0
 800334c:	200001b4 	.word	0x200001b4

08003350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <vTaskMissedYield+0x14>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	200001b0 	.word	0x200001b0

08003368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003370:	f000 f84c 	bl	800340c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <prvIdleTask+0x20>)
 8003376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003384:	e7f4      	b.n	8003370 <prvIdleTask+0x8>
 8003386:	bf00      	nop
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	e00c      	b.n	80033b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4a12      	ldr	r2, [pc, #72]	; (80033ec <prvInitialiseTaskLists+0x60>)
 80033a4:	4413      	add	r3, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fd08 	bl	8001dbc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3301      	adds	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d9ef      	bls.n	8003398 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033b8:	480d      	ldr	r0, [pc, #52]	; (80033f0 <prvInitialiseTaskLists+0x64>)
 80033ba:	f7fe fcff 	bl	8001dbc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033be:	480d      	ldr	r0, [pc, #52]	; (80033f4 <prvInitialiseTaskLists+0x68>)
 80033c0:	f7fe fcfc 	bl	8001dbc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <prvInitialiseTaskLists+0x6c>)
 80033c6:	f7fe fcf9 	bl	8001dbc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80033ca:	480c      	ldr	r0, [pc, #48]	; (80033fc <prvInitialiseTaskLists+0x70>)
 80033cc:	f7fe fcf6 	bl	8001dbc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80033d0:	480b      	ldr	r0, [pc, #44]	; (8003400 <prvInitialiseTaskLists+0x74>)
 80033d2:	f7fe fcf3 	bl	8001dbc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <prvInitialiseTaskLists+0x78>)
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <prvInitialiseTaskLists+0x64>)
 80033da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <prvInitialiseTaskLists+0x7c>)
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <prvInitialiseTaskLists+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200000c8 	.word	0x200000c8
 80033f0:	2000012c 	.word	0x2000012c
 80033f4:	20000140 	.word	0x20000140
 80033f8:	2000015c 	.word	0x2000015c
 80033fc:	20000170 	.word	0x20000170
 8003400:	20000188 	.word	0x20000188
 8003404:	20000154 	.word	0x20000154
 8003408:	20000158 	.word	0x20000158

0800340c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003412:	e019      	b.n	8003448 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003414:	f000 fe26 	bl	8004064 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <prvCheckTasksWaitingTermination+0x50>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fd53 	bl	8001ed0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <prvCheckTasksWaitingTermination+0x54>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <prvCheckTasksWaitingTermination+0x54>)
 8003432:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <prvCheckTasksWaitingTermination+0x58>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3b01      	subs	r3, #1
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <prvCheckTasksWaitingTermination+0x58>)
 800343c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800343e:	f000 fe41 	bl	80040c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f810 	bl	8003468 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <prvCheckTasksWaitingTermination+0x58>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e1      	bne.n	8003414 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000170 	.word	0x20000170
 8003460:	2000019c 	.word	0x2000019c
 8003464:	20000184 	.word	0x20000184

08003468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f801 	bl	800447c <vPortFree>
                vPortFree( pxTCB );
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fffe 	bl	800447c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvResetNextTaskUnblockTime+0x30>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <prvResetNextTaskUnblockTime+0x34>)
 8003498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800349c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800349e:	e005      	b.n	80034ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <prvResetNextTaskUnblockTime+0x30>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <prvResetNextTaskUnblockTime+0x34>)
 80034aa:	6013      	str	r3, [r2, #0]
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000154 	.word	0x20000154
 80034bc:	200001bc 	.word	0x200001bc

080034c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <xTaskGetSchedulerState+0x34>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80034ce:	2301      	movs	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	e008      	b.n	80034e6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <xTaskGetSchedulerState+0x38>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034dc:	2302      	movs	r3, #2
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	e001      	b.n	80034e6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034e6:	687b      	ldr	r3, [r7, #4]
    }
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	200001a8 	.word	0x200001a8
 80034f8:	200001c4 	.word	0x200001c4

080034fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d068      	beq.n	80035e4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <xTaskPriorityDisinherit+0xf4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d00a      	beq.n	8003532 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60fb      	str	r3, [r7, #12]
    }
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	60bb      	str	r3, [r7, #8]
    }
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	429a      	cmp	r2, r3
 8003564:	d03e      	beq.n	80035e4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d13a      	bne.n	80035e4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3304      	adds	r3, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fcac 	bl	8001ed0 <uxListRemove>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	2201      	movs	r2, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43da      	mvns	r2, r3
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <xTaskPriorityDisinherit+0xf8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4013      	ands	r3, r2
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <xTaskPriorityDisinherit+0xf8>)
 8003592:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4619      	mov	r1, r3
 8003598:	204a      	movs	r0, #74	; 0x4a
 800359a:	f002 f987 	bl	80058ac <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f1c3 0205 	rsb	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <xTaskPriorityDisinherit+0xf8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <xTaskPriorityDisinherit+0xf8>)
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <xTaskPriorityDisinherit+0xfc>)
 80035d2:	441a      	add	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fe fc1b 	bl	8001e16 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80035e4:	697b      	ldr	r3, [r7, #20]
    }
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200000c4 	.word	0x200000c4
 80035f4:	200001a4 	.word	0x200001a4
 80035f8:	200000c8 	.word	0x200000c8

080035fc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003606:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fc5c 	bl	8001ed0 <uxListRemove>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	2201      	movs	r2, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4013      	ands	r3, r2
 8003632:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003634:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363c:	d110      	bne.n	8003660 <prvAddCurrentTaskToDelayedList+0x64>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	211b      	movs	r1, #27
 800364a:	4618      	mov	r0, r3
 800364c:	f002 fef2 	bl	8006434 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4820      	ldr	r0, [pc, #128]	; (80036dc <prvAddCurrentTaskToDelayedList+0xe0>)
 800365a:	f7fe fbdc 	bl	8001e16 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800365e:	e032      	b.n	80036c6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	429a      	cmp	r2, r3
 8003676:	d20f      	bcs.n	8003698 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2104      	movs	r1, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f002 fed8 	bl	8006434 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3304      	adds	r3, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4610      	mov	r0, r2
 8003692:	f7fe fbe4 	bl	8001e5e <vListInsert>
}
 8003696:	e016      	b.n	80036c6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2104      	movs	r1, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 fec8 	bl	8006434 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f7fe fbd4 	bl	8001e5e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d202      	bcs.n	80036c6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80036c0:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6013      	str	r3, [r2, #0]
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200001a0 	.word	0x200001a0
 80036d4:	200000c4 	.word	0x200000c4
 80036d8:	200001a4 	.word	0x200001a4
 80036dc:	20000188 	.word	0x20000188
 80036e0:	20000158 	.word	0x20000158
 80036e4:	20000154 	.word	0x20000154
 80036e8:	200001bc 	.word	0x200001bc

080036ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80036f6:	f000 fad5 	bl	8003ca4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <xTimerCreateTimerTask+0x54>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <xTimerCreateTimerTask+0x58>)
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	2302      	movs	r3, #2
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2300      	movs	r3, #0
 800370c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003710:	490d      	ldr	r1, [pc, #52]	; (8003748 <xTimerCreateTimerTask+0x5c>)
 8003712:	480e      	ldr	r0, [pc, #56]	; (800374c <xTimerCreateTimerTask+0x60>)
 8003714:	f7ff f932 	bl	800297c <xTaskCreate>
 8003718:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	603b      	str	r3, [r7, #0]
    }
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003736:	687b      	ldr	r3, [r7, #4]
    }
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	200001f8 	.word	0x200001f8
 8003744:	200001fc 	.word	0x200001fc
 8003748:	080068b4 	.word	0x080068b4
 800374c:	08003885 	.word	0x08003885

08003750 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	623b      	str	r3, [r7, #32]
    }
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <xTimerGenericCommand+0x98>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02a      	beq.n	80037dc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b05      	cmp	r3, #5
 8003796:	dc18      	bgt.n	80037ca <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003798:	f7ff fe92 	bl	80034c0 <xTaskGetSchedulerState>
 800379c:	4603      	mov	r3, r0
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d109      	bne.n	80037b6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <xTimerGenericCommand+0x98>)
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	f107 0114 	add.w	r1, r7, #20
 80037aa:	2300      	movs	r3, #0
 80037ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ae:	f7fe fc9d 	bl	80020ec <xQueueGenericSend>
 80037b2:	6278      	str	r0, [r7, #36]	; 0x24
 80037b4:	e012      	b.n	80037dc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <xTimerGenericCommand+0x98>)
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f107 0114 	add.w	r1, r7, #20
 80037be:	2300      	movs	r3, #0
 80037c0:	2200      	movs	r2, #0
 80037c2:	f7fe fc93 	bl	80020ec <xQueueGenericSend>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24
 80037c8:	e008      	b.n	80037dc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <xTimerGenericCommand+0x98>)
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	f107 0114 	add.w	r1, r7, #20
 80037d2:	2300      	movs	r3, #0
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	f7fe fd97 	bl	8002308 <xQueueGenericSendFromISR>
 80037da:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200001f8 	.word	0x200001f8

080037ec <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <prvProcessExpiredTimer+0x94>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3304      	adds	r3, #4
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fb63 	bl	8001ed0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d022      	beq.n	800385e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	18d1      	adds	r1, r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	6978      	ldr	r0, [r7, #20]
 8003826:	f000 f8d1 	bl	80039cc <prvInsertTimerInActiveList>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01f      	beq.n	8003870 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	2100      	movs	r1, #0
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff88 	bl	8003750 <xTimerGenericCommand>
 8003840:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d113      	bne.n	8003870 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	60fb      	str	r3, [r7, #12]
    }
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	b2da      	uxtb	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	4798      	blx	r3
    }
 8003878:	bf00      	nop
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200001f0 	.word	0x200001f0

08003884 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800388c:	f107 0308 	add.w	r3, r7, #8
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f857 	bl	8003944 <prvGetNextExpireTime>
 8003896:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4619      	mov	r1, r3
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f803 	bl	80038a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80038a2:	f000 f8d5 	bl	8003a50 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038a6:	e7f1      	b.n	800388c <prvTimerTask+0x8>

080038a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80038b2:	f7ff fa53 	bl	8002d5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038b6:	f107 0308 	add.w	r3, r7, #8
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f866 	bl	800398c <prvSampleTimeNow>
 80038c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d130      	bne.n	800392a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <prvProcessTimerOrBlockTask+0x3c>
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d806      	bhi.n	80038e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80038d6:	f7ff fa4f 	bl	8002d78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff85 	bl	80037ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80038e2:	e024      	b.n	800392e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <prvProcessTimerOrBlockTask+0x90>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <prvProcessTimerOrBlockTask+0x50>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <prvProcessTimerOrBlockTask+0x52>
 80038f8:	2300      	movs	r3, #0
 80038fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <prvProcessTimerOrBlockTask+0x94>)
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	f7ff f803 	bl	8002914 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800390e:	f7ff fa33 	bl	8002d78 <xTaskResumeAll>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <prvProcessTimerOrBlockTask+0x98>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
    }
 8003928:	e001      	b.n	800392e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800392a:	f7ff fa25 	bl	8002d78 <xTaskResumeAll>
    }
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200001f4 	.word	0x200001f4
 800393c:	200001f8 	.word	0x200001f8
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <prvGetNextExpireTime+0x44>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <prvGetNextExpireTime+0x16>
 8003956:	2201      	movs	r2, #1
 8003958:	e000      	b.n	800395c <prvGetNextExpireTime+0x18>
 800395a:	2200      	movs	r2, #0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <prvGetNextExpireTime+0x44>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e001      	b.n	8003978 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003978:	68fb      	ldr	r3, [r7, #12]
    }
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	200001f0 	.word	0x200001f0

0800398c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003994:	f7ff fa82 	bl	8002e9c <xTaskGetTickCount>
 8003998:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <prvSampleTimeNow+0x3c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d205      	bcs.n	80039b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80039a4:	f000 f91a 	bl	8003bdc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e002      	b.n	80039b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <prvSampleTimeNow+0x3c>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80039bc:	68fb      	ldr	r3, [r7, #12]
    }
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000200 	.word	0x20000200

080039cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d812      	bhi.n	8003a18 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e01b      	b.n	8003a3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <prvInsertTimerInActiveList+0x7c>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f7fe fa24 	bl	8001e5e <vListInsert>
 8003a16:	e012      	b.n	8003a3e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d206      	bcs.n	8003a2e <prvInsertTimerInActiveList+0x62>
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d302      	bcc.n	8003a2e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e007      	b.n	8003a3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <prvInsertTimerInActiveList+0x80>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7fe fa10 	bl	8001e5e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a3e:	697b      	ldr	r3, [r7, #20]
    }
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200001f4 	.word	0x200001f4
 8003a4c:	200001f0 	.word	0x200001f0

08003a50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	; 0x30
 8003a54:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a56:	e0ae      	b.n	8003bb6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f2c0 80aa 	blt.w	8003bb4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fa2d 	bl	8001ed0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff87 	bl	800398c <prvSampleTimeNow>
 8003a7e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	f200 8097 	bhi.w	8003bb6 <prvProcessReceivedCommands+0x166>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <prvProcessReceivedCommands+0x40>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ab9 	.word	0x08003ab9
 8003a9c:	08003b2d 	.word	0x08003b2d
 8003aa0:	08003b41 	.word	0x08003b41
 8003aa4:	08003b8b 	.word	0x08003b8b
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ab9 	.word	0x08003ab9
 8003ab0:	08003b2d 	.word	0x08003b2d
 8003ab4:	08003b41 	.word	0x08003b41
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	18d1      	adds	r1, r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a3a      	ldr	r2, [r7, #32]
 8003ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ad8:	f7ff ff78 	bl	80039cc <prvInsertTimerInActiveList>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d069      	beq.n	8003bb6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ae8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05e      	beq.n	8003bb6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	441a      	add	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2300      	movs	r3, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b0a:	f7ff fe21 	bl	8003750 <xTimerGenericCommand>
 8003b0e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d14f      	bne.n	8003bb6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	61bb      	str	r3, [r7, #24]
    }
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b3e:	e03a      	b.n	8003bb6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	617b      	str	r3, [r7, #20]
    }
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	18d1      	adds	r1, r2, r3
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b84:	f7ff ff22 	bl	80039cc <prvInsertTimerInActiveList>
                        break;
 8003b88:	e015      	b.n	8003bb6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b9a:	f000 fc6f 	bl	800447c <vPortFree>
 8003b9e:	e00a      	b.n	8003bb6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003bb2:	e000      	b.n	8003bb6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003bb4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <prvProcessReceivedCommands+0x188>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f107 0108 	add.w	r1, r7, #8
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fc5f 	bl	8002484 <xQueueReceive>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f47f af45 	bne.w	8003a58 <prvProcessReceivedCommands+0x8>
        }
    }
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200001f8 	.word	0x200001f8

08003bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003be2:	e048      	b.n	8003c76 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe f967 	bl	8001ed0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90e      	bls.n	8003c48 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c36:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7fe f90c 	bl	8001e5e <vListInsert>
 8003c46:	e016      	b.n	8003c76 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	2100      	movs	r1, #0
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fd7c 	bl	8003750 <xTimerGenericCommand>
 8003c58:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	603b      	str	r3, [r7, #0]
    }
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1b1      	bne.n	8003be4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <prvSwitchTimerLists+0xc4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c8c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <prvSwitchTimerLists+0xc4>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	6013      	str	r3, [r2, #0]
    }
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200001f0 	.word	0x200001f0
 8003ca0:	200001f4 	.word	0x200001f4

08003ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ca8:	f000 f9dc 	bl	8004064 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <prvCheckForValidListAndQueue+0x54>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11d      	bne.n	8003cf0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003cb4:	4811      	ldr	r0, [pc, #68]	; (8003cfc <prvCheckForValidListAndQueue+0x58>)
 8003cb6:	f7fe f881 	bl	8001dbc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003cba:	4811      	ldr	r0, [pc, #68]	; (8003d00 <prvCheckForValidListAndQueue+0x5c>)
 8003cbc:	f7fe f87e 	bl	8001dbc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <prvCheckForValidListAndQueue+0x58>)
 8003cc4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <prvCheckForValidListAndQueue+0x64>)
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <prvCheckForValidListAndQueue+0x5c>)
 8003cca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ccc:	2200      	movs	r2, #0
 8003cce:	210c      	movs	r1, #12
 8003cd0:	200a      	movs	r0, #10
 8003cd2:	f7fe f982 	bl	8001fda <xQueueGenericCreate>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <prvCheckForValidListAndQueue+0x54>)
 8003cda:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <prvCheckForValidListAndQueue+0x54>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <prvCheckForValidListAndQueue+0x54>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4908      	ldr	r1, [pc, #32]	; (8003d0c <prvCheckForValidListAndQueue+0x68>)
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fde0 	bl	80028b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cf0:	f000 f9e8 	bl	80040c4 <vPortExitCritical>
    }
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200001f8 	.word	0x200001f8
 8003cfc:	200001c8 	.word	0x200001c8
 8003d00:	200001dc 	.word	0x200001dc
 8003d04:	200001f0 	.word	0x200001f0
 8003d08:	200001f4 	.word	0x200001f4
 8003d0c:	080068bc 	.word	0x080068bc

08003d10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b04      	subs	r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d40:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <pxPortInitialiseStack+0x64>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3b14      	subs	r3, #20
 8003d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b04      	subs	r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f06f 0202 	mvn.w	r2, #2
 8003d5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3b20      	subs	r3, #32
 8003d64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d66:	68fb      	ldr	r3, [r7, #12]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	08003d79 	.word	0x08003d79

08003d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <prvTaskExitError+0x54>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8a:	d00a      	beq.n	8003da2 <prvTaskExitError+0x2a>
        __asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	60fb      	str	r3, [r7, #12]
    }
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <prvTaskExitError+0x28>
        __asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60bb      	str	r3, [r7, #8]
    }
 8003db4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003db6:	bf00      	nop
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0fc      	beq.n	8003db8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000010 	.word	0x20000010

08003dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <pxCurrentTCBConst2>)
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	6808      	ldr	r0, [r1, #0]
 8003dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dda:	f380 8809 	msr	PSP, r0
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8811 	msr	BASEPRI, r0
 8003dea:	4770      	bx	lr
 8003dec:	f3af 8000 	nop.w

08003df0 <pxCurrentTCBConst2>:
 8003df0:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop

08003df8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003df8:	4808      	ldr	r0, [pc, #32]	; (8003e1c <prvPortStartFirstTask+0x24>)
 8003dfa:	6800      	ldr	r0, [r0, #0]
 8003dfc:	6800      	ldr	r0, [r0, #0]
 8003dfe:	f380 8808 	msr	MSP, r0
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f380 8814 	msr	CONTROL, r0
 8003e0a:	b662      	cpsie	i
 8003e0c:	b661      	cpsie	f
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	df00      	svc	0
 8003e18:	bf00      	nop
 8003e1a:	0000      	.short	0x0000
 8003e1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop

08003e24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e2a:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <xPortStartScheduler+0x120>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a46      	ldr	r2, [pc, #280]	; (8003f48 <xPortStartScheduler+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10a      	bne.n	8003e4a <xPortStartScheduler+0x26>
        __asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	613b      	str	r3, [r7, #16]
    }
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e4a:	4b3e      	ldr	r3, [pc, #248]	; (8003f44 <xPortStartScheduler+0x120>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3f      	ldr	r2, [pc, #252]	; (8003f4c <xPortStartScheduler+0x128>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10a      	bne.n	8003e6a <xPortStartScheduler+0x46>
        __asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	60fb      	str	r3, [r7, #12]
    }
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e6a:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <xPortStartScheduler+0x12c>)
 8003e6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <xPortStartScheduler+0x130>)
 8003e90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <xPortStartScheduler+0x134>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e98:	e009      	b.n	8003eae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <xPortStartScheduler+0x134>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	4a2d      	ldr	r2, [pc, #180]	; (8003f58 <xPortStartScheduler+0x134>)
 8003ea2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d0ef      	beq.n	8003e9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003eba:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <xPortStartScheduler+0x134>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1c3 0307 	rsb	r3, r3, #7
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d00a      	beq.n	8003edc <xPortStartScheduler+0xb8>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60bb      	str	r3, [r7, #8]
    }
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <xPortStartScheduler+0x134>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <xPortStartScheduler+0x134>)
 8003ee4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <xPortStartScheduler+0x134>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <xPortStartScheduler+0x134>)
 8003ef0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003efa:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <xPortStartScheduler+0x138>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <xPortStartScheduler+0x138>)
 8003f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <xPortStartScheduler+0x138>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <xPortStartScheduler+0x138>)
 8003f0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f12:	f000 f963 	bl	80041dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <xPortStartScheduler+0x13c>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f1c:	f000 f982 	bl	8004224 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <xPortStartScheduler+0x140>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <xPortStartScheduler+0x140>)
 8003f26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f2c:	f7ff ff64 	bl	8003df8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f30:	f7ff f870 	bl	8003014 <vTaskSwitchContext>
    prvTaskExitError();
 8003f34:	f7ff ff20 	bl	8003d78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00
 8003f48:	410fc271 	.word	0x410fc271
 8003f4c:	410fc270 	.word	0x410fc270
 8003f50:	e000e400 	.word	0xe000e400
 8003f54:	20000204 	.word	0x20000204
 8003f58:	20000208 	.word	0x20000208
 8003f5c:	e000ed20 	.word	0xe000ed20
 8003f60:	20000010 	.word	0x20000010
 8003f64:	e000ef34 	.word	0xe000ef34

08003f68 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <vInitPrioGroupValue+0xe4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a37      	ldr	r2, [pc, #220]	; (8004050 <vInitPrioGroupValue+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10a      	bne.n	8003f8e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	613b      	str	r3, [r7, #16]
    }
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <vInitPrioGroupValue+0xe4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a30      	ldr	r2, [pc, #192]	; (8004054 <vInitPrioGroupValue+0xec>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10a      	bne.n	8003fae <vInitPrioGroupValue+0x46>
        __asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60fb      	str	r3, [r7, #12]
    }
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <vInitPrioGroupValue+0xf0>)
 8003fb0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <vInitPrioGroupValue+0xf4>)
 8003fd4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <vInitPrioGroupValue+0xf8>)
 8003fd8:	2207      	movs	r2, #7
 8003fda:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fdc:	e009      	b.n	8003ff2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <vInitPrioGroupValue+0xf8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <vInitPrioGroupValue+0xf8>)
 8003fe6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffa:	2b80      	cmp	r3, #128	; 0x80
 8003ffc:	d0ef      	beq.n	8003fde <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ffe:	4b18      	ldr	r3, [pc, #96]	; (8004060 <vInitPrioGroupValue+0xf8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1c3 0307 	rsb	r3, r3, #7
 8004006:	2b04      	cmp	r3, #4
 8004008:	d00a      	beq.n	8004020 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60bb      	str	r3, [r7, #8]
    }
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <vInitPrioGroupValue+0xf8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <vInitPrioGroupValue+0xf8>)
 8004028:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <vInitPrioGroupValue+0xf8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004032:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <vInitPrioGroupValue+0xf8>)
 8004034:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000ed00 	.word	0xe000ed00
 8004050:	410fc271 	.word	0x410fc271
 8004054:	410fc270 	.word	0x410fc270
 8004058:	e000e400 	.word	0xe000e400
 800405c:	20000204 	.word	0x20000204
 8004060:	20000208 	.word	0x20000208

08004064 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
        __asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	607b      	str	r3, [r7, #4]
    }
 800407c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <vPortEnterCritical+0x58>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <vPortEnterCritical+0x58>)
 8004086:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <vPortEnterCritical+0x58>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10f      	bne.n	80040b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <vPortEnterCritical+0x5c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	603b      	str	r3, [r7, #0]
    }
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <vPortEnterCritical+0x4a>
    }
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20000010 	.word	0x20000010
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <vPortExitCritical+0x50>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <vPortExitCritical+0x24>
        __asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	607b      	str	r3, [r7, #4]
    }
 80040e4:	bf00      	nop
 80040e6:	e7fe      	b.n	80040e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <vPortExitCritical+0x50>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <vPortExitCritical+0x50>)
 80040f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <vPortExitCritical+0x50>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <vPortExitCritical+0x42>
 80040fa:	2300      	movs	r3, #0
 80040fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f383 8811 	msr	BASEPRI, r3
    }
 8004104:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000010 	.word	0x20000010
	...

08004120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004120:	f3ef 8009 	mrs	r0, PSP
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <pxCurrentTCBConst>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	f01e 0f10 	tst.w	lr, #16
 8004130:	bf08      	it	eq
 8004132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	6010      	str	r0, [r2, #0]
 800413c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004144:	f380 8811 	msr	BASEPRI, r0
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f7fe ff60 	bl	8003014 <vTaskSwitchContext>
 8004154:	f04f 0000 	mov.w	r0, #0
 8004158:	f380 8811 	msr	BASEPRI, r0
 800415c:	bc09      	pop	{r0, r3}
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	6808      	ldr	r0, [r1, #0]
 8004162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004166:	f01e 0f10 	tst.w	lr, #16
 800416a:	bf08      	it	eq
 800416c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004170:	f380 8809 	msr	PSP, r0
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst>:
 8004180:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
        __asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
    }
 80041a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80041a2:	f001 ffeb 	bl	800617c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041a6:	f7fe fe9b 	bl	8002ee0 <xTaskIncrementTick>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80041b0:	f002 f842 	bl	8006238 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <SysTick_Handler+0x50>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e001      	b.n	80041c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80041be:	f002 f81f 	bl	8006200 <SEGGER_SYSVIEW_RecordExitISR>
 80041c2:	2300      	movs	r3, #0
 80041c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f383 8811 	msr	BASEPRI, r3
    }
 80041cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <vPortSetupTimerInterrupt+0x34>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <vPortSetupTimerInterrupt+0x38>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <vPortSetupTimerInterrupt+0x3c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <vPortSetupTimerInterrupt+0x40>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	4a09      	ldr	r2, [pc, #36]	; (8004220 <vPortSetupTimerInterrupt+0x44>)
 80041fa:	3b01      	subs	r3, #1
 80041fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <vPortSetupTimerInterrupt+0x34>)
 8004200:	2207      	movs	r2, #7
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000e010 	.word	0xe000e010
 8004214:	e000e018 	.word	0xe000e018
 8004218:	20000000 	.word	0x20000000
 800421c:	10624dd3 	.word	0x10624dd3
 8004220:	e000e014 	.word	0xe000e014

08004224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004234 <vPortEnableVFP+0x10>
 8004228:	6801      	ldr	r1, [r0, #0]
 800422a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800422e:	6001      	str	r1, [r0, #0]
 8004230:	4770      	bx	lr
 8004232:	0000      	.short	0x0000
 8004234:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop

0800423c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004242:	f3ef 8305 	mrs	r3, IPSR
 8004246:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	d914      	bls.n	8004278 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <vPortValidateInterruptPriority+0x70>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <vPortValidateInterruptPriority+0x74>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	7afa      	ldrb	r2, [r7, #11]
 800425e:	429a      	cmp	r2, r3
 8004260:	d20a      	bcs.n	8004278 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	607b      	str	r3, [r7, #4]
    }
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <vPortValidateInterruptPriority+0x78>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <vPortValidateInterruptPriority+0x7c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d90a      	bls.n	800429e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	603b      	str	r3, [r7, #0]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <vPortValidateInterruptPriority+0x60>
    }
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e3f0 	.word	0xe000e3f0
 80042b0:	20000204 	.word	0x20000204
 80042b4:	e000ed0c 	.word	0xe000ed0c
 80042b8:	20000208 	.word	0x20000208

080042bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	; 0x28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80042c8:	f7fe fd48 	bl	8002d5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042cc:	4b65      	ldr	r3, [pc, #404]	; (8004464 <pvPortMalloc+0x1a8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042d4:	f000 f934 	bl	8004540 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042d8:	4b63      	ldr	r3, [pc, #396]	; (8004468 <pvPortMalloc+0x1ac>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 80a7 	bne.w	8004434 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02d      	beq.n	8004348 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80042ec:	2208      	movs	r2, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d227      	bcs.n	8004348 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80042f8:	2208      	movs	r2, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	2b00      	cmp	r3, #0
 8004308:	d021      	beq.n	800434e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	3308      	adds	r3, #8
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d214      	bcs.n	8004342 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f023 0307 	bic.w	r3, r3, #7
 800431e:	3308      	adds	r3, #8
 8004320:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <pvPortMalloc+0x92>
        __asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	617b      	str	r3, [r7, #20]
    }
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004346:	e002      	b.n	800434e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e000      	b.n	8004350 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800434e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d06e      	beq.n	8004434 <pvPortMalloc+0x178>
 8004356:	4b45      	ldr	r3, [pc, #276]	; (800446c <pvPortMalloc+0x1b0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	d869      	bhi.n	8004434 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <pvPortMalloc+0x1b4>)
 8004362:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004364:	4b42      	ldr	r3, [pc, #264]	; (8004470 <pvPortMalloc+0x1b4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800436a:	e004      	b.n	8004376 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d903      	bls.n	8004388 <pvPortMalloc+0xcc>
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f1      	bne.n	800436c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <pvPortMalloc+0x1a8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	429a      	cmp	r2, r3
 8004390:	d050      	beq.n	8004434 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2208      	movs	r2, #8
 8004398:	4413      	add	r3, r2
 800439a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	2308      	movs	r3, #8
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d91f      	bls.n	80043f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <pvPortMalloc+0x120>
        __asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	613b      	str	r3, [r7, #16]
    }
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043ee:	69b8      	ldr	r0, [r7, #24]
 80043f0:	f000 f908 	bl	8004604 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <pvPortMalloc+0x1b0>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	4a1b      	ldr	r2, [pc, #108]	; (800446c <pvPortMalloc+0x1b0>)
 8004400:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004402:	4b1a      	ldr	r3, [pc, #104]	; (800446c <pvPortMalloc+0x1b0>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <pvPortMalloc+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d203      	bcs.n	8004416 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <pvPortMalloc+0x1b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a18      	ldr	r2, [pc, #96]	; (8004474 <pvPortMalloc+0x1b8>)
 8004414:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <pvPortMalloc+0x1ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	431a      	orrs	r2, r3
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <pvPortMalloc+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	4a11      	ldr	r2, [pc, #68]	; (8004478 <pvPortMalloc+0x1bc>)
 8004432:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004434:	f7fe fca0 	bl	8002d78 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <pvPortMalloc+0x19c>
        __asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
    }
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <pvPortMalloc+0x19a>
    return pvReturn;
 8004458:	69fb      	ldr	r3, [r7, #28]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3728      	adds	r7, #40	; 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20012e14 	.word	0x20012e14
 8004468:	20012e28 	.word	0x20012e28
 800446c:	20012e18 	.word	0x20012e18
 8004470:	20012e0c 	.word	0x20012e0c
 8004474:	20012e1c 	.word	0x20012e1c
 8004478:	20012e20 	.word	0x20012e20

0800447c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d04d      	beq.n	800452a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800448e:	2308      	movs	r3, #8
 8004490:	425b      	negs	r3, r3
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4413      	add	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <vPortFree+0xb8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <vPortFree+0x44>
        __asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	60fb      	str	r3, [r7, #12]
    }
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <vPortFree+0x62>
        __asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60bb      	str	r3, [r7, #8]
    }
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <vPortFree+0xb8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01e      	beq.n	800452a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11a      	bne.n	800452a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <vPortFree+0xb8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	401a      	ands	r2, r3
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004504:	f7fe fc2a 	bl	8002d5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <vPortFree+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4413      	add	r3, r2
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <vPortFree+0xbc>)
 8004514:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004516:	6938      	ldr	r0, [r7, #16]
 8004518:	f000 f874 	bl	8004604 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <vPortFree+0xc0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	4a06      	ldr	r2, [pc, #24]	; (800453c <vPortFree+0xc0>)
 8004524:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004526:	f7fe fc27 	bl	8002d78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20012e28 	.word	0x20012e28
 8004538:	20012e18 	.word	0x20012e18
 800453c:	20012e24 	.word	0x20012e24

08004540 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004546:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800454a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <prvHeapInit+0xac>)
 800454e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3307      	adds	r3, #7
 800455e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0307 	bic.w	r3, r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <prvHeapInit+0xac>)
 8004570:	4413      	add	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <prvHeapInit+0xb0>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800457e:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <prvHeapInit+0xb0>)
 8004580:	2200      	movs	r2, #0
 8004582:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800458c:	2208      	movs	r2, #8
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <prvHeapInit+0xb4>)
 80045a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <prvHeapInit+0xb4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <prvHeapInit+0xb4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	1ad2      	subs	r2, r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <prvHeapInit+0xb4>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <prvHeapInit+0xb8>)
 80045ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a09      	ldr	r2, [pc, #36]	; (80045fc <prvHeapInit+0xbc>)
 80045d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <prvHeapInit+0xc0>)
 80045da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	2000020c 	.word	0x2000020c
 80045f0:	20012e0c 	.word	0x20012e0c
 80045f4:	20012e14 	.word	0x20012e14
 80045f8:	20012e1c 	.word	0x20012e1c
 80045fc:	20012e18 	.word	0x20012e18
 8004600:	20012e28 	.word	0x20012e28

08004604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <prvInsertBlockIntoFreeList+0xac>)
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <prvInsertBlockIntoFreeList+0x14>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d8f7      	bhi.n	8004612 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	4413      	add	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d108      	bne.n	8004646 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	441a      	add	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	441a      	add	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d118      	bne.n	800468c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d00d      	beq.n	8004682 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e008      	b.n	8004694 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e003      	b.n	8004694 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d002      	beq.n	80046a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20012e0c 	.word	0x20012e0c
 80046b4:	20012e14 	.word	0x20012e14

080046b8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046bc:	4803      	ldr	r0, [pc, #12]	; (80046cc <_cbSendSystemDesc+0x14>)
 80046be:	f001 fd07 	bl	80060d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046c2:	4803      	ldr	r0, [pc, #12]	; (80046d0 <_cbSendSystemDesc+0x18>)
 80046c4:	f001 fd04 	bl	80060d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80046c8:	bf00      	nop
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	080068c4 	.word	0x080068c4
 80046d0:	08006908 	.word	0x08006908

080046d4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <SEGGER_SYSVIEW_Conf+0x24>)
 80046e2:	4a06      	ldr	r2, [pc, #24]	; (80046fc <SEGGER_SYSVIEW_Conf+0x28>)
 80046e4:	f001 f870 	bl	80057c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80046e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80046ec:	f001 f8b0 	bl	8005850 <SEGGER_SYSVIEW_SetRAMBase>
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000000 	.word	0x20000000
 80046f8:	080046b9 	.word	0x080046b9
 80046fc:	080069a8 	.word	0x080069a8

08004700 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004702:	b085      	sub	sp, #20
 8004704:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	e033      	b.n	8004774 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800470c:	491e      	ldr	r1, [pc, #120]	; (8004788 <_cbSendTaskList+0x88>)
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	491a      	ldr	r1, [pc, #104]	; (8004788 <_cbSendTaskList+0x88>)
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	3304      	adds	r3, #4
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	4c16      	ldr	r4, [pc, #88]	; (8004788 <_cbSendTaskList+0x88>)
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4423      	add	r3, r4
 800473c:	3308      	adds	r3, #8
 800473e:	681c      	ldr	r4, [r3, #0]
 8004740:	4d11      	ldr	r5, [pc, #68]	; (8004788 <_cbSendTaskList+0x88>)
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	442b      	add	r3, r5
 800474e:	330c      	adds	r3, #12
 8004750:	681d      	ldr	r5, [r3, #0]
 8004752:	4e0d      	ldr	r6, [pc, #52]	; (8004788 <_cbSendTaskList+0x88>)
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4433      	add	r3, r6
 8004760:	3310      	adds	r3, #16
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	462b      	mov	r3, r5
 8004768:	4622      	mov	r2, r4
 800476a:	f000 f8bd 	bl	80048e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3301      	adds	r3, #1
 8004772:	607b      	str	r3, [r7, #4]
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <_cbSendTaskList+0x8c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3c6      	bcc.n	800470c <_cbSendTaskList+0xc>
  }
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004788:	20012e2c 	.word	0x20012e2c
 800478c:	20012ecc 	.word	0x20012ecc

08004790 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004798:	f7fe fb90 	bl	8002ebc <xTaskGetTickCountFromISR>
 800479c:	4603      	mov	r3, r0
 800479e:	2200      	movs	r2, #0
 80047a0:	469a      	mov	sl, r3
 80047a2:	4693      	mov	fp, r2
 80047a4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80047a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	f04f 0a00 	mov.w	sl, #0
 80047b4:	f04f 0b00 	mov.w	fp, #0
 80047b8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047bc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047c0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047c4:	4652      	mov	r2, sl
 80047c6:	465b      	mov	r3, fp
 80047c8:	1a14      	subs	r4, r2, r0
 80047ca:	eb63 0501 	sbc.w	r5, r3, r1
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	00ab      	lsls	r3, r5, #2
 80047d8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80047dc:	00a2      	lsls	r2, r4, #2
 80047de:	4614      	mov	r4, r2
 80047e0:	461d      	mov	r5, r3
 80047e2:	eb14 0800 	adds.w	r8, r4, r0
 80047e6:	eb45 0901 	adc.w	r9, r5, r1
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fe:	4690      	mov	r8, r2
 8004800:	4699      	mov	r9, r3
 8004802:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004806:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004818 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004826:	2205      	movs	r2, #5
 8004828:	492b      	ldr	r1, [pc, #172]	; (80048d8 <SYSVIEW_AddTask+0xc0>)
 800482a:	68b8      	ldr	r0, [r7, #8]
 800482c:	f001 fffc 	bl	8006828 <memcmp>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04b      	beq.n	80048ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b07      	cmp	r3, #7
 800483c:	d903      	bls.n	8004846 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800483e:	4828      	ldr	r0, [pc, #160]	; (80048e0 <SYSVIEW_AddTask+0xc8>)
 8004840:	f001 ff44 	bl	80066cc <SEGGER_SYSVIEW_Warn>
    return;
 8004844:	e044      	b.n	80048d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004846:	4b25      	ldr	r3, [pc, #148]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4926      	ldr	r1, [pc, #152]	; (80048e4 <SYSVIEW_AddTask+0xcc>)
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4921      	ldr	r1, [pc, #132]	; (80048e4 <SYSVIEW_AddTask+0xcc>)
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	3304      	adds	r3, #4
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	491b      	ldr	r1, [pc, #108]	; (80048e4 <SYSVIEW_AddTask+0xcc>)
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3308      	adds	r3, #8
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4916      	ldr	r1, [pc, #88]	; (80048e4 <SYSVIEW_AddTask+0xcc>)
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	330c      	adds	r3, #12
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4910      	ldr	r1, [pc, #64]	; (80048e4 <SYSVIEW_AddTask+0xcc>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3310      	adds	r3, #16
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	4a08      	ldr	r2, [pc, #32]	; (80048dc <SYSVIEW_AddTask+0xc4>)
 80048ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f80e 	bl	80048e8 <SYSVIEW_SendTaskInfo>
 80048cc:	e000      	b.n	80048d0 <SYSVIEW_AddTask+0xb8>
    return;
 80048ce:	bf00      	nop

}
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	08006918 	.word	0x08006918
 80048dc:	20012ecc 	.word	0x20012ecc
 80048e0:	08006920 	.word	0x08006920
 80048e4:	20012e2c 	.word	0x20012e2c

080048e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	2214      	movs	r2, #20
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 ffb0 	bl	8006864 <memset>
  TaskInfo.TaskID     = TaskID;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004918:	f107 0314 	add.w	r3, r7, #20
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fadf 	bl	8005ee0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004922:	bf00      	nop
 8004924:	3728      	adds	r7, #40	; 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <__NVIC_EnableIRQ>:
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db0b      	blt.n	8004956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <__NVIC_EnableIRQ+0x38>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2001      	movs	r0, #1
 800494e:	fa00 f202 	lsl.w	r2, r0, r2
 8004952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db0a      	blt.n	8004992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	490c      	ldr	r1, [pc, #48]	; (80049b4 <__NVIC_SetPriority+0x4c>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	440b      	add	r3, r1
 800498c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004990:	e00a      	b.n	80049a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4908      	ldr	r1, [pc, #32]	; (80049b8 <__NVIC_SetPriority+0x50>)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3b04      	subs	r3, #4
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	761a      	strb	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000e100 	.word	0xe000e100
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80049c2:	f001 fedf 	bl	8006784 <SEGGER_SYSVIEW_IsStarted>
 80049c6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80049ce:	f001 f90b 	bl	8005be8 <SEGGER_SYSVIEW_Start>
  }
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <_cbOnUARTRx+0x3c>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d806      	bhi.n	80049fc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <_cbOnUARTRx+0x3c>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <_cbOnUARTRx+0x3c>)
 80049f8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80049fa:	e009      	b.n	8004a10 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80049fc:	f7ff ffde 	bl	80049bc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <_cbOnUARTRx+0x3c>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4618      	mov	r0, r3
 8004a06:	1dfb      	adds	r3, r7, #7
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f000 fb9a 	bl	8005144 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004a10:	bf00      	nop
}
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000014 	.word	0x20000014

08004a1c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <_cbOnUARTTx+0x5c>)
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d80f      	bhi.n	8004a4c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <_cbOnUARTTx+0x5c>)
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <_cbOnUARTTx+0x60>)
 8004a34:	5c9a      	ldrb	r2, [r3, r2]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <_cbOnUARTTx+0x5c>)
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <_cbOnUARTTx+0x5c>)
 8004a44:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004a4a:	e00f      	b.n	8004a6c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <_cbOnUARTTx+0x5c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fa19 	bl	8004e8c <SEGGER_RTT_ReadUpBufferNoLock>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da02      	bge.n	8004a6a <_cbOnUARTTx+0x4e>
    r = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e000      	b.n	8004a6c <_cbOnUARTTx+0x50>
  }
Done:
 8004a6a:	bf00      	nop
  return r;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000014 	.word	0x20000014
 8004a7c:	080069b0 	.word	0x080069b0

08004a80 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <SEGGER_UART_init+0x1c>)
 8004a8a:	4905      	ldr	r1, [pc, #20]	; (8004aa0 <SEGGER_UART_init+0x20>)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f863 	bl	8004b58 <HIF_UART_Init>
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	080049dd 	.word	0x080049dd
 8004aa0:	08004a1d 	.word	0x08004a1d

08004aa4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <USART2_IRQHandler+0x80>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d011      	beq.n	8004ade <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004aba:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <USART2_IRQHandler+0x84>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 030b 	and.w	r3, r3, #11
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d108      	bne.n	8004ade <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004acc:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <USART2_IRQHandler+0x88>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004ad4:	4b15      	ldr	r3, [pc, #84]	; (8004b2c <USART2_IRQHandler+0x88>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	79fa      	ldrb	r2, [r7, #7]
 8004ada:	4610      	mov	r0, r2
 8004adc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01a      	beq.n	8004b1e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <USART2_IRQHandler+0x8c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <USART2_IRQHandler+0x8c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	1dfa      	adds	r2, r7, #7
 8004af6:	4610      	mov	r0, r2
 8004af8:	4798      	blx	r3
 8004afa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <USART2_IRQHandler+0x90>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a0b      	ldr	r2, [pc, #44]	; (8004b34 <USART2_IRQHandler+0x90>)
 8004b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e006      	b.n	8004b1e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <USART2_IRQHandler+0x80>)
 8004b12:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004b14:	79fa      	ldrb	r2, [r7, #7]
 8004b16:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <USART2_IRQHandler+0x84>)
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e000      	b.n	8004b1e <USART2_IRQHandler+0x7a>
      return;
 8004b1c:	bf00      	nop
    }
  }
}
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40004400 	.word	0x40004400
 8004b28:	40004404 	.word	0x40004404
 8004b2c:	20012ed0 	.word	0x20012ed0
 8004b30:	20012ed4 	.word	0x20012ed4
 8004b34:	4000440c 	.word	0x4000440c

08004b38 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	4000440c 	.word	0x4000440c

08004b58 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b64:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <HIF_UART_Init+0xc8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <HIF_UART_Init+0xc8>)
 8004b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004b70:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <HIF_UART_Init+0xcc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <HIF_UART_Init+0xcc>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <HIF_UART_Init+0xd0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b88:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004b90:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004b92:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <HIF_UART_Init+0xd0>)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004b98:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HIF_UART_Init+0xd4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004bac:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004bae:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <HIF_UART_Init+0xd4>)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004bb4:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <HIF_UART_Init+0xd8>)
 8004bb6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004bba:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HIF_UART_Init+0xdc>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <HIF_UART_Init+0xe0>)
 8004bc4:	2280      	movs	r2, #128	; 0x80
 8004bc6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HIF_UART_Init+0xe4>)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d302      	bcc.n	8004bee <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004be8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004bec:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <HIF_UART_Init+0xe8>)
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004bfe:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <HIF_UART_Init+0xec>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004c04:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <HIF_UART_Init+0xf0>)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004c0a:	2106      	movs	r1, #6
 8004c0c:	2026      	movs	r0, #38	; 0x26
 8004c0e:	f7ff feab 	bl	8004968 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004c12:	2026      	movs	r0, #38	; 0x26
 8004c14:	f7ff fe8a 	bl	800492c <__NVIC_EnableIRQ>
}
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40023840 	.word	0x40023840
 8004c24:	40023830 	.word	0x40023830
 8004c28:	40020020 	.word	0x40020020
 8004c2c:	40020000 	.word	0x40020000
 8004c30:	4000440c 	.word	0x4000440c
 8004c34:	40004410 	.word	0x40004410
 8004c38:	40004414 	.word	0x40004414
 8004c3c:	0501bd00 	.word	0x0501bd00
 8004c40:	40004408 	.word	0x40004408
 8004c44:	20012ed0 	.word	0x20012ed0
 8004c48:	20012ed4 	.word	0x20012ed4

08004c4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <_DoInit+0x98>)
 8004c54:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a20      	ldr	r2, [pc, #128]	; (8004ce8 <_DoInit+0x9c>)
 8004c66:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a20      	ldr	r2, [pc, #128]	; (8004cec <_DoInit+0xa0>)
 8004c6c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c74:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <_DoInit+0x9c>)
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <_DoInit+0xa4>)
 8004c92:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2210      	movs	r2, #16
 8004c98:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3307      	adds	r3, #7
 8004cb0:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <_DoInit+0xa8>)
 8004cb2:	6810      	ldr	r0, [r2, #0]
 8004cb4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cb6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a0e      	ldr	r2, [pc, #56]	; (8004cf8 <_DoInit+0xac>)
 8004cbe:	6810      	ldr	r0, [r2, #0]
 8004cc0:	6018      	str	r0, [r3, #0]
 8004cc2:	8891      	ldrh	r1, [r2, #4]
 8004cc4:	7992      	ldrb	r2, [r2, #6]
 8004cc6:	8099      	strh	r1, [r3, #4]
 8004cc8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cd4:	f3bf 8f5f 	dmb	sy
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20012ed8 	.word	0x20012ed8
 8004ce8:	08006970 	.word	0x08006970
 8004cec:	20012f80 	.word	0x20012f80
 8004cf0:	20013380 	.word	0x20013380
 8004cf4:	0800697c 	.word	0x0800697c
 8004cf8:	08006980 	.word	0x08006980

08004cfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d905      	bls.n	8004d2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	e007      	b.n	8004d3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1acb      	subs	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bf28      	it	cs
 8004d4a:	4613      	movcs	r3, r2
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4293      	cmp	r3, r2
 8004d54:	bf28      	it	cs
 8004d56:	4613      	movcs	r3, r2
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f001 fd6d 	bl	8006848 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d6e:	6a3a      	ldr	r2, [r7, #32]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	4413      	add	r3, r2
 8004d74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	4413      	add	r3, r2
 8004d7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d101      	bne.n	8004d9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b2      	bne.n	8004d12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004dac:	6a3b      	ldr	r3, [r7, #32]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b088      	sub	sp, #32
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d911      	bls.n	8004dfe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	6938      	ldr	r0, [r7, #16]
 8004dea:	f001 fd2d 	bl	8006848 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004dfc:	e01f      	b.n	8004e3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	6938      	ldr	r0, [r7, #16]
 8004e12:	f001 fd19 	bl	8006848 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6938      	ldr	r0, [r7, #16]
 8004e30:	f001 fd0a 	bl	8006848 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	60da      	str	r2, [r3, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d808      	bhi.n	8004e74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e004      	b.n	8004e7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e7e:	697b      	ldr	r3, [r7, #20]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08c      	sub	sp, #48	; 0x30
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004e98:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004ea6:	f7ff fed1 	bl	8004c4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4a37      	ldr	r2, [pc, #220]	; (8004f94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d92b      	bls.n	8004f30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bf28      	it	cs
 8004eea:	4613      	movcs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004efe:	f001 fca3 	bl	8006848 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d101      	bne.n	8004f30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bf28      	it	cs
 8004f40:	4613      	movcs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d019      	beq.n	8004f7e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	4413      	add	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f5a:	f001 fc75 	bl	8006848 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3730      	adds	r7, #48	; 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20012ed8 	.word	0x20012ed8

08004f98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fa4:	4b3e      	ldr	r3, [pc, #248]	; (80050a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fb2:	f7ff fe4b 	bl	8004c4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	3360      	adds	r3, #96	; 0x60
 8004fc2:	4a37      	ldr	r2, [pc, #220]	; (80050a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d92b      	bls.n	800503c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bf28      	it	cs
 8004ff6:	4613      	movcs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	4413      	add	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800500a:	f001 fc1d 	bl	8006848 <memcpy>
    NumBytesRead += NumBytesRem;
 800500e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005034:	429a      	cmp	r2, r3
 8005036:	d101      	bne.n	800503c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4293      	cmp	r3, r2
 800504a:	bf28      	it	cs
 800504c:	4613      	movcs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	4413      	add	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	6939      	ldr	r1, [r7, #16]
 8005064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005066:	f001 fbef 	bl	8006848 <memcpy>
    NumBytesRead += NumBytesRem;
 800506a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005094:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005098:	4618      	mov	r0, r3
 800509a:	3730      	adds	r7, #48	; 0x30
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20012ed8 	.word	0x20012ed8

080050a4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	3360      	adds	r3, #96	; 0x60
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80050c2:	4413      	add	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d029      	beq.n	8005122 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d82e      	bhi.n	8005130 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d013      	beq.n	8005102 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80050da:	e029      	b.n	8005130 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050dc:	6978      	ldr	r0, [r7, #20]
 80050de:	f7ff feb2 	bl	8004e46 <_GetAvailWriteSpace>
 80050e2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d202      	bcs.n	80050f2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80050f0:	e021      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f7ff fe5b 	bl	8004db6 <_WriteNoCheck>
    break;
 8005100:	e019      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7ff fe9f 	bl	8004e46 <_GetAvailWriteSpace>
 8005108:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4293      	cmp	r3, r2
 8005110:	bf28      	it	cs
 8005112:	4613      	movcs	r3, r2
 8005114:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f7ff fe4b 	bl	8004db6 <_WriteNoCheck>
    break;
 8005120:	e009      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff fde8 	bl	8004cfc <_WriteBlocking>
 800512c:	61f8      	str	r0, [r7, #28]
    break;
 800512e:	e002      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
    break;
 8005134:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005136:	69fb      	ldr	r3, [r7, #28]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20012ed8 	.word	0x20012ed8

08005144 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800515e:	f7ff fd75 	bl	8004c4c <_DoInit>
  SEGGER_RTT_LOCK();
 8005162:	f3ef 8311 	mrs	r3, BASEPRI
 8005166:	f04f 0120 	mov.w	r1, #32
 800516a:	f381 8811 	msr	BASEPRI, r1
 800516e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff ff95 	bl	80050a4 <SEGGER_RTT_WriteDownBufferNoLock>
 800517a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005182:	697b      	ldr	r3, [r7, #20]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20012ed8 	.word	0x20012ed8

08005190 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800519e:	4b3d      	ldr	r3, [pc, #244]	; (8005294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80051ac:	f7ff fd4e 	bl	8004c4c <_DoInit>
  SEGGER_RTT_LOCK();
 80051b0:	f3ef 8311 	mrs	r3, BASEPRI
 80051b4:	f04f 0120 	mov.w	r1, #32
 80051b8:	f381 8811 	msr	BASEPRI, r1
 80051bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051be:	4b35      	ldr	r3, [pc, #212]	; (8005294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051c6:	6939      	ldr	r1, [r7, #16]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	3304      	adds	r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	dbeb      	blt.n	80051c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80051ee:	e000      	b.n	80051f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80051f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	da3f      	bge.n	800527c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051fc:	6939      	ldr	r1, [r7, #16]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	440b      	add	r3, r1
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005210:	6939      	ldr	r1, [r7, #16]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	3304      	adds	r3, #4
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005226:	6939      	ldr	r1, [r7, #16]
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	3320      	adds	r3, #32
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800523a:	6939      	ldr	r1, [r7, #16]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	440b      	add	r3, r1
 8005248:	3328      	adds	r3, #40	; 0x28
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800524e:	6939      	ldr	r1, [r7, #16]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	3324      	adds	r3, #36	; 0x24
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	332c      	adds	r3, #44	; 0x2c
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005276:	f3bf 8f5f 	dmb	sy
 800527a:	e002      	b.n	8005282 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800527c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005280:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005288:	69fb      	ldr	r3, [r7, #28]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20012ed8 	.word	0x20012ed8

08005298 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052a6:	4b33      	ldr	r3, [pc, #204]	; (8005374 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052b4:	f7ff fcca 	bl	8004c4c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052b8:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052ba:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	461a      	mov	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d24d      	bcs.n	8005364 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80052c8:	f3ef 8311 	mrs	r3, BASEPRI
 80052cc:	f04f 0120 	mov.w	r1, #32
 80052d0:	f381 8811 	msr	BASEPRI, r1
 80052d4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d031      	beq.n	8005340 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	3360      	adds	r3, #96	; 0x60
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80052f0:	6979      	ldr	r1, [r7, #20]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4613      	mov	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	3364      	adds	r3, #100	; 0x64
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005304:	6979      	ldr	r1, [r7, #20]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	440b      	add	r3, r1
 8005312:	3368      	adds	r3, #104	; 0x68
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005318:	6979      	ldr	r1, [r7, #20]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	3370      	adds	r3, #112	; 0x70
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4613      	mov	r3, r2
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4413      	add	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	440b      	add	r3, r1
 800533a:	336c      	adds	r3, #108	; 0x6c
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	3374      	adds	r3, #116	; 0x74
 8005350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005352:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005354:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e002      	b.n	800536a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005368:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800536a:	69fb      	ldr	r3, [r7, #28]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20012ed8 	.word	0x20012ed8

08005378 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005388:	e002      	b.n	8005390 <_EncodeStr+0x18>
    Len++;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3301      	adds	r3, #1
 800538e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f6      	bne.n	800538a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d901      	bls.n	80053a8 <_EncodeStr+0x30>
    Len = Limit;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2bfe      	cmp	r3, #254	; 0xfe
 80053ac:	d806      	bhi.n	80053bc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e011      	b.n	80053e0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	60fa      	str	r2, [r7, #12]
 80053c2:	22ff      	movs	r2, #255	; 0xff
 80053c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	60fa      	str	r2, [r7, #12]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	0a19      	lsrs	r1, r3, #8
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	60fa      	str	r2, [r7, #12]
 80053dc:	b2ca      	uxtb	r2, r1
 80053de:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053e4:	e00a      	b.n	80053fc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	1c53      	adds	r3, r2, #1
 80053ea:	60bb      	str	r3, [r7, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	60f9      	str	r1, [r7, #12]
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	701a      	strb	r2, [r3, #0]
    n++;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	3301      	adds	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d3f0      	bcc.n	80053e6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005404:	68fb      	ldr	r3, [r7, #12]
}
 8005406:	4618      	mov	r0, r3
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005432:	4b36      	ldr	r3, [pc, #216]	; (800550c <_HandleIncomingPacket+0xe0>)
 8005434:	7e1b      	ldrb	r3, [r3, #24]
 8005436:	4618      	mov	r0, r3
 8005438:	1cfb      	adds	r3, r7, #3
 800543a:	2201      	movs	r2, #1
 800543c:	4619      	mov	r1, r3
 800543e:	f7ff fdab 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
 8005442:	4603      	mov	r3, r0
 8005444:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	dd54      	ble.n	80054f6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	2b80      	cmp	r3, #128	; 0x80
 8005450:	d032      	beq.n	80054b8 <_HandleIncomingPacket+0x8c>
 8005452:	2b80      	cmp	r3, #128	; 0x80
 8005454:	dc42      	bgt.n	80054dc <_HandleIncomingPacket+0xb0>
 8005456:	2b07      	cmp	r3, #7
 8005458:	dc16      	bgt.n	8005488 <_HandleIncomingPacket+0x5c>
 800545a:	2b00      	cmp	r3, #0
 800545c:	dd3e      	ble.n	80054dc <_HandleIncomingPacket+0xb0>
 800545e:	3b01      	subs	r3, #1
 8005460:	2b06      	cmp	r3, #6
 8005462:	d83b      	bhi.n	80054dc <_HandleIncomingPacket+0xb0>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <_HandleIncomingPacket+0x40>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	0800548f 	.word	0x0800548f
 8005470:	08005495 	.word	0x08005495
 8005474:	0800549b 	.word	0x0800549b
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a7 	.word	0x080054a7
 8005480:	080054ad 	.word	0x080054ad
 8005484:	080054b3 	.word	0x080054b3
 8005488:	2b7f      	cmp	r3, #127	; 0x7f
 800548a:	d036      	beq.n	80054fa <_HandleIncomingPacket+0xce>
 800548c:	e026      	b.n	80054dc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800548e:	f000 fbab 	bl	8005be8 <SEGGER_SYSVIEW_Start>
      break;
 8005492:	e037      	b.n	8005504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005494:	f000 fc64 	bl	8005d60 <SEGGER_SYSVIEW_Stop>
      break;
 8005498:	e034      	b.n	8005504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800549a:	f000 fe3d 	bl	8006118 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800549e:	e031      	b.n	8005504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80054a0:	f000 fe02 	bl	80060a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80054a4:	e02e      	b.n	8005504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80054a6:	f000 fc81 	bl	8005dac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80054aa:	e02b      	b.n	8005504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80054ac:	f001 f8d0 	bl	8006650 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80054b0:	e028      	b.n	8005504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80054b2:	f001 f8af 	bl	8006614 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80054b6:	e025      	b.n	8005504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054b8:	4b14      	ldr	r3, [pc, #80]	; (800550c <_HandleIncomingPacket+0xe0>)
 80054ba:	7e1b      	ldrb	r3, [r3, #24]
 80054bc:	4618      	mov	r0, r3
 80054be:	1cfb      	adds	r3, r7, #3
 80054c0:	2201      	movs	r2, #1
 80054c2:	4619      	mov	r1, r3
 80054c4:	f7ff fd68 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
 80054c8:	4603      	mov	r3, r0
 80054ca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	dd15      	ble.n	80054fe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 f81d 	bl	8006514 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054da:	e010      	b.n	80054fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	b25b      	sxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da0e      	bge.n	8005502 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <_HandleIncomingPacket+0xe0>)
 80054e6:	7e1b      	ldrb	r3, [r3, #24]
 80054e8:	4618      	mov	r0, r3
 80054ea:	1cfb      	adds	r3, r7, #3
 80054ec:	2201      	movs	r2, #1
 80054ee:	4619      	mov	r1, r3
 80054f0:	f7ff fd52 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054f4:	e005      	b.n	8005502 <_HandleIncomingPacket+0xd6>
    }
  }
 80054f6:	bf00      	nop
 80054f8:	e004      	b.n	8005504 <_HandleIncomingPacket+0xd8>
      break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <_HandleIncomingPacket+0xd8>
      break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <_HandleIncomingPacket+0xd8>
      break;
 8005502:	bf00      	nop
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20014398 	.word	0x20014398

08005510 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b08c      	sub	sp, #48	; 0x30
 8005514:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005516:	2301      	movs	r3, #1
 8005518:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	3301      	adds	r3, #1
 800551e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
 800552a:	e00b      	b.n	8005544 <_TrySendOverflowPacket+0x34>
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	b2da      	uxtb	r2, r3
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	09db      	lsrs	r3, r3, #7
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	2b7f      	cmp	r3, #127	; 0x7f
 8005548:	d8f0      	bhi.n	800552c <_TrySendOverflowPacket+0x1c>
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <_TrySendOverflowPacket+0xe4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	623b      	str	r3, [r7, #32]
 8005572:	e00b      	b.n	800558c <_TrySendOverflowPacket+0x7c>
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	1c59      	adds	r1, r3, #1
 800557c:	6279      	str	r1, [r7, #36]	; 0x24
 800557e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	09db      	lsrs	r3, r3, #7
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	2b7f      	cmp	r3, #127	; 0x7f
 8005590:	d8f0      	bhi.n	8005574 <_TrySendOverflowPacket+0x64>
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	627a      	str	r2, [r7, #36]	; 0x24
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	4618      	mov	r0, r3
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	f7fa fe14 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055b8:	4603      	mov	r3, r0
 80055ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80055bc:	f7ff fabc 	bl	8004b38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e004      	b.n	80055e4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	3301      	adds	r3, #1
 80055e0:	4a03      	ldr	r2, [pc, #12]	; (80055f0 <_TrySendOverflowPacket+0xe0>)
 80055e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055e4:	693b      	ldr	r3, [r7, #16]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3730      	adds	r7, #48	; 0x30
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20014398 	.word	0x20014398
 80055f4:	e0001004 	.word	0xe0001004

080055f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005604:	4b6d      	ldr	r3, [pc, #436]	; (80057bc <_SendPacket+0x1c4>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d010      	beq.n	800562e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800560c:	4b6b      	ldr	r3, [pc, #428]	; (80057bc <_SendPacket+0x1c4>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80a5 	beq.w	8005760 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005616:	4b69      	ldr	r3, [pc, #420]	; (80057bc <_SendPacket+0x1c4>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d109      	bne.n	8005632 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800561e:	f7ff ff77 	bl	8005510 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005622:	4b66      	ldr	r3, [pc, #408]	; (80057bc <_SendPacket+0x1c4>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	f040 809c 	bne.w	8005764 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800562c:	e001      	b.n	8005632 <_SendPacket+0x3a>
    goto Send;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <_SendPacket+0x3c>
Send:
 8005632:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b1f      	cmp	r3, #31
 8005638:	d809      	bhi.n	800564e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800563a:	4b60      	ldr	r3, [pc, #384]	; (80057bc <_SendPacket+0x1c4>)
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 808d 	bne.w	8005768 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b17      	cmp	r3, #23
 8005652:	d807      	bhi.n	8005664 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e03d      	b.n	80056e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b7f      	cmp	r3, #127	; 0x7f
 8005670:	d912      	bls.n	8005698 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	09da      	lsrs	r2, r3, #7
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3b01      	subs	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	3a01      	subs	r2, #1
 800568a:	60fa      	str	r2, [r7, #12]
 800568c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005690:	b2da      	uxtb	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e006      	b.n	80056a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b01      	subs	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b7f      	cmp	r3, #127	; 0x7f
 80056aa:	d912      	bls.n	80056d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	09da      	lsrs	r2, r3, #7
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	3a01      	subs	r2, #1
 80056c4:	60fa      	str	r2, [r7, #12]
 80056c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e006      	b.n	80056e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056e0:	4b37      	ldr	r3, [pc, #220]	; (80057c0 <_SendPacket+0x1c8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056e6:	4b35      	ldr	r3, [pc, #212]	; (80057bc <_SendPacket+0x1c4>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	e00b      	b.n	8005712 <_SendPacket+0x11a>
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	6279      	str	r1, [r7, #36]	; 0x24
 8005704:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	09db      	lsrs	r3, r3, #7
 8005710:	623b      	str	r3, [r7, #32]
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	2b7f      	cmp	r3, #127	; 0x7f
 8005716:	d8f0      	bhi.n	80056fa <_SendPacket+0x102>
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	627a      	str	r2, [r7, #36]	; 0x24
 800571e:	6a3a      	ldr	r2, [r7, #32]
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005728:	4b24      	ldr	r3, [pc, #144]	; (80057bc <_SendPacket+0x1c4>)
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	4618      	mov	r0, r3
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	461a      	mov	r2, r3
 8005736:	68f9      	ldr	r1, [r7, #12]
 8005738:	f7fa fd52 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800573c:	4603      	mov	r3, r0
 800573e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005740:	f7ff f9fa 	bl	8004b38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <_SendPacket+0x1c4>)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	60d3      	str	r3, [r2, #12]
 8005750:	e00b      	b.n	800576a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005752:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <_SendPacket+0x1c4>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	b2da      	uxtb	r2, r3
 800575a:	4b18      	ldr	r3, [pc, #96]	; (80057bc <_SendPacket+0x1c4>)
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e004      	b.n	800576a <_SendPacket+0x172>
    goto SendDone;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <_SendPacket+0x172>
      goto SendDone;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <_SendPacket+0x172>
      goto SendDone;
 8005768:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <_SendPacket+0x1c4>)
 800576c:	7e1b      	ldrb	r3, [r3, #24]
 800576e:	4619      	mov	r1, r3
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <_SendPacket+0x1cc>)
 8005772:	460b      	mov	r3, r1
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	440b      	add	r3, r1
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	4413      	add	r3, r2
 800577c:	336c      	adds	r3, #108	; 0x6c
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <_SendPacket+0x1c4>)
 8005782:	7e1b      	ldrb	r3, [r3, #24]
 8005784:	4618      	mov	r0, r3
 8005786:	490f      	ldr	r1, [pc, #60]	; (80057c4 <_SendPacket+0x1cc>)
 8005788:	4603      	mov	r3, r0
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	4403      	add	r3, r0
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	440b      	add	r3, r1
 8005792:	3370      	adds	r3, #112	; 0x70
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d00b      	beq.n	80057b2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <_SendPacket+0x1c4>)
 800579c:	789b      	ldrb	r3, [r3, #2]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <_SendPacket+0x1c4>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057a8:	f7ff fe40 	bl	800542c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <_SendPacket+0x1c4>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057b2:	bf00      	nop
 80057b4:	3728      	adds	r7, #40	; 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20014398 	.word	0x20014398
 80057c0:	e0001004 	.word	0xe0001004
 80057c4:	20012ed8 	.word	0x20012ed8

080057c8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057d6:	2300      	movs	r3, #0
 80057d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057dc:	4917      	ldr	r1, [pc, #92]	; (800583c <SEGGER_SYSVIEW_Init+0x74>)
 80057de:	4818      	ldr	r0, [pc, #96]	; (8005840 <SEGGER_SYSVIEW_Init+0x78>)
 80057e0:	f7ff fcd6 	bl	8005190 <SEGGER_RTT_AllocUpBuffer>
 80057e4:	4603      	mov	r3, r0
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	4b16      	ldr	r3, [pc, #88]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80057ec:	4b15      	ldr	r3, [pc, #84]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ee:	785a      	ldrb	r2, [r3, #1]
 80057f0:	4b14      	ldr	r3, [pc, #80]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057f2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057f6:	7e1b      	ldrb	r3, [r3, #24]
 80057f8:	4618      	mov	r0, r3
 80057fa:	2300      	movs	r3, #0
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2308      	movs	r3, #8
 8005800:	4a11      	ldr	r2, [pc, #68]	; (8005848 <SEGGER_SYSVIEW_Init+0x80>)
 8005802:	490f      	ldr	r1, [pc, #60]	; (8005840 <SEGGER_SYSVIEW_Init+0x78>)
 8005804:	f7ff fd48 	bl	8005298 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 800580a:	2200      	movs	r2, #0
 800580c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <SEGGER_SYSVIEW_Init+0x84>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005814:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005816:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800581c:	4a09      	ldr	r2, [pc, #36]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005822:	4a08      	ldr	r2, [pc, #32]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005828:	4a06      	ldr	r2, [pc, #24]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20013390 	.word	0x20013390
 8005840:	08006988 	.word	0x08006988
 8005844:	20014398 	.word	0x20014398
 8005848:	20014390 	.word	0x20014390
 800584c:	e0001004 	.word	0xe0001004

08005850 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005858:	4a04      	ldr	r2, [pc, #16]	; (800586c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6113      	str	r3, [r2, #16]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20014398 	.word	0x20014398

08005870 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005878:	f3ef 8311 	mrs	r3, BASEPRI
 800587c:	f04f 0120 	mov.w	r1, #32
 8005880:	f381 8811 	msr	BASEPRI, r1
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	4808      	ldr	r0, [pc, #32]	; (80058a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005888:	f7ff fdc3 	bl	8005412 <_PreparePacket>
 800588c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68b8      	ldr	r0, [r7, #8]
 8005894:	f7ff feb0 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f383 8811 	msr	BASEPRI, r3
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200143c8 	.word	0x200143c8

080058ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058b6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ba:	f04f 0120 	mov.w	r1, #32
 80058be:	f381 8811 	msr	BASEPRI, r1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	4816      	ldr	r0, [pc, #88]	; (8005920 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058c6:	f7ff fda4 	bl	8005412 <_PreparePacket>
 80058ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e00b      	b.n	80058f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	61f9      	str	r1, [r7, #28]
 80058e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	09db      	lsrs	r3, r3, #7
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b7f      	cmp	r3, #127	; 0x7f
 80058f6:	d8f0      	bhi.n	80058da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	61fa      	str	r2, [r7, #28]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	6938      	ldr	r0, [r7, #16]
 800590e:	f7ff fe73 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f383 8811 	msr	BASEPRI, r3
}
 8005918:	bf00      	nop
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	200143c8 	.word	0x200143c8

08005924 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005930:	f3ef 8311 	mrs	r3, BASEPRI
 8005934:	f04f 0120 	mov.w	r1, #32
 8005938:	f381 8811 	msr	BASEPRI, r1
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	4825      	ldr	r0, [pc, #148]	; (80059d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005940:	f7ff fd67 	bl	8005412 <_PreparePacket>
 8005944:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	62bb      	str	r3, [r7, #40]	; 0x28
 8005952:	e00b      	b.n	800596c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	b2da      	uxtb	r2, r3
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800595e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	09db      	lsrs	r3, r3, #7
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	2b7f      	cmp	r3, #127	; 0x7f
 8005970:	d8f0      	bhi.n	8005954 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	623b      	str	r3, [r7, #32]
 800598a:	e00b      	b.n	80059a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	b2da      	uxtb	r2, r3
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	1c59      	adds	r1, r3, #1
 8005994:	6279      	str	r1, [r7, #36]	; 0x24
 8005996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	09db      	lsrs	r3, r3, #7
 80059a2:	623b      	str	r3, [r7, #32]
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	2b7f      	cmp	r3, #127	; 0x7f
 80059a8:	d8f0      	bhi.n	800598c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	627a      	str	r2, [r7, #36]	; 0x24
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	6979      	ldr	r1, [r7, #20]
 80059be:	69b8      	ldr	r0, [r7, #24]
 80059c0:	f7ff fe1a 	bl	80055f8 <_SendPacket>
  RECORD_END();
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f383 8811 	msr	BASEPRI, r3
}
 80059ca:	bf00      	nop
 80059cc:	3730      	adds	r7, #48	; 0x30
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	200143c8 	.word	0x200143c8

080059d8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08e      	sub	sp, #56	; 0x38
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80059e6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ea:	f04f 0120 	mov.w	r1, #32
 80059ee:	f381 8811 	msr	BASEPRI, r1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	4832      	ldr	r0, [pc, #200]	; (8005ac0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80059f6:	f7ff fd0c 	bl	8005412 <_PreparePacket>
 80059fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	637b      	str	r3, [r7, #52]	; 0x34
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30
 8005a08:	e00b      	b.n	8005a22 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	1c59      	adds	r1, r3, #1
 8005a12:	6379      	str	r1, [r7, #52]	; 0x34
 8005a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	09db      	lsrs	r3, r3, #7
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2b7f      	cmp	r3, #127	; 0x7f
 8005a26:	d8f0      	bhi.n	8005a0a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	637a      	str	r2, [r7, #52]	; 0x34
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a40:	e00b      	b.n	8005a5a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	1c59      	adds	r1, r3, #1
 8005a4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	09db      	lsrs	r3, r3, #7
 8005a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5e:	d8f0      	bhi.n	8005a42 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	e00b      	b.n	8005a92 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	1c59      	adds	r1, r3, #1
 8005a82:	6279      	str	r1, [r7, #36]	; 0x24
 8005a84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	09db      	lsrs	r3, r3, #7
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b7f      	cmp	r3, #127	; 0x7f
 8005a96:	d8f0      	bhi.n	8005a7a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a9e:	6a3a      	ldr	r2, [r7, #32]
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	69b8      	ldr	r0, [r7, #24]
 8005aae:	f7ff fda3 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f383 8811 	msr	BASEPRI, r3
}
 8005ab8:	bf00      	nop
 8005aba:	3738      	adds	r7, #56	; 0x38
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	200143c8 	.word	0x200143c8

08005ac4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b090      	sub	sp, #64	; 0x40
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad6:	f04f 0120 	mov.w	r1, #32
 8005ada:	f381 8811 	msr	BASEPRI, r1
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	4840      	ldr	r0, [pc, #256]	; (8005be4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ae2:	f7ff fc96 	bl	8005412 <_PreparePacket>
 8005ae6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af4:	e00b      	b.n	8005b0e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afc:	1c59      	adds	r1, r3, #1
 8005afe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	09db      	lsrs	r3, r3, #7
 8005b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	2b7f      	cmp	r3, #127	; 0x7f
 8005b12:	d8f0      	bhi.n	8005af6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2c:	e00b      	b.n	8005b46 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	6379      	str	r1, [r7, #52]	; 0x34
 8005b38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	09db      	lsrs	r3, r3, #7
 8005b44:	633b      	str	r3, [r7, #48]	; 0x30
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4a:	d8f0      	bhi.n	8005b2e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	637a      	str	r2, [r7, #52]	; 0x34
 8005b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b64:	e00b      	b.n	8005b7e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	09db      	lsrs	r3, r3, #7
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	2b7f      	cmp	r3, #127	; 0x7f
 8005b82:	d8f0      	bhi.n	8005b66 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9a:	623b      	str	r3, [r7, #32]
 8005b9c:	e00b      	b.n	8005bb6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	1c59      	adds	r1, r3, #1
 8005ba6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	09db      	lsrs	r3, r3, #7
 8005bb4:	623b      	str	r3, [r7, #32]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bba:	d8f0      	bhi.n	8005b9e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	69b8      	ldr	r0, [r7, #24]
 8005bd2:	f7ff fd11 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f383 8811 	msr	BASEPRI, r3
}
 8005bdc:	bf00      	nop
 8005bde:	3740      	adds	r7, #64	; 0x40
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	200143c8 	.word	0x200143c8

08005be8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08c      	sub	sp, #48	; 0x30
 8005bec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005bee:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8005bf8:	f04f 0120 	mov.w	r1, #32
 8005bfc:	f381 8811 	msr	BASEPRI, r1
 8005c00:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c02:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	220a      	movs	r2, #10
 8005c08:	4953      	ldr	r1, [pc, #332]	; (8005d58 <SEGGER_SYSVIEW_Start+0x170>)
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fa fae8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005c16:	f7fe ff8f 	bl	8004b38 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c1a:	200a      	movs	r0, #10
 8005c1c:	f7ff fe28 	bl	8005870 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c20:	f3ef 8311 	mrs	r3, BASEPRI
 8005c24:	f04f 0120 	mov.w	r1, #32
 8005c28:	f381 8811 	msr	BASEPRI, r1
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	484b      	ldr	r0, [pc, #300]	; (8005d5c <SEGGER_SYSVIEW_Start+0x174>)
 8005c30:	f7ff fbef 	bl	8005412 <_PreparePacket>
 8005c34:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3e:	4b45      	ldr	r3, [pc, #276]	; (8005d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c44:	e00b      	b.n	8005c5e <SEGGER_SYSVIEW_Start+0x76>
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	1c59      	adds	r1, r3, #1
 8005c4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	09db      	lsrs	r3, r3, #7
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	2b7f      	cmp	r3, #127	; 0x7f
 8005c62:	d8f0      	bhi.n	8005c46 <SEGGER_SYSVIEW_Start+0x5e>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
 8005c78:	4b36      	ldr	r3, [pc, #216]	; (8005d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	e00b      	b.n	8005c98 <SEGGER_SYSVIEW_Start+0xb0>
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	6279      	str	r1, [r7, #36]	; 0x24
 8005c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	623b      	str	r3, [r7, #32]
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c9c:	d8f0      	bhi.n	8005c80 <SEGGER_SYSVIEW_Start+0x98>
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca4:	6a3a      	ldr	r2, [r7, #32]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e00b      	b.n	8005cd2 <SEGGER_SYSVIEW_Start+0xea>
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	61f9      	str	r1, [r7, #28]
 8005cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	09db      	lsrs	r3, r3, #7
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd6:	d8f0      	bhi.n	8005cba <SEGGER_SYSVIEW_Start+0xd2>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e00b      	b.n	8005d0a <SEGGER_SYSVIEW_Start+0x122>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1c59      	adds	r1, r3, #1
 8005cfa:	6179      	str	r1, [r7, #20]
 8005cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0e:	d8f0      	bhi.n	8005cf2 <SEGGER_SYSVIEW_Start+0x10a>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	617a      	str	r2, [r7, #20]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d20:	2218      	movs	r2, #24
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fc67 	bl	80055f8 <_SendPacket>
      RECORD_END();
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d3e:	f000 f9eb 	bl	8006118 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d42:	f000 f9b1 	bl	80060a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d46:	f000 fc83 	bl	8006650 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d4a:	bf00      	nop
 8005d4c:	3730      	adds	r7, #48	; 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20014398 	.word	0x20014398
 8005d58:	080069b4 	.word	0x080069b4
 8005d5c:	200143c8 	.word	0x200143c8

08005d60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d66:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6a:	f04f 0120 	mov.w	r1, #32
 8005d6e:	f381 8811 	msr	BASEPRI, r1
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d76:	f7ff fb4c 	bl	8005412 <_PreparePacket>
 8005d7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d84:	220b      	movs	r2, #11
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6838      	ldr	r0, [r7, #0]
 8005d8a:	f7ff fc35 	bl	80055f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f383 8811 	msr	BASEPRI, r3
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200143c8 	.word	0x200143c8
 8005da8:	20014398 	.word	0x20014398

08005dac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005db2:	f3ef 8311 	mrs	r3, BASEPRI
 8005db6:	f04f 0120 	mov.w	r1, #32
 8005dba:	f381 8811 	msr	BASEPRI, r1
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	4845      	ldr	r0, [pc, #276]	; (8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dc2:	f7ff fb26 	bl	8005412 <_PreparePacket>
 8005dc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd0:	4b42      	ldr	r3, [pc, #264]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd6:	e00b      	b.n	8005df0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	1c59      	adds	r1, r3, #1
 8005de0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	09db      	lsrs	r3, r3, #7
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	2b7f      	cmp	r3, #127	; 0x7f
 8005df4:	d8f0      	bhi.n	8005dd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	4b34      	ldr	r3, [pc, #208]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	e00b      	b.n	8005e2a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1c59      	adds	r1, r3, #1
 8005e1a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	09db      	lsrs	r3, r3, #7
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e2e:	d8f0      	bhi.n	8005e12 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	627a      	str	r2, [r7, #36]	; 0x24
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e00b      	b.n	8005e64 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	1c59      	adds	r1, r3, #1
 8005e54:	61f9      	str	r1, [r7, #28]
 8005e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	09db      	lsrs	r3, r3, #7
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b7f      	cmp	r3, #127	; 0x7f
 8005e68:	d8f0      	bhi.n	8005e4c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	61fa      	str	r2, [r7, #28]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e00b      	b.n	8005e9c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1c59      	adds	r1, r3, #1
 8005e8c:	6179      	str	r1, [r7, #20]
 8005e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	09db      	lsrs	r3, r3, #7
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea0:	d8f0      	bhi.n	8005e84 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	617a      	str	r2, [r7, #20]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005eb2:	2218      	movs	r2, #24
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	68b8      	ldr	r0, [r7, #8]
 8005eb8:	f7ff fb9e 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005eca:	4b04      	ldr	r3, [pc, #16]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	4798      	blx	r3
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3730      	adds	r7, #48	; 0x30
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200143c8 	.word	0x200143c8
 8005edc:	20014398 	.word	0x20014398

08005ee0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b092      	sub	sp, #72	; 0x48
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8005eec:	f04f 0120 	mov.w	r1, #32
 8005ef0:	f381 8811 	msr	BASEPRI, r1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	486a      	ldr	r0, [pc, #424]	; (80060a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ef8:	f7ff fa8b 	bl	8005412 <_PreparePacket>
 8005efc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b66      	ldr	r3, [pc, #408]	; (80060a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	643b      	str	r3, [r7, #64]	; 0x40
 8005f12:	e00b      	b.n	8005f2c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	6479      	str	r1, [r7, #68]	; 0x44
 8005f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	09db      	lsrs	r3, r3, #7
 8005f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f30:	d8f0      	bhi.n	8005f14 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	647a      	str	r2, [r7, #68]	; 0x44
 8005f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f4c:	e00b      	b.n	8005f66 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f54:	1c59      	adds	r1, r3, #1
 8005f56:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	09db      	lsrs	r3, r3, #7
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6a:	d8f0      	bhi.n	8005f4e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff f9f7 	bl	8005378 <_EncodeStr>
 8005f8a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f8c:	2209      	movs	r2, #9
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6938      	ldr	r0, [r7, #16]
 8005f92:	f7ff fb31 	bl	80055f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005faa:	e00b      	b.n	8005fc4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	6379      	str	r1, [r7, #52]	; 0x34
 8005fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	09db      	lsrs	r3, r3, #7
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc8:	d8f0      	bhi.n	8005fac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	637a      	str	r2, [r7, #52]	; 0x34
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe4:	e00b      	b.n	8005ffe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	1c59      	adds	r1, r3, #1
 8005fee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	09db      	lsrs	r3, r3, #7
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	2b7f      	cmp	r3, #127	; 0x7f
 8006002:	d8f0      	bhi.n	8005fe6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	e00b      	b.n	8006038 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	6279      	str	r1, [r7, #36]	; 0x24
 800602a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	09db      	lsrs	r3, r3, #7
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b7f      	cmp	r3, #127	; 0x7f
 800603c:	d8f0      	bhi.n	8006020 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	627a      	str	r2, [r7, #36]	; 0x24
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e00b      	b.n	8006070 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	b2da      	uxtb	r2, r3
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	61f9      	str	r1, [r7, #28]
 8006062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	09db      	lsrs	r3, r3, #7
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b7f      	cmp	r3, #127	; 0x7f
 8006074:	d8f0      	bhi.n	8006058 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	61fa      	str	r2, [r7, #28]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006086:	2215      	movs	r2, #21
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f7ff fab4 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f383 8811 	msr	BASEPRI, r3
}
 8006096:	bf00      	nop
 8006098:	3748      	adds	r7, #72	; 0x48
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200143c8 	.word	0x200143c8
 80060a4:	20014398 	.word	0x20014398

080060a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060be:	4b03      	ldr	r3, [pc, #12]	; (80060cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4798      	blx	r3
  }
}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20014398 	.word	0x20014398

080060d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060d8:	f3ef 8311 	mrs	r3, BASEPRI
 80060dc:	f04f 0120 	mov.w	r1, #32
 80060e0:	f381 8811 	msr	BASEPRI, r1
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	480b      	ldr	r0, [pc, #44]	; (8006114 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060e8:	f7ff f993 	bl	8005412 <_PreparePacket>
 80060ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	6938      	ldr	r0, [r7, #16]
 80060f4:	f7ff f940 	bl	8005378 <_EncodeStr>
 80060f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80060fa:	220e      	movs	r2, #14
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f7ff fa7a 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f383 8811 	msr	BASEPRI, r3
}
 800610a:	bf00      	nop
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	200143c8 	.word	0x200143c8

08006118 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01a      	beq.n	800615c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006126:	4b13      	ldr	r3, [pc, #76]	; (8006174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4798      	blx	r3
 8006138:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800613c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800613e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	000a      	movs	r2, r1
 800614c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800614e:	4613      	mov	r3, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4621      	mov	r1, r4
 8006154:	200d      	movs	r0, #13
 8006156:	f7ff fbe5 	bl	8005924 <SEGGER_SYSVIEW_RecordU32x2>
 800615a:	e006      	b.n	800616a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4619      	mov	r1, r3
 8006162:	200c      	movs	r0, #12
 8006164:	f7ff fba2 	bl	80058ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bd90      	pop	{r4, r7, pc}
 8006172:	bf00      	nop
 8006174:	20014398 	.word	0x20014398
 8006178:	e0001004 	.word	0xe0001004

0800617c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006182:	f3ef 8311 	mrs	r3, BASEPRI
 8006186:	f04f 0120 	mov.w	r1, #32
 800618a:	f381 8811 	msr	BASEPRI, r1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	4819      	ldr	r0, [pc, #100]	; (80061f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006192:	f7ff f93e 	bl	8005412 <_PreparePacket>
 8006196:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800619c:	4b17      	ldr	r3, [pc, #92]	; (80061fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	e00b      	b.n	80061c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1c59      	adds	r1, r3, #1
 80061b8:	6179      	str	r1, [r7, #20]
 80061ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	09db      	lsrs	r3, r3, #7
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b7f      	cmp	r3, #127	; 0x7f
 80061cc:	d8f0      	bhi.n	80061b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	617a      	str	r2, [r7, #20]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061de:	2202      	movs	r2, #2
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	68b8      	ldr	r0, [r7, #8]
 80061e4:	f7ff fa08 	bl	80055f8 <_SendPacket>
  RECORD_END();
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f383 8811 	msr	BASEPRI, r3
}
 80061ee:	bf00      	nop
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200143c8 	.word	0x200143c8
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006206:	f3ef 8311 	mrs	r3, BASEPRI
 800620a:	f04f 0120 	mov.w	r1, #32
 800620e:	f381 8811 	msr	BASEPRI, r1
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	4807      	ldr	r0, [pc, #28]	; (8006234 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006216:	f7ff f8fc 	bl	8005412 <_PreparePacket>
 800621a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800621c:	2203      	movs	r2, #3
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6838      	ldr	r0, [r7, #0]
 8006222:	f7ff f9e9 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f383 8811 	msr	BASEPRI, r3
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200143c8 	.word	0x200143c8

08006238 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800623e:	f3ef 8311 	mrs	r3, BASEPRI
 8006242:	f04f 0120 	mov.w	r1, #32
 8006246:	f381 8811 	msr	BASEPRI, r1
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	4807      	ldr	r0, [pc, #28]	; (800626c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800624e:	f7ff f8e0 	bl	8005412 <_PreparePacket>
 8006252:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006254:	2212      	movs	r2, #18
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f7ff f9cd 	bl	80055f8 <_SendPacket>
  RECORD_END();
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f383 8811 	msr	BASEPRI, r3
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	200143c8 	.word	0x200143c8

08006270 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006276:	f3ef 8311 	mrs	r3, BASEPRI
 800627a:	f04f 0120 	mov.w	r1, #32
 800627e:	f381 8811 	msr	BASEPRI, r1
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	4807      	ldr	r0, [pc, #28]	; (80062a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006286:	f7ff f8c4 	bl	8005412 <_PreparePacket>
 800628a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800628c:	2211      	movs	r2, #17
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6838      	ldr	r0, [r7, #0]
 8006292:	f7ff f9b1 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f383 8811 	msr	BASEPRI, r3
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200143c8 	.word	0x200143c8

080062a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062b0:	f3ef 8311 	mrs	r3, BASEPRI
 80062b4:	f04f 0120 	mov.w	r1, #32
 80062b8:	f381 8811 	msr	BASEPRI, r1
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	4819      	ldr	r0, [pc, #100]	; (8006324 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062c0:	f7ff f8a7 	bl	8005412 <_PreparePacket>
 80062c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ca:	4b17      	ldr	r3, [pc, #92]	; (8006328 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	e00b      	b.n	80062f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	1c59      	adds	r1, r3, #1
 80062e6:	61f9      	str	r1, [r7, #28]
 80062e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	09db      	lsrs	r3, r3, #7
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b7f      	cmp	r3, #127	; 0x7f
 80062fa:	d8f0      	bhi.n	80062de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	61fa      	str	r2, [r7, #28]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800630c:	2208      	movs	r2, #8
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	6938      	ldr	r0, [r7, #16]
 8006312:	f7ff f971 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f383 8811 	msr	BASEPRI, r3
}
 800631c:	bf00      	nop
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	200143c8 	.word	0x200143c8
 8006328:	20014398 	.word	0x20014398

0800632c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006334:	f3ef 8311 	mrs	r3, BASEPRI
 8006338:	f04f 0120 	mov.w	r1, #32
 800633c:	f381 8811 	msr	BASEPRI, r1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	4819      	ldr	r0, [pc, #100]	; (80063a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006344:	f7ff f865 	bl	8005412 <_PreparePacket>
 8006348:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800634e:	4b17      	ldr	r3, [pc, #92]	; (80063ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e00b      	b.n	800637a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	61f9      	str	r1, [r7, #28]
 800636c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b7f      	cmp	r3, #127	; 0x7f
 800637e:	d8f0      	bhi.n	8006362 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	61fa      	str	r2, [r7, #28]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006390:	2204      	movs	r2, #4
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	6938      	ldr	r0, [r7, #16]
 8006396:	f7ff f92f 	bl	80055f8 <_SendPacket>
  RECORD_END();
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f383 8811 	msr	BASEPRI, r3
}
 80063a0:	bf00      	nop
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	200143c8 	.word	0x200143c8
 80063ac:	20014398 	.word	0x20014398

080063b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063b8:	f3ef 8311 	mrs	r3, BASEPRI
 80063bc:	f04f 0120 	mov.w	r1, #32
 80063c0:	f381 8811 	msr	BASEPRI, r1
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	4819      	ldr	r0, [pc, #100]	; (800642c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063c8:	f7ff f823 	bl	8005412 <_PreparePacket>
 80063cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e00b      	b.n	80063fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	61f9      	str	r1, [r7, #28]
 80063f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b7f      	cmp	r3, #127	; 0x7f
 8006402:	d8f0      	bhi.n	80063e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	61fa      	str	r2, [r7, #28]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006414:	2206      	movs	r2, #6
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6938      	ldr	r0, [r7, #16]
 800641a:	f7ff f8ed 	bl	80055f8 <_SendPacket>
  RECORD_END();
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f383 8811 	msr	BASEPRI, r3
}
 8006424:	bf00      	nop
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200143c8 	.word	0x200143c8
 8006430:	20014398 	.word	0x20014398

08006434 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800643e:	f3ef 8311 	mrs	r3, BASEPRI
 8006442:	f04f 0120 	mov.w	r1, #32
 8006446:	f381 8811 	msr	BASEPRI, r1
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	4827      	ldr	r0, [pc, #156]	; (80064ec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800644e:	f7fe ffe0 	bl	8005412 <_PreparePacket>
 8006452:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	e00b      	b.n	8006484 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	b2da      	uxtb	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	6279      	str	r1, [r7, #36]	; 0x24
 8006476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b7f      	cmp	r3, #127	; 0x7f
 8006488:	d8f0      	bhi.n	800646c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	627a      	str	r2, [r7, #36]	; 0x24
 8006490:	6a3a      	ldr	r2, [r7, #32]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	e00b      	b.n	80064bc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	61f9      	str	r1, [r7, #28]
 80064ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	09db      	lsrs	r3, r3, #7
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b7f      	cmp	r3, #127	; 0x7f
 80064c0:	d8f0      	bhi.n	80064a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	61fa      	str	r2, [r7, #28]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80064d2:	2207      	movs	r2, #7
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	6938      	ldr	r0, [r7, #16]
 80064d8:	f7ff f88e 	bl	80055f8 <_SendPacket>
  RECORD_END();
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f383 8811 	msr	BASEPRI, r3
}
 80064e2:	bf00      	nop
 80064e4:	3728      	adds	r7, #40	; 0x28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200143c8 	.word	0x200143c8
 80064f0:	20014398 	.word	0x20014398

080064f4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80064fc:	4b04      	ldr	r3, [pc, #16]	; (8006510 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	1ad3      	subs	r3, r2, r3
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20014398 	.word	0x20014398

08006514 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b08c      	sub	sp, #48	; 0x30
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800651e:	4b3b      	ldr	r3, [pc, #236]	; (800660c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d06d      	beq.n	8006602 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800652c:	2300      	movs	r3, #0
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006530:	e008      	b.n	8006544 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	3301      	adds	r3, #1
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006548:	429a      	cmp	r2, r3
 800654a:	d3f2      	bcc.n	8006532 <SEGGER_SYSVIEW_SendModule+0x1e>
 800654c:	e000      	b.n	8006550 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800654e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d055      	beq.n	8006602 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006556:	f3ef 8311 	mrs	r3, BASEPRI
 800655a:	f04f 0120 	mov.w	r1, #32
 800655e:	f381 8811 	msr	BASEPRI, r1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	482a      	ldr	r0, [pc, #168]	; (8006610 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006566:	f7fe ff54 	bl	8005412 <_PreparePacket>
 800656a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	623b      	str	r3, [r7, #32]
 8006578:	e00b      	b.n	8006592 <SEGGER_SYSVIEW_SendModule+0x7e>
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	6279      	str	r1, [r7, #36]	; 0x24
 8006584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	623b      	str	r3, [r7, #32]
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	2b7f      	cmp	r3, #127	; 0x7f
 8006596:	d8f0      	bhi.n	800657a <SEGGER_SYSVIEW_SendModule+0x66>
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	627a      	str	r2, [r7, #36]	; 0x24
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e00b      	b.n	80065cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	61f9      	str	r1, [r7, #28]
 80065be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	09db      	lsrs	r3, r3, #7
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b7f      	cmp	r3, #127	; 0x7f
 80065d0:	d8f0      	bhi.n	80065b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	61fa      	str	r2, [r7, #28]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2280      	movs	r2, #128	; 0x80
 80065e8:	4619      	mov	r1, r3
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7fe fec4 	bl	8005378 <_EncodeStr>
 80065f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80065f2:	2216      	movs	r2, #22
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	6938      	ldr	r0, [r7, #16]
 80065f8:	f7fe fffe 	bl	80055f8 <_SendPacket>
      RECORD_END();
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006602:	bf00      	nop
 8006604:	3730      	adds	r7, #48	; 0x30
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	200143c0 	.word	0x200143c0
 8006610:	200143c8 	.word	0x200143c8

08006614 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800661a:	4b0c      	ldr	r3, [pc, #48]	; (800664c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f2      	bne.n	8006628 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200143c0 	.word	0x200143c0

08006650 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006656:	f3ef 8311 	mrs	r3, BASEPRI
 800665a:	f04f 0120 	mov.w	r1, #32
 800665e:	f381 8811 	msr	BASEPRI, r1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	4817      	ldr	r0, [pc, #92]	; (80066c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006666:	f7fe fed4 	bl	8005412 <_PreparePacket>
 800666a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e00b      	b.n	8006694 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	6179      	str	r1, [r7, #20]
 8006686:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	09db      	lsrs	r3, r3, #7
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b7f      	cmp	r3, #127	; 0x7f
 8006698:	d8f0      	bhi.n	800667c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	617a      	str	r2, [r7, #20]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80066aa:	221b      	movs	r2, #27
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	68b8      	ldr	r0, [r7, #8]
 80066b0:	f7fe ffa2 	bl	80055f8 <_SendPacket>
  RECORD_END();
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f383 8811 	msr	BASEPRI, r3
}
 80066ba:	bf00      	nop
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	200143c8 	.word	0x200143c8
 80066c8:	200143c4 	.word	0x200143c4

080066cc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066d4:	f3ef 8311 	mrs	r3, BASEPRI
 80066d8:	f04f 0120 	mov.w	r1, #32
 80066dc:	f381 8811 	msr	BASEPRI, r1
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	4827      	ldr	r0, [pc, #156]	; (8006780 <SEGGER_SYSVIEW_Warn+0xb4>)
 80066e4:	f7fe fe95 	bl	8005412 <_PreparePacket>
 80066e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	6938      	ldr	r0, [r7, #16]
 80066f0:	f7fe fe42 	bl	8005378 <_EncodeStr>
 80066f4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
 80066fa:	2301      	movs	r3, #1
 80066fc:	623b      	str	r3, [r7, #32]
 80066fe:	e00b      	b.n	8006718 <SEGGER_SYSVIEW_Warn+0x4c>
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	6279      	str	r1, [r7, #36]	; 0x24
 800670a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	09db      	lsrs	r3, r3, #7
 8006716:	623b      	str	r3, [r7, #32]
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2b7f      	cmp	r3, #127	; 0x7f
 800671c:	d8f0      	bhi.n	8006700 <SEGGER_SYSVIEW_Warn+0x34>
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	627a      	str	r2, [r7, #36]	; 0x24
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e00b      	b.n	8006750 <SEGGER_SYSVIEW_Warn+0x84>
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	61f9      	str	r1, [r7, #28]
 8006742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	09db      	lsrs	r3, r3, #7
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b7f      	cmp	r3, #127	; 0x7f
 8006754:	d8f0      	bhi.n	8006738 <SEGGER_SYSVIEW_Warn+0x6c>
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	61fa      	str	r2, [r7, #28]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006766:	221a      	movs	r2, #26
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	6938      	ldr	r0, [r7, #16]
 800676c:	f7fe ff44 	bl	80055f8 <_SendPacket>
  RECORD_END();
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f383 8811 	msr	BASEPRI, r3
}
 8006776:	bf00      	nop
 8006778:	3728      	adds	r7, #40	; 0x28
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200143c8 	.word	0x200143c8

08006784 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800678a:	7e1b      	ldrb	r3, [r3, #24]
 800678c:	4619      	mov	r1, r3
 800678e:	4a13      	ldr	r2, [pc, #76]	; (80067dc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006790:	460b      	mov	r3, r1
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	440b      	add	r3, r1
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	4413      	add	r3, r2
 800679a:	336c      	adds	r3, #108	; 0x6c
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067a0:	7e1b      	ldrb	r3, [r3, #24]
 80067a2:	4618      	mov	r0, r3
 80067a4:	490d      	ldr	r1, [pc, #52]	; (80067dc <SEGGER_SYSVIEW_IsStarted+0x58>)
 80067a6:	4603      	mov	r3, r0
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4403      	add	r3, r0
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	440b      	add	r3, r1
 80067b0:	3370      	adds	r3, #112	; 0x70
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d00b      	beq.n	80067d0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80067b8:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067ba:	789b      	ldrb	r3, [r3, #2]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80067c6:	f7fe fe31 	bl	800542c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80067ca:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80067d0:	4b01      	ldr	r3, [pc, #4]	; (80067d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20014398 	.word	0x20014398
 80067dc:	20012ed8 	.word	0x20012ed8

080067e0 <__libc_init_array>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4d0d      	ldr	r5, [pc, #52]	; (8006818 <__libc_init_array+0x38>)
 80067e4:	4c0d      	ldr	r4, [pc, #52]	; (800681c <__libc_init_array+0x3c>)
 80067e6:	1b64      	subs	r4, r4, r5
 80067e8:	10a4      	asrs	r4, r4, #2
 80067ea:	2600      	movs	r6, #0
 80067ec:	42a6      	cmp	r6, r4
 80067ee:	d109      	bne.n	8006804 <__libc_init_array+0x24>
 80067f0:	4d0b      	ldr	r5, [pc, #44]	; (8006820 <__libc_init_array+0x40>)
 80067f2:	4c0c      	ldr	r4, [pc, #48]	; (8006824 <__libc_init_array+0x44>)
 80067f4:	f000 f83e 	bl	8006874 <_init>
 80067f8:	1b64      	subs	r4, r4, r5
 80067fa:	10a4      	asrs	r4, r4, #2
 80067fc:	2600      	movs	r6, #0
 80067fe:	42a6      	cmp	r6, r4
 8006800:	d105      	bne.n	800680e <__libc_init_array+0x2e>
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	f855 3b04 	ldr.w	r3, [r5], #4
 8006808:	4798      	blx	r3
 800680a:	3601      	adds	r6, #1
 800680c:	e7ee      	b.n	80067ec <__libc_init_array+0xc>
 800680e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006812:	4798      	blx	r3
 8006814:	3601      	adds	r6, #1
 8006816:	e7f2      	b.n	80067fe <__libc_init_array+0x1e>
 8006818:	080069c8 	.word	0x080069c8
 800681c:	080069c8 	.word	0x080069c8
 8006820:	080069c8 	.word	0x080069c8
 8006824:	080069cc 	.word	0x080069cc

08006828 <memcmp>:
 8006828:	b510      	push	{r4, lr}
 800682a:	3901      	subs	r1, #1
 800682c:	4402      	add	r2, r0
 800682e:	4290      	cmp	r0, r2
 8006830:	d101      	bne.n	8006836 <memcmp+0xe>
 8006832:	2000      	movs	r0, #0
 8006834:	e005      	b.n	8006842 <memcmp+0x1a>
 8006836:	7803      	ldrb	r3, [r0, #0]
 8006838:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800683c:	42a3      	cmp	r3, r4
 800683e:	d001      	beq.n	8006844 <memcmp+0x1c>
 8006840:	1b18      	subs	r0, r3, r4
 8006842:	bd10      	pop	{r4, pc}
 8006844:	3001      	adds	r0, #1
 8006846:	e7f2      	b.n	800682e <memcmp+0x6>

08006848 <memcpy>:
 8006848:	440a      	add	r2, r1
 800684a:	4291      	cmp	r1, r2
 800684c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006850:	d100      	bne.n	8006854 <memcpy+0xc>
 8006852:	4770      	bx	lr
 8006854:	b510      	push	{r4, lr}
 8006856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685e:	4291      	cmp	r1, r2
 8006860:	d1f9      	bne.n	8006856 <memcpy+0xe>
 8006862:	bd10      	pop	{r4, pc}

08006864 <memset>:
 8006864:	4402      	add	r2, r0
 8006866:	4603      	mov	r3, r0
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	f803 1b01 	strb.w	r1, [r3], #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <_init>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	bf00      	nop
 8006878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687a:	bc08      	pop	{r3}
 800687c:	469e      	mov	lr, r3
 800687e:	4770      	bx	lr

08006880 <_fini>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr
