
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f88  08004f88  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e24  20000078  08005008  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e9c  08005008  00022e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f074  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002731  00000000  00000000  0002f11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00031850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00032778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ff6  00000000  00000000  00033578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001013f  00000000  00000000  0004b56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095420  00000000  00000000  0005b6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000453c  00000000  00000000  000f0b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004eb4 	.word	0x08004eb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004eb4 	.word	0x08004eb4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fa9d 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f845 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8a1 	bl	8000638 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status=xTaskCreate(task1, "task1", 100, "task=1", 2, &taskHandle1);
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2302      	movs	r3, #2
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <main+0x80>)
 8000502:	2264      	movs	r2, #100	; 0x64
 8000504:	4918      	ldr	r1, [pc, #96]	; (8000568 <main+0x84>)
 8000506:	4819      	ldr	r0, [pc, #100]	; (800056c <main+0x88>)
 8000508:	f002 f9da 	bl	80028c0 <xTaskCreate>
 800050c:	6178      	str	r0, [r7, #20]
  configASSERT(status==pdPASS);
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00a      	beq.n	800052a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	f3bf 8f6f 	isb	sy
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000526:	bf00      	nop
 8000528:	e7fe      	b.n	8000528 <main+0x44>
  status=xTaskCreate(task2, "task2", 100, "task=2", 2, &taskHandle2);
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2302      	movs	r3, #2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <main+0x8c>)
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	490f      	ldr	r1, [pc, #60]	; (8000574 <main+0x90>)
 8000538:	480f      	ldr	r0, [pc, #60]	; (8000578 <main+0x94>)
 800053a:	f002 f9c1 	bl	80028c0 <xTaskCreate>
 800053e:	6178      	str	r0, [r7, #20]
  configASSERT(status==pdPASS);
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d00a      	beq.n	800055c <main+0x78>
        __asm volatile
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	60fb      	str	r3, [r7, #12]
    }
 8000558:	bf00      	nop
 800055a:	e7fe      	b.n	800055a <main+0x76>
  vTaskStartScheduler();
 800055c:	f002 faf6 	bl	8002b4c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x7c>
 8000562:	bf00      	nop
 8000564:	08004ecc 	.word	0x08004ecc
 8000568:	08004ed4 	.word	0x08004ed4
 800056c:	080006c1 	.word	0x080006c1
 8000570:	08004edc 	.word	0x08004edc
 8000574:	08004ee4 	.word	0x08004ee4
 8000578:	080006d1 	.word	0x080006d1

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f003 ff7e 	bl	800448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xb4>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xb4>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xb4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <SystemClock_Config+0xb8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <SystemClock_Config+0xb8>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <SystemClock_Config+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fcdd 	bl	8000fac <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f8:	f000 f884 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f000 ff40 	bl	800149c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000622:	f000 f86f 	bl	8000704 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x84>)
 800068e:	f000 fc73 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000692:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x84>)
 80006ac:	f000 fae0 	bl	8000c70 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020c00 	.word	0x40020c00

080006c0 <task1>:

/* USER CODE BEGIN 4 */
static void task1(void* param)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)param);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f003 ff55 	bl	8004578 <puts>
 80006ce:	e7fb      	b.n	80006c8 <task1+0x8>

080006d0 <task2>:
	}
}
static void task2(void* param)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)param);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f003 ff4d 	bl	8004578 <puts>
 80006de:	e7fb      	b.n	80006d8 <task2+0x8>

080006e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f2:	f000 f9bb 	bl	8000a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40014000 	.word	0x40014000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <HAL_InitTick+0xd0>)
 8000776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000778:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <HAL_InitTick+0xd0>)
 800077a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077e:	6453      	str	r3, [r2, #68]	; 0x44
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <HAL_InitTick+0xd0>)
 8000782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800078c:	f107 020c 	add.w	r2, r7, #12
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f84c 	bl	8001834 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800079c:	f001 f836 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80007a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	4a23      	ldr	r2, [pc, #140]	; (8000834 <HAL_InitTick+0xd4>)
 80007a6:	fba2 2303 	umull	r2, r3, r2, r3
 80007aa:	0c9b      	lsrs	r3, r3, #18
 80007ac:	3b01      	subs	r3, #1
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <HAL_InitTick+0xd8>)
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <HAL_InitTick+0xdc>)
 80007b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <HAL_InitTick+0xd8>)
 80007b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007bc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <HAL_InitTick+0xd8>)
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_InitTick+0xd8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <HAL_InitTick+0xd8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_InitTick+0xd8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80007d6:	4818      	ldr	r0, [pc, #96]	; (8000838 <HAL_InitTick+0xd8>)
 80007d8:	f001 f85e 	bl	8001898 <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d11b      	bne.n	8000822 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <HAL_InitTick+0xd8>)
 80007ec:	f001 f8ae 	bl	800194c <HAL_TIM_Base_Start_IT>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d111      	bne.n	8000822 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80007fe:	2018      	movs	r0, #24
 8000800:	f000 fa28 	bl	8000c54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b0f      	cmp	r3, #15
 8000808:	d808      	bhi.n	800081c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800080a:	2200      	movs	r2, #0
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	2018      	movs	r0, #24
 8000810:	f000 fa04 	bl	8000c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_InitTick+0xe0>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e002      	b.n	8000822 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000826:	4618      	mov	r0, r3
 8000828:	3730      	adds	r7, #48	; 0x30
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	431bde83 	.word	0x431bde83
 8000838:	20000094 	.word	0x20000094
 800083c:	40014000 	.word	0x40014000
 8000840:	20000004 	.word	0x20000004

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000876:	f001 f8cb 	bl	8001a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000094 	.word	0x20000094

08000884 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <ITM_SendChar+0x48>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <ITM_SendChar+0x48>)
 8000894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000898:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <ITM_SendChar+0x4c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <ITM_SendChar+0x4c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008a6:	bf00      	nop
 80008a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f8      	beq.n	80008a8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	6013      	str	r3, [r2, #0]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000edfc 	.word	0xe000edfc
 80008d0:	e0000e00 	.word	0xe0000e00

080008d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00a      	b.n	80008fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008e6:	f3af 8000 	nop.w
 80008ea:	4601      	mov	r1, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf0      	blt.n	80008e6 <_read+0x12>
  }

  return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e009      	b.n	8000934 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ffab 	bl	8000884 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf1      	blt.n	8000920 <_write+0x12>

  }
  return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_close>:

int _close(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	605a      	str	r2, [r3, #4]
  return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009da:	490e      	ldr	r1, [pc, #56]	; (8000a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f0:	4c0b      	ldr	r4, [pc, #44]	; (8000a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009fe:	f7ff ffd7 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f003 fd11 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a06:	f7ff fd6d 	bl	80004e4 <main>
  bx  lr    
 8000a0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a18:	08004f90 	.word	0x08004f90
  ldr r2, =_sbss
 8000a1c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a20:	20012e9c 	.word	0x20012e9c

08000a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_Init+0x40>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_Init+0x40>)
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x40>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f8d8 	bl	8000c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f7ff fe82 	bl	8000760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe58 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023c00 	.word	0x40023c00

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	200000dc 	.word	0x200000dc

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000dc 	.word	0x200000dc

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ff4c 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2e:	f7ff ff61 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	6978      	ldr	r0, [r7, #20]
 8000c3a:	f7ff ffb1 	bl	8000ba0 <NVIC_EncodePriority>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff80 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff54 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	e159      	b.n	8000f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 8148 	bne.w	8000f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d130      	bne.n	8000d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f003 0201 	and.w	r2, r3, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d017      	beq.n	8000d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d123      	bne.n	8000db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	69b9      	ldr	r1, [r7, #24]
 8000db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0203 	and.w	r2, r3, #3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80a2 	beq.w	8000f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a56      	ldr	r2, [pc, #344]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e12:	4a52      	ldr	r2, [pc, #328]	; (8000f5c <HAL_GPIO_Init+0x2ec>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <HAL_GPIO_Init+0x2f0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d019      	beq.n	8000e72 <HAL_GPIO_Init+0x202>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a48      	ldr	r2, [pc, #288]	; (8000f64 <HAL_GPIO_Init+0x2f4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x1fe>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a47      	ldr	r2, [pc, #284]	; (8000f68 <HAL_GPIO_Init+0x2f8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x1fa>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a46      	ldr	r2, [pc, #280]	; (8000f6c <HAL_GPIO_Init+0x2fc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x1f6>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a45      	ldr	r2, [pc, #276]	; (8000f70 <HAL_GPIO_Init+0x300>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x1f2>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e008      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e004      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e72:	2300      	movs	r3, #0
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	f002 0203 	and.w	r2, r2, #3
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	4093      	lsls	r3, r2
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e84:	4935      	ldr	r1, [pc, #212]	; (8000f5c <HAL_GPIO_Init+0x2ec>)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee0:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0a:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	f67f aea2 	bls.w	8000c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40013c00 	.word	0x40013c00

08000f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
 8000f84:	4613      	mov	r3, r2
 8000f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f94:	e003      	b.n	8000f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	041a      	lsls	r2, r3, #16
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	619a      	str	r2, [r3, #24]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e267      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d075      	beq.n	80010b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fca:	4b88      	ldr	r3, [pc, #544]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d00c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fd6:	4b85      	ldr	r3, [pc, #532]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d112      	bne.n	8001008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe2:	4b82      	ldr	r3, [pc, #520]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fee:	d10b      	bne.n	8001008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d05b      	beq.n	80010b4 <HAL_RCC_OscConfig+0x108>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d157      	bne.n	80010b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e242      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001010:	d106      	bne.n	8001020 <HAL_RCC_OscConfig+0x74>
 8001012:	4b76      	ldr	r3, [pc, #472]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a75      	ldr	r2, [pc, #468]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e01d      	b.n	800105c <HAL_RCC_OscConfig+0xb0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x98>
 800102a:	4b70      	ldr	r3, [pc, #448]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6f      	ldr	r2, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b6d      	ldr	r3, [pc, #436]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a6c      	ldr	r2, [pc, #432]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e00b      	b.n	800105c <HAL_RCC_OscConfig+0xb0>
 8001044:	4b69      	ldr	r3, [pc, #420]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a68      	ldr	r2, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800104a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b66      	ldr	r3, [pc, #408]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a65      	ldr	r2, [pc, #404]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d013      	beq.n	800108c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fd16 	bl	8000a94 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fd12 	bl	8000a94 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e207      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	4b5b      	ldr	r3, [pc, #364]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0xc0>
 800108a:	e014      	b.n	80010b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fd02 	bl	8000a94 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcfe 	bl	8000a94 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e1f3      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	4b51      	ldr	r3, [pc, #324]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0xe8>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d063      	beq.n	800118a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d11c      	bne.n	8001114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d116      	bne.n	8001114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x152>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e1c7      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	e03a      	b.n	800118a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <HAL_RCC_OscConfig+0x244>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001122:	f7ff fcb7 	bl	8000a94 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fcb3 	bl	8000a94 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1a8      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4925      	ldr	r1, [pc, #148]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
 800115c:	e015      	b.n	800118a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_RCC_OscConfig+0x244>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fc96 	bl	8000a94 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff fc92 	bl	8000a94 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e187      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d036      	beq.n	8001204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d016      	beq.n	80011cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_RCC_OscConfig+0x248>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a4:	f7ff fc76 	bl	8000a94 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc72 	bl	8000a94 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e167      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80011c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x200>
 80011ca:	e01b      	b.n	8001204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_RCC_OscConfig+0x248>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fc5f 	bl	8000a94 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	e00e      	b.n	80011f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011da:	f7ff fc5b 	bl	8000a94 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d907      	bls.n	80011f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e150      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
 80011ec:	40023800 	.word	0x40023800
 80011f0:	42470000 	.word	0x42470000
 80011f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80011fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1ea      	bne.n	80011da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8097 	beq.w	8001340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001216:	4b81      	ldr	r3, [pc, #516]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10f      	bne.n	8001242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b7d      	ldr	r3, [pc, #500]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a7c      	ldr	r2, [pc, #496]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b7a      	ldr	r3, [pc, #488]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b77      	ldr	r3, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d118      	bne.n	8001280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a73      	ldr	r2, [pc, #460]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff fc1b 	bl	8000a94 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001262:	f7ff fc17 	bl	8000a94 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e10c      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x2ea>
 8001288:	4b64      	ldr	r3, [pc, #400]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a63      	ldr	r2, [pc, #396]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	e01c      	b.n	80012d0 <HAL_RCC_OscConfig+0x324>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b05      	cmp	r3, #5
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x30c>
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a2:	4a5e      	ldr	r2, [pc, #376]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6713      	str	r3, [r2, #112]	; 0x70
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6713      	str	r3, [r2, #112]	; 0x70
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0x324>
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6713      	str	r3, [r2, #112]	; 0x70
 80012c4:	4b55      	ldr	r3, [pc, #340]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c8:	4a54      	ldr	r2, [pc, #336]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d015      	beq.n	8001304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fbdc 	bl	8000a94 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fbd8 	bl	8000a94 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e0cb      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0ee      	beq.n	80012e0 <HAL_RCC_OscConfig+0x334>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001304:	f7ff fbc6 	bl	8000a94 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff fbc2 	bl	8000a94 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0b5      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ee      	bne.n	800130c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d105      	bne.n	8001340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a38      	ldr	r2, [pc, #224]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800133a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a1 	beq.w	800148c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d05c      	beq.n	8001410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d141      	bne.n	80013e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HAL_RCC_OscConfig+0x478>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fb96 	bl	8000a94 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fb92 	bl	8000a94 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e087      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	491b      	ldr	r1, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_RCC_OscConfig+0x478>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb6b 	bl	8000a94 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb67 	bl	8000a94 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e05c      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x416>
 80013e0:	e054      	b.n	800148c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_OscConfig+0x478>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb54 	bl	8000a94 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb50 	bl	8000a94 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e045      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x444>
 800140e:	e03d      	b.n	800148c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e038      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000
 8001424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_RCC_OscConfig+0x4ec>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d028      	beq.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d121      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d11a      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800145e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001460:	4293      	cmp	r3, r2
 8001462:	d111      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	3b01      	subs	r3, #1
 8001472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0cc      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b0:	4b68      	ldr	r3, [pc, #416]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d90c      	bls.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b65      	ldr	r3, [pc, #404]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0b8      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	494d      	ldr	r1, [pc, #308]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d044      	beq.n	80015bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d119      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e07f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001556:	2b03      	cmp	r3, #3
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e067      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f023 0203 	bic.w	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4934      	ldr	r1, [pc, #208]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff fa82 	bl	8000a94 <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff fa7e 	bl	8000a94 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e04f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 020c 	and.w	r2, r3, #12
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1eb      	bne.n	8001594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d20c      	bcs.n	80015e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e032      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4916      	ldr	r1, [pc, #88]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	490e      	ldr	r1, [pc, #56]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001622:	f000 f821 	bl	8001668 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	490a      	ldr	r1, [pc, #40]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	5ccb      	ldrb	r3, [r1, r3]
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f88c 	bl	8000760 <HAL_InitTick>

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00
 8001658:	40023800 	.word	0x40023800
 800165c:	08004f04 	.word	0x08004f04
 8001660:	20000000 	.word	0x20000000
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800166c:	b090      	sub	sp, #64	; 0x40
 800166e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001680:	4b59      	ldr	r3, [pc, #356]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d00d      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x40>
 800168c:	2b08      	cmp	r3, #8
 800168e:	f200 80a1 	bhi.w	80017d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x34>
 8001696:	2b04      	cmp	r3, #4
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800169a:	e09b      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_GetSysClockFreq+0x184>)
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016a0:	e09b      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016a6:	e098      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a8:	4b4f      	ldr	r3, [pc, #316]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	2200      	movs	r2, #0
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	627a      	str	r2, [r7, #36]	; 0x24
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016d0:	2100      	movs	r1, #0
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016d4:	fb03 f201 	mul.w	r2, r3, r1
 80016d8:	2300      	movs	r3, #0
 80016da:	fb00 f303 	mul.w	r3, r0, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e2:	fba0 1202 	umull	r1, r2, r0, r2
 80016e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016e8:	460a      	mov	r2, r1
 80016ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80016ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ee:	4413      	add	r3, r2
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	2200      	movs	r2, #0
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	61fa      	str	r2, [r7, #28]
 80016fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001702:	f7fe fd6d 	bl	80001e0 <__aeabi_uldivmod>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4613      	mov	r3, r2
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800170e:	e053      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	2200      	movs	r2, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	617a      	str	r2, [r7, #20]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001722:	f04f 0b00 	mov.w	fp, #0
 8001726:	4652      	mov	r2, sl
 8001728:	465b      	mov	r3, fp
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0159      	lsls	r1, r3, #5
 8001734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001738:	0150      	lsls	r0, r2, #5
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	ebb2 080a 	subs.w	r8, r2, sl
 8001742:	eb63 090b 	sbc.w	r9, r3, fp
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800175a:	ebb2 0408 	subs.w	r4, r2, r8
 800175e:	eb63 0509 	sbc.w	r5, r3, r9
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	00eb      	lsls	r3, r5, #3
 800176c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001770:	00e2      	lsls	r2, r4, #3
 8001772:	4614      	mov	r4, r2
 8001774:	461d      	mov	r5, r3
 8001776:	eb14 030a 	adds.w	r3, r4, sl
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	eb45 030b 	adc.w	r3, r5, fp
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800178e:	4629      	mov	r1, r5
 8001790:	028b      	lsls	r3, r1, #10
 8001792:	4621      	mov	r1, r4
 8001794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001798:	4621      	mov	r1, r4
 800179a:	028a      	lsls	r2, r1, #10
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	2200      	movs	r2, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	60fa      	str	r2, [r7, #12]
 80017a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ac:	f7fe fd18 	bl	80001e0 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	3301      	adds	r3, #1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_RCC_GetSysClockFreq+0x184>)
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3740      	adds	r7, #64	; 0x40
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	00f42400 	.word	0x00f42400
 80017f0:	017d7840 	.word	0x017d7840

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_GetHCLKFreq+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001810:	f7ff fff0 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0b5b      	lsrs	r3, r3, #13
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	08004f14 	.word	0x08004f14

08001834 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	220f      	movs	r2, #15
 8001842:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_RCC_GetClockConfig+0x5c>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_RCC_GetClockConfig+0x5c>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_RCC_GetClockConfig+0x5c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_GetClockConfig+0x5c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_RCC_GetClockConfig+0x60>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0207 	and.w	r2, r3, #7
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	601a      	str	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e041      	b.n	800192e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f839 	bl	8001936 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3304      	adds	r3, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f000 f9ca 	bl	8001c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d001      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e044      	b.n	80019ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_TIM_Base_Start_IT+0xb0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d018      	beq.n	80019b8 <HAL_TIM_Base_Start_IT+0x6c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198e:	d013      	beq.n	80019b8 <HAL_TIM_Base_Start_IT+0x6c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <HAL_TIM_Base_Start_IT+0xb4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00e      	beq.n	80019b8 <HAL_TIM_Base_Start_IT+0x6c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_TIM_Base_Start_IT+0xb8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_TIM_Base_Start_IT+0x6c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_TIM_Base_Start_IT+0xbc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_TIM_Base_Start_IT+0x6c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <HAL_TIM_Base_Start_IT+0xc0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d111      	bne.n	80019dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d010      	beq.n	80019ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019da:	e007      	b.n	80019ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40000800 	.word	0x40000800
 8001a08:	40000c00 	.word	0x40000c00
 8001a0c:	40014000 	.word	0x40014000

08001a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d11b      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0202 	mvn.w	r2, #2
 8001a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f8ee 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f8e0 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8f1 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d122      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11b      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0204 	mvn.w	r2, #4
 8001a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8c4 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001aac:	e005      	b.n	8001aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8b6 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8c7 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d122      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d11b      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0208 	mvn.w	r2, #8
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f89a 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f88c 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f89d 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0210 	mvn.w	r2, #16
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f870 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f862 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f873 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10e      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0201 	mvn.w	r2, #1
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fda6 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b80      	cmp	r3, #128	; 0x80
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b80      	cmp	r3, #128	; 0x80
 8001bae:	d107      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8e2 	bl	8001d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f838 	bl	8001c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d107      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0220 	mvn.w	r2, #32
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8ac 	bl	8001d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a34      	ldr	r2, [pc, #208]	; (8001d54 <TIM_Base_SetConfig+0xe4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00f      	beq.n	8001ca8 <TIM_Base_SetConfig+0x38>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d00b      	beq.n	8001ca8 <TIM_Base_SetConfig+0x38>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <TIM_Base_SetConfig+0xe8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <TIM_Base_SetConfig+0x38>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <TIM_Base_SetConfig+0xec>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <TIM_Base_SetConfig+0x38>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <TIM_Base_SetConfig+0xf0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d108      	bne.n	8001cba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <TIM_Base_SetConfig+0xe4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01b      	beq.n	8001cfa <TIM_Base_SetConfig+0x8a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d017      	beq.n	8001cfa <TIM_Base_SetConfig+0x8a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <TIM_Base_SetConfig+0xe8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <TIM_Base_SetConfig+0x8a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <TIM_Base_SetConfig+0xec>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00f      	beq.n	8001cfa <TIM_Base_SetConfig+0x8a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <TIM_Base_SetConfig+0xf0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00b      	beq.n	8001cfa <TIM_Base_SetConfig+0x8a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <TIM_Base_SetConfig+0xf4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <TIM_Base_SetConfig+0x8a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <TIM_Base_SetConfig+0xf8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <TIM_Base_SetConfig+0x8a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <TIM_Base_SetConfig+0xfc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d108      	bne.n	8001d0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <TIM_Base_SetConfig+0xe4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d103      	bne.n	8001d40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	615a      	str	r2, [r3, #20]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40000c00 	.word	0x40000c00
 8001d64:	40014000 	.word	0x40014000
 8001d68:	40014400 	.word	0x40014400
 8001d6c:	40014800 	.word	0x40014800

08001d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f103 0208 	add.w	r2, r3, #8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f103 0208 	add.w	r2, r3, #8
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0208 	add.w	r2, r3, #8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e50:	d103      	bne.n	8001e5a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e00c      	b.n	8001e74 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e002      	b.n	8001e68 <vListInsert+0x2e>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d2f6      	bcs.n	8001e62 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6892      	ldr	r2, [r2, #8]
 8001ec2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6852      	ldr	r2, [r2, #4]
 8001ecc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d103      	bne.n	8001ee0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <xQueueGenericReset+0x2a>
        __asm volatile
 8001f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	60bb      	str	r3, [r7, #8]
    }
 8001f26:	bf00      	nop
 8001f28:	e7fe      	b.n	8001f28 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001f2a:	f001 ff5d 	bl	8003de8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	441a      	add	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	68f9      	ldr	r1, [r7, #12]
 8001f5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	441a      	add	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	22ff      	movs	r2, #255	; 0xff
 8001f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d114      	bne.n	8001faa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01a      	beq.n	8001fbe <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3310      	adds	r3, #16
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 f84d 	bl	800302c <xTaskRemoveFromEventList>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <xQueueGenericReset+0xcc>)
 8001f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	e009      	b.n	8001fbe <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3310      	adds	r3, #16
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fef2 	bl	8001d98 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3324      	adds	r3, #36	; 0x24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff feed 	bl	8001d98 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001fbe:	f001 ff43 	bl	8003e48 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	e000ed04 	.word	0xe000ed04

08001fd0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <xQueueGenericCreate+0x2a>
        __asm volatile
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	61bb      	str	r3, [r7, #24]
    }
 8001ff6:	bf00      	nop
 8001ff8:	e7fe      	b.n	8001ff8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <xQueueGenericCreate+0x48>
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d101      	bne.n	800201c <xQueueGenericCreate+0x4c>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <xQueueGenericCreate+0x4e>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10a      	bne.n	8002038 <xQueueGenericCreate+0x68>
        __asm volatile
 8002022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002026:	f383 8811 	msr	BASEPRI, r3
 800202a:	f3bf 8f6f 	isb	sy
 800202e:	f3bf 8f4f 	dsb	sy
 8002032:	617b      	str	r3, [r7, #20]
    }
 8002034:	bf00      	nop
 8002036:	e7fe      	b.n	8002036 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800203e:	d90a      	bls.n	8002056 <xQueueGenericCreate+0x86>
        __asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	613b      	str	r3, [r7, #16]
    }
 8002052:	bf00      	nop
 8002054:	e7fe      	b.n	8002054 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	3350      	adds	r3, #80	; 0x50
 800205a:	4618      	mov	r0, r3
 800205c:	f001 ffe6 	bl	800402c <pvPortMalloc>
 8002060:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3350      	adds	r3, #80	; 0x50
 8002070:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002072:	79fa      	ldrb	r2, [r7, #7]
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f805 	bl	800208e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002084:	6a3b      	ldr	r3, [r7, #32]
    }
 8002086:	4618      	mov	r0, r3
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e002      	b.n	80020b0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020bc:	2101      	movs	r1, #1
 80020be:	69b8      	ldr	r0, [r7, #24]
 80020c0:	f7ff ff1e 	bl	8001f00 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80020e2:	2300      	movs	r3, #0
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <xQueueGenericSend+0x32>
        __asm volatile
 80020f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f4:	f383 8811 	msr	BASEPRI, r3
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002102:	bf00      	nop
 8002104:	e7fe      	b.n	8002104 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d103      	bne.n	8002114 <xQueueGenericSend+0x40>
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <xQueueGenericSend+0x44>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <xQueueGenericSend+0x46>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <xQueueGenericSend+0x60>
        __asm volatile
 800211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002130:	bf00      	nop
 8002132:	e7fe      	b.n	8002132 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d103      	bne.n	8002142 <xQueueGenericSend+0x6e>
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <xQueueGenericSend+0x72>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <xQueueGenericSend+0x74>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <xQueueGenericSend+0x8e>
        __asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	623b      	str	r3, [r7, #32]
    }
 800215e:	bf00      	nop
 8002160:	e7fe      	b.n	8002160 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002162:	f001 f8ff 	bl	8003364 <xTaskGetSchedulerState>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <xQueueGenericSend+0x9e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <xQueueGenericSend+0xa2>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <xQueueGenericSend+0xa4>
 8002176:	2300      	movs	r3, #0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <xQueueGenericSend+0xbe>
        __asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	61fb      	str	r3, [r7, #28]
    }
 800218e:	bf00      	nop
 8002190:	e7fe      	b.n	8002190 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002192:	f001 fe29 	bl	8003de8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	429a      	cmp	r2, r3
 80021a0:	d302      	bcc.n	80021a8 <xQueueGenericSend+0xd4>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d129      	bne.n	80021fc <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ae:	f000 fa19 	bl	80025e4 <prvCopyDataToQueue>
 80021b2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	3324      	adds	r3, #36	; 0x24
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 ff33 	bl	800302c <xTaskRemoveFromEventList>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <xQueueGenericSend+0x1f8>)
 80021ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	e00a      	b.n	80021f4 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <xQueueGenericSend+0x1f8>)
 80021e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80021f4:	f001 fe28 	bl	8003e48 <vPortExitCritical>
                return pdPASS;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e063      	b.n	80022c4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002202:	f001 fe21 	bl	8003e48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002206:	2300      	movs	r3, #0
 8002208:	e05c      	b.n	80022c4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4618      	mov	r0, r3
 8002216:	f000 ff6b 	bl	80030f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800221a:	2301      	movs	r3, #1
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800221e:	f001 fe13 	bl	8003e48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002222:	f000 fce5 	bl	8002bf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002226:	f001 fddf 	bl	8003de8 <vPortEnterCritical>
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002230:	b25b      	sxtb	r3, r3
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002236:	d103      	bne.n	8002240 <xQueueGenericSend+0x16c>
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002246:	b25b      	sxtb	r3, r3
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224c:	d103      	bne.n	8002256 <xQueueGenericSend+0x182>
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002256:	f001 fdf7 	bl	8003e48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800225a:	1d3a      	adds	r2, r7, #4
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f000 ff5a 	bl	800311c <xTaskCheckForTimeOut>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d124      	bne.n	80022b8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800226e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002270:	f000 fab0 	bl	80027d4 <prvIsQueueFull>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d018      	beq.n	80022ac <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	3310      	adds	r3, #16
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fe82 	bl	8002f8c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800228a:	f000 fa3b 	bl	8002704 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800228e:	f000 fcbd 	bl	8002c0c <xTaskResumeAll>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f af7c 	bne.w	8002192 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <xQueueGenericSend+0x1f8>)
 800229c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	e772      	b.n	8002192 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80022ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ae:	f000 fa29 	bl	8002704 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022b2:	f000 fcab 	bl	8002c0c <xTaskResumeAll>
 80022b6:	e76c      	b.n	8002192 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80022b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ba:	f000 fa23 	bl	8002704 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022be:	f000 fca5 	bl	8002c0c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80022c2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3738      	adds	r7, #56	; 0x38
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	e000ed04 	.word	0xe000ed04

080022d0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b090      	sub	sp, #64	; 0x40
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80022e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <xQueueGenericSendFromISR+0x3c>
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <xQueueGenericSendFromISR+0x40>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <xQueueGenericSendFromISR+0x42>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d103      	bne.n	800233a <xQueueGenericSendFromISR+0x6a>
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <xQueueGenericSendFromISR+0x6e>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <xQueueGenericSendFromISR+0x70>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	623b      	str	r3, [r7, #32]
    }
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800235a:	f001 fe27 	bl	8003fac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800235e:	f3ef 8211 	mrs	r2, BASEPRI
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	61fa      	str	r2, [r7, #28]
 8002374:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002376:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	429a      	cmp	r2, r3
 8002384:	d302      	bcc.n	800238c <xQueueGenericSendFromISR+0xbc>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d13e      	bne.n	800240a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023a2:	f000 f91f 	bl	80025e4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80023a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ae:	d112      	bne.n	80023d6 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d025      	beq.n	8002404 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	3324      	adds	r3, #36	; 0x24
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fe35 	bl	800302c <xTaskRemoveFromEventList>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01d      	beq.n	8002404 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01a      	beq.n	8002404 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e016      	b.n	8002404 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80023d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023da:	2b7f      	cmp	r3, #127	; 0x7f
 80023dc:	d10a      	bne.n	80023f4 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80023de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	617b      	str	r3, [r7, #20]
    }
 80023f0:	bf00      	nop
 80023f2:	e7fe      	b.n	80023f2 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80023f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	b25a      	sxtb	r2, r3
 80023fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002404:	2301      	movs	r3, #1
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002408:	e001      	b.n	800240e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800240a:	2300      	movs	r3, #0
 800240c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002418:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800241c:	4618      	mov	r0, r3
 800241e:	3740      	adds	r7, #64	; 0x40
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <xQueueReceive+0x30>
        __asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	623b      	str	r3, [r7, #32]
    }
 8002450:	bf00      	nop
 8002452:	e7fe      	b.n	8002452 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <xQueueReceive+0x3e>
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <xQueueReceive+0x42>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <xQueueReceive+0x44>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueReceive+0x5e>
        __asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	61fb      	str	r3, [r7, #28]
    }
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002482:	f000 ff6f 	bl	8003364 <xTaskGetSchedulerState>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <xQueueReceive+0x6e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <xQueueReceive+0x72>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <xQueueReceive+0x74>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <xQueueReceive+0x8e>
        __asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	61bb      	str	r3, [r7, #24]
    }
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024b2:	f001 fc99 	bl	8003de8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01f      	beq.n	8002502 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024c6:	f000 f8f7 	bl	80026b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00f      	beq.n	80024fa <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	3310      	adds	r3, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fda4 	bl	800302c <xTaskRemoveFromEventList>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d007      	beq.n	80024fa <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <xQueueReceive+0x1bc>)
 80024ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024fa:	f001 fca5 	bl	8003e48 <vPortExitCritical>
                return pdPASS;
 80024fe:	2301      	movs	r3, #1
 8002500:	e069      	b.n	80025d6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d103      	bne.n	8002510 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002508:	f001 fc9e 	bl	8003e48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800250c:	2300      	movs	r3, #0
 800250e:	e062      	b.n	80025d6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fde8 	bl	80030f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002520:	2301      	movs	r3, #1
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002524:	f001 fc90 	bl	8003e48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002528:	f000 fb62 	bl	8002bf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800252c:	f001 fc5c 	bl	8003de8 <vPortEnterCritical>
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800253c:	d103      	bne.n	8002546 <xQueueReceive+0x122>
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254c:	b25b      	sxtb	r3, r3
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002552:	d103      	bne.n	800255c <xQueueReceive+0x138>
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800255c:	f001 fc74 	bl	8003e48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002560:	1d3a      	adds	r2, r7, #4
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fdd7 	bl	800311c <xTaskCheckForTimeOut>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d123      	bne.n	80025bc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002576:	f000 f917 	bl	80027a8 <prvIsQueueEmpty>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	3324      	adds	r3, #36	; 0x24
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fcff 	bl	8002f8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800258e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002590:	f000 f8b8 	bl	8002704 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002594:	f000 fb3a 	bl	8002c0c <xTaskResumeAll>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d189      	bne.n	80024b2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <xQueueReceive+0x1bc>)
 80025a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	e780      	b.n	80024b2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f000 f8a7 	bl	8002704 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025b6:	f000 fb29 	bl	8002c0c <xTaskResumeAll>
 80025ba:	e77a      	b.n	80024b2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025be:	f000 f8a1 	bl	8002704 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025c2:	f000 fb23 	bl	8002c0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025c8:	f000 f8ee 	bl	80027a8 <prvIsQueueEmpty>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f43f af6f 	beq.w	80024b2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3730      	adds	r7, #48	; 0x30
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	e000ed04 	.word	0xe000ed04

080025e4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d14d      	bne.n	80026a6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fec6 	bl	80033a0 <xTaskPriorityDisinherit>
 8002614:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	e043      	b.n	80026a6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d119      	bne.n	8002658 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6858      	ldr	r0, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	461a      	mov	r2, r3
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	f001 ff1e 	bl	8004470 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	441a      	add	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	d32b      	bcc.n	80026a6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	e026      	b.n	80026a6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68d8      	ldr	r0, [r3, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	461a      	mov	r2, r3
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	f001 ff04 	bl	8004470 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	425b      	negs	r3, r3
 8002672:	441a      	add	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	425b      	negs	r3, r3
 800268e:	441a      	add	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d105      	bne.n	80026a6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80026ae:	697b      	ldr	r3, [r7, #20]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	441a      	add	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d303      	bcc.n	80026ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	461a      	mov	r2, r3
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f001 feba 	bl	8004470 <memcpy>
    }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800270c:	f001 fb6c 	bl	8003de8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002716:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002718:	e011      	b.n	800273e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3324      	adds	r3, #36	; 0x24
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fc80 	bl	800302c <xTaskRemoveFromEventList>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002732:	f000 fd59 	bl	80031e8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3b01      	subs	r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	dce9      	bgt.n	800271a <prvUnlockQueue+0x16>
 8002746:	e000      	b.n	800274a <prvUnlockQueue+0x46>
                        break;
 8002748:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	22ff      	movs	r2, #255	; 0xff
 800274e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002752:	f001 fb79 	bl	8003e48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002756:	f001 fb47 	bl	8003de8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002760:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002762:	e011      	b.n	8002788 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3310      	adds	r3, #16
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fc5b 	bl	800302c <xTaskRemoveFromEventList>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800277c:	f000 fd34 	bl	80031e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002780:	7bbb      	ldrb	r3, [r7, #14]
 8002782:	3b01      	subs	r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800278c:	2b00      	cmp	r3, #0
 800278e:	dce9      	bgt.n	8002764 <prvUnlockQueue+0x60>
 8002790:	e000      	b.n	8002794 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002792:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	22ff      	movs	r2, #255	; 0xff
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800279c:	f001 fb54 	bl	8003e48 <vPortExitCritical>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027b0:	f001 fb1a 	bl	8003de8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027bc:	2301      	movs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e001      	b.n	80027c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027c6:	f001 fb3f 	bl	8003e48 <vPortExitCritical>

    return xReturn;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027dc:	f001 fb04 	bl	8003de8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d102      	bne.n	80027f2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e001      	b.n	80027f6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027f6:	f001 fb27 	bl	8003e48 <vPortExitCritical>

    return xReturn;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e014      	b.n	800283e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <vQueueAddToRegistry+0x50>)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10b      	bne.n	8002838 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <vQueueAddToRegistry+0x50>)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <vQueueAddToRegistry+0x50>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002836:	e006      	b.n	8002846 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3301      	adds	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b07      	cmp	r3, #7
 8002842:	d9e7      	bls.n	8002814 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	200000e0 	.word	0x200000e0

08002858 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002868:	f001 fabe 	bl	8003de8 <vPortEnterCritical>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002872:	b25b      	sxtb	r3, r3
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002878:	d103      	bne.n	8002882 <vQueueWaitForMessageRestricted+0x2a>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002888:	b25b      	sxtb	r3, r3
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288e:	d103      	bne.n	8002898 <vQueueWaitForMessageRestricted+0x40>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002898:	f001 fad6 	bl	8003e48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3324      	adds	r3, #36	; 0x24
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fb91 	bl	8002fd4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff26 	bl	8002704 <prvUnlockQueue>
    }
 80028b8:	bf00      	nop
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af04      	add	r7, sp, #16
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fba9 	bl	800402c <pvPortMalloc>
 80028da:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00e      	beq.n	8002900 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028e2:	2058      	movs	r0, #88	; 0x58
 80028e4:	f001 fba2 	bl	800402c <pvPortMalloc>
 80028e8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
 80028f6:	e005      	b.n	8002904 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80028f8:	6978      	ldr	r0, [r7, #20]
 80028fa:	f001 fc77 	bl	80041ec <vPortFree>
 80028fe:	e001      	b.n	8002904 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d013      	beq.n	8002932 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800290a:	88fa      	ldrh	r2, [r7, #6]
 800290c:	2300      	movs	r3, #0
 800290e:	9303      	str	r3, [sp, #12]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f80e 	bl	8002942 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002926:	69f8      	ldr	r0, [r7, #28]
 8002928:	f000 f8a2 	bl	8002a70 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800292c:	2301      	movs	r3, #1
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e002      	b.n	8002938 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002936:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002938:	69bb      	ldr	r3, [r7, #24]
    }
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b088      	sub	sp, #32
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	461a      	mov	r2, r3
 800295a:	21a5      	movs	r1, #165	; 0xa5
 800295c:	f001 fd96 	bl	800448c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800296a:	3b01      	subs	r3, #1
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f023 0307 	bic.w	r3, r3, #7
 8002978:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	617b      	str	r3, [r7, #20]
    }
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01f      	beq.n	80029e0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	e012      	b.n	80029cc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	7819      	ldrb	r1, [r3, #0]
 80029ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	3334      	adds	r3, #52	; 0x34
 80029b6:	460a      	mov	r2, r1
 80029b8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d9e9      	bls.n	80029a6 <prvInitialiseNewTask+0x64>
 80029d2:	e000      	b.n	80029d6 <prvInitialiseNewTask+0x94>
            {
                break;
 80029d4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029de:	e003      	b.n	80029e8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d901      	bls.n	80029f2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029ee:	2304      	movs	r3, #4
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029fc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	2200      	movs	r2, #0
 8002a02:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	3304      	adds	r3, #4
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f9e5 	bl	8001dd8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	3318      	adds	r3, #24
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f9e0 	bl	8001dd8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	f1c3 0205 	rsb	r2, r3, #5
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	3350      	adds	r3, #80	; 0x50
 8002a32:	2204      	movs	r2, #4
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 fd28 	bl	800448c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	3354      	adds	r3, #84	; 0x54
 8002a40:	2201      	movs	r2, #1
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fd21 	bl	800448c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	69b8      	ldr	r0, [r7, #24]
 8002a50:	f001 f898 	bl	8003b84 <pxPortInitialiseStack>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a64:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a66:	bf00      	nop
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a78:	f001 f9b6 	bl	8003de8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <prvAddNewTaskToReadyList+0xc0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <prvAddNewTaskToReadyList+0xc0>)
 8002a84:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a86:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <prvAddNewTaskToReadyList+0xc4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a8e:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <prvAddNewTaskToReadyList+0xc4>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <prvAddNewTaskToReadyList+0xc0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d110      	bne.n	8002abe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a9c:	f000 fbc8 	bl	8003230 <prvInitialiseTaskLists>
 8002aa0:	e00d      	b.n	8002abe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <prvAddNewTaskToReadyList+0xc8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <prvAddNewTaskToReadyList+0xc4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d802      	bhi.n	8002abe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <prvAddNewTaskToReadyList+0xc4>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <prvAddNewTaskToReadyList+0xcc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <prvAddNewTaskToReadyList+0xcc>)
 8002ac6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <prvAddNewTaskToReadyList+0xcc>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <prvAddNewTaskToReadyList+0xd0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <prvAddNewTaskToReadyList+0xd0>)
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <prvAddNewTaskToReadyList+0xd4>)
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff f97a 	bl	8001df2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002afe:	f001 f9a3 	bl	8003e48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <prvAddNewTaskToReadyList+0xc8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00e      	beq.n	8002b28 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <prvAddNewTaskToReadyList+0xc4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <prvAddNewTaskToReadyList+0xd8>)
 8002b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200001f8 	.word	0x200001f8
 8002b34:	20000120 	.word	0x20000120
 8002b38:	20000204 	.word	0x20000204
 8002b3c:	20000214 	.word	0x20000214
 8002b40:	20000200 	.word	0x20000200
 8002b44:	20000124 	.word	0x20000124
 8002b48:	e000ed04 	.word	0xe000ed04

08002b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <vTaskStartScheduler+0x88>)
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2282      	movs	r2, #130	; 0x82
 8002b5e:	491e      	ldr	r1, [pc, #120]	; (8002bd8 <vTaskStartScheduler+0x8c>)
 8002b60:	481e      	ldr	r0, [pc, #120]	; (8002bdc <vTaskStartScheduler+0x90>)
 8002b62:	f7ff fead 	bl	80028c0 <xTaskCreate>
 8002b66:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002b6e:	f000 fcf7 	bl	8003560 <xTimerCreateTimerTask>
 8002b72:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d116      	bne.n	8002ba8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	60bb      	str	r3, [r7, #8]
    }
 8002b8c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <vTaskStartScheduler+0x94>)
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b94:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <vTaskStartScheduler+0x98>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <vTaskStartScheduler+0x9c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ba2:	f001 f87f 	bl	8003ca4 <xPortStartScheduler>
 8002ba6:	e00e      	b.n	8002bc6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bae:	d10a      	bne.n	8002bc6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	607b      	str	r3, [r7, #4]
    }
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <vTaskStartScheduler+0xa0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000021c 	.word	0x2000021c
 8002bd8:	08004eec 	.word	0x08004eec
 8002bdc:	08003201 	.word	0x08003201
 8002be0:	20000218 	.word	0x20000218
 8002be4:	20000204 	.word	0x20000204
 8002be8:	200001fc 	.word	0x200001fc
 8002bec:	2000000c 	.word	0x2000000c

08002bf0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <vTaskSuspendAll+0x18>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <vTaskSuspendAll+0x18>)
 8002bfc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	20000220 	.word	0x20000220

08002c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <xTaskResumeAll+0x114>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <xTaskResumeAll+0x2c>
        __asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	603b      	str	r3, [r7, #0]
    }
 8002c34:	bf00      	nop
 8002c36:	e7fe      	b.n	8002c36 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c38:	f001 f8d6 	bl	8003de8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <xTaskResumeAll+0x114>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	4a37      	ldr	r2, [pc, #220]	; (8002d20 <xTaskResumeAll+0x114>)
 8002c44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <xTaskResumeAll+0x114>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d161      	bne.n	8002d12 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c4e:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <xTaskResumeAll+0x118>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d05d      	beq.n	8002d12 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c56:	e02e      	b.n	8002cb6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <xTaskResumeAll+0x11c>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3318      	adds	r3, #24
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f921 	bl	8001eac <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f91c 	bl	8001eac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	2201      	movs	r2, #1
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <xTaskResumeAll+0x120>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	4a2a      	ldr	r2, [pc, #168]	; (8002d2c <xTaskResumeAll+0x120>)
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <xTaskResumeAll+0x124>)
 8002c94:	441a      	add	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff f8a8 	bl	8001df2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <xTaskResumeAll+0x128>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <xTaskResumeAll+0x12c>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <xTaskResumeAll+0x11c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1cc      	bne.n	8002c58 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cc4:	f000 fb32 	bl	800332c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <xTaskResumeAll+0x130>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cd4:	f000 f846 	bl	8002d64 <xTaskIncrementTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <xTaskResumeAll+0x12c>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f1      	bne.n	8002cd4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <xTaskResumeAll+0x130>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <xTaskResumeAll+0x12c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <xTaskResumeAll+0x134>)
 8002d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d12:	f001 f899 	bl	8003e48 <vPortExitCritical>

    return xAlreadyYielded;
 8002d16:	68bb      	ldr	r3, [r7, #8]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000220 	.word	0x20000220
 8002d24:	200001f8 	.word	0x200001f8
 8002d28:	200001b8 	.word	0x200001b8
 8002d2c:	20000200 	.word	0x20000200
 8002d30:	20000124 	.word	0x20000124
 8002d34:	20000120 	.word	0x20000120
 8002d38:	2000020c 	.word	0x2000020c
 8002d3c:	20000208 	.word	0x20000208
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <xTaskGetTickCount+0x1c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	200001fc 	.word	0x200001fc

08002d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ea8 <xTaskIncrementTick+0x144>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 808e 	bne.w	8002e94 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d78:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <xTaskIncrementTick+0x148>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d80:	4a4a      	ldr	r2, [pc, #296]	; (8002eac <xTaskIncrementTick+0x148>)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d120      	bne.n	8002dce <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d8c:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <xTaskIncrementTick+0x14c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <xTaskIncrementTick+0x48>
        __asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	603b      	str	r3, [r7, #0]
    }
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <xTaskIncrementTick+0x46>
 8002dac:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <xTaskIncrementTick+0x14c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <xTaskIncrementTick+0x150>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a3e      	ldr	r2, [pc, #248]	; (8002eb0 <xTaskIncrementTick+0x14c>)
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4a3e      	ldr	r2, [pc, #248]	; (8002eb4 <xTaskIncrementTick+0x150>)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <xTaskIncrementTick+0x154>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	4a3c      	ldr	r2, [pc, #240]	; (8002eb8 <xTaskIncrementTick+0x154>)
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	f000 faaf 	bl	800332c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dce:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <xTaskIncrementTick+0x158>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d348      	bcc.n	8002e6a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd8:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <xTaskIncrementTick+0x14c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <xTaskIncrementTick+0x158>)
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de8:	601a      	str	r2, [r3, #0]
                    break;
 8002dea:	e03e      	b.n	8002e6a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <xTaskIncrementTick+0x14c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d203      	bcs.n	8002e0c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e04:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <xTaskIncrementTick+0x158>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e0a:	e02e      	b.n	8002e6a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff f84b 	bl	8001eac <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3318      	adds	r3, #24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f842 	bl	8001eac <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <xTaskIncrementTick+0x15c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <xTaskIncrementTick+0x15c>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <xTaskIncrementTick+0x160>)
 8002e48:	441a      	add	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f7fe ffce 	bl	8001df2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <xTaskIncrementTick+0x164>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d3b9      	bcc.n	8002dd8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e68:	e7b6      	b.n	8002dd8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <xTaskIncrementTick+0x164>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	4914      	ldr	r1, [pc, #80]	; (8002ec4 <xTaskIncrementTick+0x160>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d901      	bls.n	8002e86 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <xTaskIncrementTick+0x168>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e004      	b.n	8002e9e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <xTaskIncrementTick+0x16c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <xTaskIncrementTick+0x16c>)
 8002e9c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002e9e:	697b      	ldr	r3, [r7, #20]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000220 	.word	0x20000220
 8002eac:	200001fc 	.word	0x200001fc
 8002eb0:	200001b0 	.word	0x200001b0
 8002eb4:	200001b4 	.word	0x200001b4
 8002eb8:	20000210 	.word	0x20000210
 8002ebc:	20000218 	.word	0x20000218
 8002ec0:	20000200 	.word	0x20000200
 8002ec4:	20000124 	.word	0x20000124
 8002ec8:	20000120 	.word	0x20000120
 8002ecc:	2000020c 	.word	0x2000020c
 8002ed0:	20000208 	.word	0x20000208

08002ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eda:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <vTaskSwitchContext+0xa4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <vTaskSwitchContext+0xa8>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ee8:	e03f      	b.n	8002f6a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <vTaskSwitchContext+0xa8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <vTaskSwitchContext+0xac>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002efe:	7afb      	ldrb	r3, [r7, #11]
 8002f00:	f1c3 031f 	rsb	r3, r3, #31
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	491f      	ldr	r1, [pc, #124]	; (8002f84 <vTaskSwitchContext+0xb0>)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	607b      	str	r3, [r7, #4]
    }
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <vTaskSwitchContext+0x5a>
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <vTaskSwitchContext+0xb0>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	3308      	adds	r3, #8
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d104      	bne.n	8002f60 <vTaskSwitchContext+0x8c>
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <vTaskSwitchContext+0xb4>)
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000220 	.word	0x20000220
 8002f7c:	2000020c 	.word	0x2000020c
 8002f80:	20000200 	.word	0x20000200
 8002f84:	20000124 	.word	0x20000124
 8002f88:	20000120 	.word	0x20000120

08002f8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	60fb      	str	r3, [r7, #12]
    }
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <vTaskPlaceOnEventList+0x44>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe ff3d 	bl	8001e3a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	6838      	ldr	r0, [r7, #0]
 8002fc4:	f000 fa66 	bl	8003494 <prvAddCurrentTaskToDelayedList>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000120 	.word	0x20000120

08002fd4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	617b      	str	r3, [r7, #20]
    }
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <vTaskPlaceOnEventListRestricted+0x54>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3318      	adds	r3, #24
 8003002:	4619      	mov	r1, r3
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7fe fef4 	bl	8001df2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003014:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68b8      	ldr	r0, [r7, #8]
 800301a:	f000 fa3b 	bl	8003494 <prvAddCurrentTaskToDelayedList>
    }
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000120 	.word	0x20000120

0800302c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	60fb      	str	r3, [r7, #12]
    }
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	3318      	adds	r3, #24
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe ff25 	bl	8001eac <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <xTaskRemoveFromEventList+0xac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11c      	bne.n	80030a4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	3304      	adds	r3, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe ff1c 	bl	8001eac <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <xTaskRemoveFromEventList+0xb0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <xTaskRemoveFromEventList+0xb0>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <xTaskRemoveFromEventList+0xb4>)
 8003094:	441a      	add	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7fe fea8 	bl	8001df2 <vListInsertEnd>
 80030a2:	e005      	b.n	80030b0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	3318      	adds	r3, #24
 80030a8:	4619      	mov	r1, r3
 80030aa:	480e      	ldr	r0, [pc, #56]	; (80030e4 <xTaskRemoveFromEventList+0xb8>)
 80030ac:	f7fe fea1 	bl	8001df2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <xTaskRemoveFromEventList+0xbc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d905      	bls.n	80030ca <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80030be:	2301      	movs	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <xTaskRemoveFromEventList+0xc0>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e001      	b.n	80030ce <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80030ce:	697b      	ldr	r3, [r7, #20]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000220 	.word	0x20000220
 80030dc:	20000200 	.word	0x20000200
 80030e0:	20000124 	.word	0x20000124
 80030e4:	200001b8 	.word	0x200001b8
 80030e8:	20000120 	.word	0x20000120
 80030ec:	2000020c 	.word	0x2000020c

080030f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <vTaskInternalSetTimeOutState+0x24>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <vTaskInternalSetTimeOutState+0x28>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	605a      	str	r2, [r3, #4]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	20000210 	.word	0x20000210
 8003118:	200001fc 	.word	0x200001fc

0800311c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	613b      	str	r3, [r7, #16]
    }
 800313e:	bf00      	nop
 8003140:	e7fe      	b.n	8003140 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	60fb      	str	r3, [r7, #12]
    }
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800315e:	f000 fe43 	bl	8003de8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <xTaskCheckForTimeOut+0xc4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317a:	d102      	bne.n	8003182 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e026      	b.n	80031d0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <xTaskCheckForTimeOut+0xc8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d00a      	beq.n	80031a4 <xTaskCheckForTimeOut+0x88>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	429a      	cmp	r2, r3
 8003196:	d305      	bcc.n	80031a4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e015      	b.n	80031d0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d20b      	bcs.n	80031c6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	1ad2      	subs	r2, r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff98 	bl	80030f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e004      	b.n	80031d0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80031d0:	f000 fe3a 	bl	8003e48 <vPortExitCritical>

    return xReturn;
 80031d4:	69fb      	ldr	r3, [r7, #28]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200001fc 	.word	0x200001fc
 80031e4:	20000210 	.word	0x20000210

080031e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <vTaskMissedYield+0x14>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	2000020c 	.word	0x2000020c

08003200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003208:	f000 f852 	bl	80032b0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <prvIdleTask+0x28>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d9f9      	bls.n	8003208 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <prvIdleTask+0x2c>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003224:	e7f0      	b.n	8003208 <prvIdleTask+0x8>
 8003226:	bf00      	nop
 8003228:	20000124 	.word	0x20000124
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	e00c      	b.n	8003256 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <prvInitialiseTaskLists+0x60>)
 8003248:	4413      	add	r3, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fda4 	bl	8001d98 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3301      	adds	r3, #1
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d9ef      	bls.n	800323c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <prvInitialiseTaskLists+0x64>)
 800325e:	f7fe fd9b 	bl	8001d98 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003262:	480d      	ldr	r0, [pc, #52]	; (8003298 <prvInitialiseTaskLists+0x68>)
 8003264:	f7fe fd98 	bl	8001d98 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <prvInitialiseTaskLists+0x6c>)
 800326a:	f7fe fd95 	bl	8001d98 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <prvInitialiseTaskLists+0x70>)
 8003270:	f7fe fd92 	bl	8001d98 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003274:	480b      	ldr	r0, [pc, #44]	; (80032a4 <prvInitialiseTaskLists+0x74>)
 8003276:	f7fe fd8f 	bl	8001d98 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <prvInitialiseTaskLists+0x78>)
 800327c:	4a05      	ldr	r2, [pc, #20]	; (8003294 <prvInitialiseTaskLists+0x64>)
 800327e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvInitialiseTaskLists+0x7c>)
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <prvInitialiseTaskLists+0x68>)
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000124 	.word	0x20000124
 8003294:	20000188 	.word	0x20000188
 8003298:	2000019c 	.word	0x2000019c
 800329c:	200001b8 	.word	0x200001b8
 80032a0:	200001cc 	.word	0x200001cc
 80032a4:	200001e4 	.word	0x200001e4
 80032a8:	200001b0 	.word	0x200001b0
 80032ac:	200001b4 	.word	0x200001b4

080032b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032b6:	e019      	b.n	80032ec <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80032b8:	f000 fd96 	bl	8003de8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <prvCheckTasksWaitingTermination+0x50>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fdef 	bl	8001eac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <prvCheckTasksWaitingTermination+0x54>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <prvCheckTasksWaitingTermination+0x54>)
 80032d6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <prvCheckTasksWaitingTermination+0x58>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3b01      	subs	r3, #1
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <prvCheckTasksWaitingTermination+0x58>)
 80032e0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80032e2:	f000 fdb1 	bl	8003e48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f810 	bl	800330c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <prvCheckTasksWaitingTermination+0x58>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e1      	bne.n	80032b8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200001cc 	.word	0x200001cc
 8003304:	200001f8 	.word	0x200001f8
 8003308:	200001e0 	.word	0x200001e0

0800330c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4618      	mov	r0, r3
 800331a:	f000 ff67 	bl	80041ec <vPortFree>
                vPortFree( pxTCB );
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 ff64 	bl	80041ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <prvResetNextTaskUnblockTime+0x30>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <prvResetNextTaskUnblockTime+0x34>)
 800333c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003340:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003342:	e005      	b.n	8003350 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <prvResetNextTaskUnblockTime+0x30>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <prvResetNextTaskUnblockTime+0x34>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	200001b0 	.word	0x200001b0
 8003360:	20000218 	.word	0x20000218

08003364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <xTaskGetSchedulerState+0x34>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003372:	2301      	movs	r3, #1
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	e008      	b.n	800338a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <xTaskGetSchedulerState+0x38>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003380:	2302      	movs	r3, #2
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	e001      	b.n	800338a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800338a:	687b      	ldr	r3, [r7, #4]
    }
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000204 	.word	0x20000204
 800339c:	20000220 	.word	0x20000220

080033a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <xTaskPriorityDisinherit+0xe8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d00a      	beq.n	80033d6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	60fb      	str	r3, [r7, #12]
    }
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	60bb      	str	r3, [r7, #8]
    }
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003406:	429a      	cmp	r2, r3
 8003408:	d039      	beq.n	800347e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d135      	bne.n	800347e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	3304      	adds	r3, #4
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fd48 	bl	8001eac <uxListRemove>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	2201      	movs	r2, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43da      	mvns	r2, r3
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <xTaskPriorityDisinherit+0xec>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4013      	ands	r3, r2
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <xTaskPriorityDisinherit+0xec>)
 8003436:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	f1c3 0205 	rsb	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	2201      	movs	r2, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <xTaskPriorityDisinherit+0xec>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	4a0c      	ldr	r2, [pc, #48]	; (800348c <xTaskPriorityDisinherit+0xec>)
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <xTaskPriorityDisinherit+0xf0>)
 800346c:	441a      	add	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	3304      	adds	r3, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f7fe fcbc 	bl	8001df2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800347e:	697b      	ldr	r3, [r7, #20]
    }
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000120 	.word	0x20000120
 800348c:	20000200 	.word	0x20000200
 8003490:	20000124 	.word	0x20000124

08003494 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <prvAddCurrentTaskToDelayedList+0xb0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fcfe 	bl	8001eac <uxListRemove>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2201      	movs	r2, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <prvAddCurrentTaskToDelayedList+0xb8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4013      	ands	r3, r2
 80034ca:	4a20      	ldr	r2, [pc, #128]	; (800354c <prvAddCurrentTaskToDelayedList+0xb8>)
 80034cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d4:	d10a      	bne.n	80034ec <prvAddCurrentTaskToDelayedList+0x58>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	481a      	ldr	r0, [pc, #104]	; (8003550 <prvAddCurrentTaskToDelayedList+0xbc>)
 80034e6:	f7fe fc84 	bl	8001df2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80034ea:	e026      	b.n	800353a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d209      	bcs.n	8003518 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f7fe fc92 	bl	8001e3a <vListInsert>
}
 8003516:	e010      	b.n	800353a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <prvAddCurrentTaskToDelayedList+0xc4>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3304      	adds	r3, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f7fe fc88 	bl	8001e3a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <prvAddCurrentTaskToDelayedList+0xc8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	d202      	bcs.n	800353a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003534:	4a09      	ldr	r2, [pc, #36]	; (800355c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6013      	str	r3, [r2, #0]
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200001fc 	.word	0x200001fc
 8003548:	20000120 	.word	0x20000120
 800354c:	20000200 	.word	0x20000200
 8003550:	200001e4 	.word	0x200001e4
 8003554:	200001b4 	.word	0x200001b4
 8003558:	200001b0 	.word	0x200001b0
 800355c:	20000218 	.word	0x20000218

08003560 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800356a:	f000 fad5 	bl	8003b18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <xTimerCreateTimerTask+0x54>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <xTimerCreateTimerTask+0x58>)
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2302      	movs	r3, #2
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003584:	490d      	ldr	r1, [pc, #52]	; (80035bc <xTimerCreateTimerTask+0x5c>)
 8003586:	480e      	ldr	r0, [pc, #56]	; (80035c0 <xTimerCreateTimerTask+0x60>)
 8003588:	f7ff f99a 	bl	80028c0 <xTaskCreate>
 800358c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	603b      	str	r3, [r7, #0]
    }
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80035aa:	687b      	ldr	r3, [r7, #4]
    }
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000254 	.word	0x20000254
 80035b8:	20000258 	.word	0x20000258
 80035bc:	08004ef4 	.word	0x08004ef4
 80035c0:	080036f9 	.word	0x080036f9

080035c4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
    }
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80035f2:	4b1a      	ldr	r3, [pc, #104]	; (800365c <xTimerGenericCommand+0x98>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02a      	beq.n	8003650 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b05      	cmp	r3, #5
 800360a:	dc18      	bgt.n	800363e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800360c:	f7ff feaa 	bl	8003364 <xTaskGetSchedulerState>
 8003610:	4603      	mov	r3, r0
 8003612:	2b02      	cmp	r3, #2
 8003614:	d109      	bne.n	800362a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <xTimerGenericCommand+0x98>)
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	f107 0114 	add.w	r1, r7, #20
 800361e:	2300      	movs	r3, #0
 8003620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003622:	f7fe fd57 	bl	80020d4 <xQueueGenericSend>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24
 8003628:	e012      	b.n	8003650 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <xTimerGenericCommand+0x98>)
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	f107 0114 	add.w	r1, r7, #20
 8003632:	2300      	movs	r3, #0
 8003634:	2200      	movs	r2, #0
 8003636:	f7fe fd4d 	bl	80020d4 <xQueueGenericSend>
 800363a:	6278      	str	r0, [r7, #36]	; 0x24
 800363c:	e008      	b.n	8003650 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <xTimerGenericCommand+0x98>)
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f107 0114 	add.w	r1, r7, #20
 8003646:	2300      	movs	r3, #0
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	f7fe fe41 	bl	80022d0 <xQueueGenericSendFromISR>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003652:	4618      	mov	r0, r3
 8003654:	3728      	adds	r7, #40	; 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000254 	.word	0x20000254

08003660 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <prvProcessExpiredTimer+0x94>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3304      	adds	r3, #4
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fc17 	bl	8001eac <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d022      	beq.n	80036d2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	18d1      	adds	r1, r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f000 f8d1 	bl	8003840 <prvInsertTimerInActiveList>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01f      	beq.n	80036e4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036a4:	2300      	movs	r3, #0
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	2100      	movs	r1, #0
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7ff ff88 	bl	80035c4 <xTimerGenericCommand>
 80036b4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d113      	bne.n	80036e4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	60fb      	str	r3, [r7, #12]
    }
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	4798      	blx	r3
    }
 80036ec:	bf00      	nop
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	2000024c 	.word	0x2000024c

080036f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003700:	f107 0308 	add.w	r3, r7, #8
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f857 	bl	80037b8 <prvGetNextExpireTime>
 800370a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4619      	mov	r1, r3
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f803 	bl	800371c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003716:	f000 f8d5 	bl	80038c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800371a:	e7f1      	b.n	8003700 <prvTimerTask+0x8>

0800371c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003726:	f7ff fa63 	bl	8002bf0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f866 	bl	8003800 <prvSampleTimeNow>
 8003734:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d130      	bne.n	800379e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <prvProcessTimerOrBlockTask+0x3c>
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	429a      	cmp	r2, r3
 8003748:	d806      	bhi.n	8003758 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800374a:	f7ff fa5f 	bl	8002c0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff85 	bl	8003660 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003756:	e024      	b.n	80037a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <prvProcessTimerOrBlockTask+0x90>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <prvProcessTimerOrBlockTask+0x50>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <prvProcessTimerOrBlockTask+0x52>
 800376c:	2300      	movs	r3, #0
 800376e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <prvProcessTimerOrBlockTask+0x94>)
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	f7ff f86b 	bl	8002858 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003782:	f7ff fa43 	bl	8002c0c <xTaskResumeAll>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <prvProcessTimerOrBlockTask+0x98>)
 800378e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	f3bf 8f6f 	isb	sy
    }
 800379c:	e001      	b.n	80037a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800379e:	f7ff fa35 	bl	8002c0c <xTaskResumeAll>
    }
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000250 	.word	0x20000250
 80037b0:	20000254 	.word	0x20000254
 80037b4:	e000ed04 	.word	0xe000ed04

080037b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <prvGetNextExpireTime+0x44>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <prvGetNextExpireTime+0x16>
 80037ca:	2201      	movs	r2, #1
 80037cc:	e000      	b.n	80037d0 <prvGetNextExpireTime+0x18>
 80037ce:	2200      	movs	r2, #0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <prvGetNextExpireTime+0x44>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e001      	b.n	80037ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037ec:	68fb      	ldr	r3, [r7, #12]
    }
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	2000024c 	.word	0x2000024c

08003800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003808:	f7ff fa9c 	bl	8002d44 <xTaskGetTickCount>
 800380c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <prvSampleTimeNow+0x3c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	429a      	cmp	r2, r3
 8003816:	d205      	bcs.n	8003824 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003818:	f000 f91a 	bl	8003a50 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e002      	b.n	800382a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800382a:	4a04      	ldr	r2, [pc, #16]	; (800383c <prvSampleTimeNow+0x3c>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003830:	68fb      	ldr	r3, [r7, #12]
    }
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	2000025c 	.word	0x2000025c

08003840 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d812      	bhi.n	800388c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e01b      	b.n	80038b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <prvInsertTimerInActiveList+0x7c>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f7fe fad8 	bl	8001e3a <vListInsert>
 800388a:	e012      	b.n	80038b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d206      	bcs.n	80038a2 <prvInsertTimerInActiveList+0x62>
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800389c:	2301      	movs	r3, #1
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e007      	b.n	80038b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <prvInsertTimerInActiveList+0x80>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f7fe fac4 	bl	8001e3a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80038b2:	697b      	ldr	r3, [r7, #20]
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000250 	.word	0x20000250
 80038c0:	2000024c 	.word	0x2000024c

080038c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	; 0x30
 80038c8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038ca:	e0ae      	b.n	8003a2a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f2c0 80aa 	blt.w	8003a28 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	3304      	adds	r3, #4
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe fae1 	bl	8001eac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff87 	bl	8003800 <prvSampleTimeNow>
 80038f2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b09      	cmp	r3, #9
 80038f8:	f200 8097 	bhi.w	8003a2a <prvProcessReceivedCommands+0x166>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <prvProcessReceivedCommands+0x40>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	0800392d 	.word	0x0800392d
 8003908:	0800392d 	.word	0x0800392d
 800390c:	0800392d 	.word	0x0800392d
 8003910:	080039a1 	.word	0x080039a1
 8003914:	080039b5 	.word	0x080039b5
 8003918:	080039ff 	.word	0x080039ff
 800391c:	0800392d 	.word	0x0800392d
 8003920:	0800392d 	.word	0x0800392d
 8003924:	080039a1 	.word	0x080039a1
 8003928:	080039b5 	.word	0x080039b5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	18d1      	adds	r1, r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800394c:	f7ff ff78 	bl	8003840 <prvInsertTimerInActiveList>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d069      	beq.n	8003a2a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800395c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d05e      	beq.n	8003a2a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	441a      	add	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	2100      	movs	r1, #0
 800397c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800397e:	f7ff fe21 	bl	80035c4 <xTimerGenericCommand>
 8003982:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d14f      	bne.n	8003a2a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	61bb      	str	r3, [r7, #24]
    }
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80039b2:	e03a      	b.n	8003a2a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <prvProcessReceivedCommands+0x126>
        __asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	617b      	str	r3, [r7, #20]
    }
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	18d1      	adds	r1, r2, r3
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039f8:	f7ff ff22 	bl	8003840 <prvInsertTimerInActiveList>
                        break;
 80039fc:	e015      	b.n	8003a2a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a0e:	f000 fbed 	bl	80041ec <vPortFree>
 8003a12:	e00a      	b.n	8003a2a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a26:	e000      	b.n	8003a2a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003a28:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <prvProcessReceivedCommands+0x188>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f107 0108 	add.w	r1, r7, #8
 8003a32:	2200      	movs	r2, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fcf5 	bl	8002424 <xQueueReceive>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f47f af45 	bne.w	80038cc <prvProcessReceivedCommands+0x8>
        }
    }
 8003a42:	bf00      	nop
 8003a44:	bf00      	nop
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000254 	.word	0x20000254

08003a50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a56:	e048      	b.n	8003aea <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a58:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <prvSwitchTimerLists+0xc0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a62:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <prvSwitchTimerLists+0xc0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fa1b 	bl	8001eac <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02e      	beq.n	8003aea <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90e      	bls.n	8003abc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003aaa:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <prvSwitchTimerLists+0xc0>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fe f9c0 	bl	8001e3a <vListInsert>
 8003aba:	e016      	b.n	8003aea <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff fd7c 	bl	80035c4 <xTimerGenericCommand>
 8003acc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	603b      	str	r3, [r7, #0]
    }
 8003ae6:	bf00      	nop
 8003ae8:	e7fe      	b.n	8003ae8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <prvSwitchTimerLists+0xc0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1b1      	bne.n	8003a58 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <prvSwitchTimerLists+0xc0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <prvSwitchTimerLists+0xc4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <prvSwitchTimerLists+0xc0>)
 8003b00:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <prvSwitchTimerLists+0xc4>)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	6013      	str	r3, [r2, #0]
    }
 8003b08:	bf00      	nop
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000024c 	.word	0x2000024c
 8003b14:	20000250 	.word	0x20000250

08003b18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b1c:	f000 f964 	bl	8003de8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <prvCheckForValidListAndQueue+0x54>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11d      	bne.n	8003b64 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b28:	4811      	ldr	r0, [pc, #68]	; (8003b70 <prvCheckForValidListAndQueue+0x58>)
 8003b2a:	f7fe f935 	bl	8001d98 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b2e:	4811      	ldr	r0, [pc, #68]	; (8003b74 <prvCheckForValidListAndQueue+0x5c>)
 8003b30:	f7fe f932 	bl	8001d98 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b34:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <prvCheckForValidListAndQueue+0x60>)
 8003b36:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <prvCheckForValidListAndQueue+0x58>)
 8003b38:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <prvCheckForValidListAndQueue+0x64>)
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	; (8003b74 <prvCheckForValidListAndQueue+0x5c>)
 8003b3e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b40:	2200      	movs	r2, #0
 8003b42:	210c      	movs	r1, #12
 8003b44:	200a      	movs	r0, #10
 8003b46:	f7fe fa43 	bl	8001fd0 <xQueueGenericCreate>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <prvCheckForValidListAndQueue+0x54>)
 8003b4e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <prvCheckForValidListAndQueue+0x54>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <prvCheckForValidListAndQueue+0x54>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4908      	ldr	r1, [pc, #32]	; (8003b80 <prvCheckForValidListAndQueue+0x68>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fe50 	bl	8002804 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b64:	f000 f970 	bl	8003e48 <vPortExitCritical>
    }
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000254 	.word	0x20000254
 8003b70:	20000224 	.word	0x20000224
 8003b74:	20000238 	.word	0x20000238
 8003b78:	2000024c 	.word	0x2000024c
 8003b7c:	20000250 	.word	0x20000250
 8003b80:	08004efc 	.word	0x08004efc

08003b84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b04      	subs	r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b04      	subs	r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b04      	subs	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003bb4:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <pxPortInitialiseStack+0x64>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3b14      	subs	r3, #20
 8003bbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b04      	subs	r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f06f 0202 	mvn.w	r2, #2
 8003bd2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3b20      	subs	r3, #32
 8003bd8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	08003bed 	.word	0x08003bed

08003bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <prvTaskExitError+0x54>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfe:	d00a      	beq.n	8003c16 <prvTaskExitError+0x2a>
        __asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
    }
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <prvTaskExitError+0x28>
        __asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
    }
 8003c28:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c2a:	bf00      	nop
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0fc      	beq.n	8003c2c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	20000010 	.word	0x20000010
	...

08003c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <pxCurrentTCBConst2>)
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	6808      	ldr	r0, [r1, #0]
 8003c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5a:	f380 8809 	msr	PSP, r0
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f380 8811 	msr	BASEPRI, r0
 8003c6a:	4770      	bx	lr
 8003c6c:	f3af 8000 	nop.w

08003c70 <pxCurrentTCBConst2>:
 8003c70:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop

08003c78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c78:	4808      	ldr	r0, [pc, #32]	; (8003c9c <prvPortStartFirstTask+0x24>)
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	6800      	ldr	r0, [r0, #0]
 8003c7e:	f380 8808 	msr	MSP, r0
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f380 8814 	msr	CONTROL, r0
 8003c8a:	b662      	cpsie	i
 8003c8c:	b661      	cpsie	f
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	df00      	svc	0
 8003c98:	bf00      	nop
 8003c9a:	0000      	.short	0x0000
 8003c9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop

08003ca4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003caa:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <xPortStartScheduler+0x120>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a46      	ldr	r2, [pc, #280]	; (8003dc8 <xPortStartScheduler+0x124>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10a      	bne.n	8003cca <xPortStartScheduler+0x26>
        __asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	613b      	str	r3, [r7, #16]
    }
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <xPortStartScheduler+0x120>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3f      	ldr	r2, [pc, #252]	; (8003dcc <xPortStartScheduler+0x128>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d10a      	bne.n	8003cea <xPortStartScheduler+0x46>
        __asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60fb      	str	r3, [r7, #12]
    }
 8003ce6:	bf00      	nop
 8003ce8:	e7fe      	b.n	8003ce8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <xPortStartScheduler+0x12c>)
 8003cec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	22ff      	movs	r2, #255	; 0xff
 8003cfa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <xPortStartScheduler+0x130>)
 8003d10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d14:	2207      	movs	r2, #7
 8003d16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d18:	e009      	b.n	8003d2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003d1a:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d0ef      	beq.n	8003d1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d3a:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d00a      	beq.n	8003d5c <xPortStartScheduler+0xb8>
        __asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	60bb      	str	r3, [r7, #8]
    }
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d6e:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <xPortStartScheduler+0x134>)
 8003d70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <xPortStartScheduler+0x138>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <xPortStartScheduler+0x138>)
 8003d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <xPortStartScheduler+0x138>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <xPortStartScheduler+0x138>)
 8003d8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d92:	f000 f8db 	bl	8003f4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <xPortStartScheduler+0x13c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d9c:	f000 f8fa 	bl	8003f94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <xPortStartScheduler+0x140>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <xPortStartScheduler+0x140>)
 8003da6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003daa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003dac:	f7ff ff64 	bl	8003c78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003db0:	f7ff f890 	bl	8002ed4 <vTaskSwitchContext>
    prvTaskExitError();
 8003db4:	f7ff ff1a 	bl	8003bec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00
 8003dc8:	410fc271 	.word	0x410fc271
 8003dcc:	410fc270 	.word	0x410fc270
 8003dd0:	e000e400 	.word	0xe000e400
 8003dd4:	20000260 	.word	0x20000260
 8003dd8:	20000264 	.word	0x20000264
 8003ddc:	e000ed20 	.word	0xe000ed20
 8003de0:	20000010 	.word	0x20000010
 8003de4:	e000ef34 	.word	0xe000ef34

08003de8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
        __asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
    }
 8003e00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <vPortEnterCritical+0x58>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <vPortEnterCritical+0x58>)
 8003e0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <vPortEnterCritical+0x58>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10f      	bne.n	8003e34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <vPortEnterCritical+0x5c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	603b      	str	r3, [r7, #0]
    }
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <vPortEnterCritical+0x4a>
    }
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	20000010 	.word	0x20000010
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <vPortExitCritical+0x50>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <vPortExitCritical+0x24>
        __asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	607b      	str	r3, [r7, #4]
    }
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <vPortExitCritical+0x50>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <vPortExitCritical+0x50>)
 8003e74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <vPortExitCritical+0x50>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d105      	bne.n	8003e8a <vPortExitCritical+0x42>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f383 8811 	msr	BASEPRI, r3
    }
 8003e88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000010 	.word	0x20000010
 8003e9c:	00000000 	.word	0x00000000

08003ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ea0:	f3ef 8009 	mrs	r0, PSP
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <pxCurrentTCBConst>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	f01e 0f10 	tst.w	lr, #16
 8003eb0:	bf08      	it	eq
 8003eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	6010      	str	r0, [r2, #0]
 8003ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ec4:	f380 8811 	msr	BASEPRI, r0
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f7ff f800 	bl	8002ed4 <vTaskSwitchContext>
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f380 8811 	msr	BASEPRI, r0
 8003edc:	bc09      	pop	{r0, r3}
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	6808      	ldr	r0, [r1, #0]
 8003ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee6:	f01e 0f10 	tst.w	lr, #16
 8003eea:	bf08      	it	eq
 8003eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ef0:	f380 8809 	msr	PSP, r0
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	f3af 8000 	nop.w

08003f00 <pxCurrentTCBConst>:
 8003f00:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
    }
 8003f20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f22:	f7fe ff1f 	bl	8002d64 <xTaskIncrementTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <SysTick_Handler+0x40>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
    }
 8003f3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <vPortSetupTimerInterrupt+0x38>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <vPortSetupTimerInterrupt+0x3c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <vPortSetupTimerInterrupt+0x40>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <vPortSetupTimerInterrupt+0x44>)
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010
 8003f84:	e000e018 	.word	0xe000e018
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	10624dd3 	.word	0x10624dd3
 8003f90:	e000e014 	.word	0xe000e014

08003f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fa4 <vPortEnableVFP+0x10>
 8003f98:	6801      	ldr	r1, [r0, #0]
 8003f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f9e:	6001      	str	r1, [r0, #0]
 8003fa0:	4770      	bx	lr
 8003fa2:	0000      	.short	0x0000
 8003fa4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop

08003fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003fb2:	f3ef 8305 	mrs	r3, IPSR
 8003fb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d914      	bls.n	8003fe8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fbe:	4a17      	ldr	r2, [pc, #92]	; (800401c <vPortValidateInterruptPriority+0x70>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <vPortValidateInterruptPriority+0x74>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7afa      	ldrb	r2, [r7, #11]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d20a      	bcs.n	8003fe8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
    }
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <vPortValidateInterruptPriority+0x78>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <vPortValidateInterruptPriority+0x7c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d90a      	bls.n	800400e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	603b      	str	r3, [r7, #0]
    }
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <vPortValidateInterruptPriority+0x60>
    }
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000e3f0 	.word	0xe000e3f0
 8004020:	20000260 	.word	0x20000260
 8004024:	e000ed0c 	.word	0xe000ed0c
 8004028:	20000264 	.word	0x20000264

0800402c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004038:	f7fe fdda 	bl	8002bf0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800403c:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <pvPortMalloc+0x1a8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004044:	f000 f934 	bl	80042b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004048:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <pvPortMalloc+0x1ac>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 80a7 	bne.w	80041a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02d      	beq.n	80040b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800405c:	2208      	movs	r2, #8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d227      	bcs.n	80040b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004068:	2208      	movs	r2, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	2b00      	cmp	r3, #0
 8004078:	d021      	beq.n	80040be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	3308      	adds	r3, #8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d214      	bcs.n	80040b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f023 0307 	bic.w	r3, r3, #7
 800408e:	3308      	adds	r3, #8
 8004090:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <pvPortMalloc+0x92>
        __asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	617b      	str	r3, [r7, #20]
    }
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040b6:	e002      	b.n	80040be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e000      	b.n	80040c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06e      	beq.n	80041a4 <pvPortMalloc+0x178>
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <pvPortMalloc+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d869      	bhi.n	80041a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <pvPortMalloc+0x1b4>)
 80040d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <pvPortMalloc+0x1b4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040da:	e004      	b.n	80040e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d903      	bls.n	80040f8 <pvPortMalloc+0xcc>
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f1      	bne.n	80040dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <pvPortMalloc+0x1a8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fe:	429a      	cmp	r2, r3
 8004100:	d050      	beq.n	80041a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	4413      	add	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad2      	subs	r2, r2, r3
 800411c:	2308      	movs	r3, #8
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	429a      	cmp	r2, r3
 8004122:	d91f      	bls.n	8004164 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <pvPortMalloc+0x120>
        __asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	613b      	str	r3, [r7, #16]
    }
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800415e:	69b8      	ldr	r0, [r7, #24]
 8004160:	f000 f908 	bl	8004374 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <pvPortMalloc+0x1b0>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <pvPortMalloc+0x1b0>)
 8004170:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <pvPortMalloc+0x1b0>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <pvPortMalloc+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d203      	bcs.n	8004186 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <pvPortMalloc+0x1b0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <pvPortMalloc+0x1b8>)
 8004184:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <pvPortMalloc+0x1ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	431a      	orrs	r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <pvPortMalloc+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <pvPortMalloc+0x1bc>)
 80041a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041a4:	f7fe fd32 	bl	8002c0c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <pvPortMalloc+0x19c>
        __asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60fb      	str	r3, [r7, #12]
    }
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80041c8:	69fb      	ldr	r3, [r7, #28]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20012e70 	.word	0x20012e70
 80041d8:	20012e84 	.word	0x20012e84
 80041dc:	20012e74 	.word	0x20012e74
 80041e0:	20012e68 	.word	0x20012e68
 80041e4:	20012e78 	.word	0x20012e78
 80041e8:	20012e7c 	.word	0x20012e7c

080041ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04d      	beq.n	800429a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041fe:	2308      	movs	r3, #8
 8004200:	425b      	negs	r3, r3
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <vPortFree+0xb8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <vPortFree+0x44>
        __asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60fb      	str	r3, [r7, #12]
    }
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <vPortFree+0x62>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60bb      	str	r3, [r7, #8]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <vPortFree+0xb8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11a      	bne.n	800429a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <vPortFree+0xb8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004274:	f7fe fcbc 	bl	8002bf0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <vPortFree+0xbc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4413      	add	r3, r2
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <vPortFree+0xbc>)
 8004284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004286:	6938      	ldr	r0, [r7, #16]
 8004288:	f000 f874 	bl	8004374 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <vPortFree+0xc0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	4a06      	ldr	r2, [pc, #24]	; (80042ac <vPortFree+0xc0>)
 8004294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004296:	f7fe fcb9 	bl	8002c0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20012e84 	.word	0x20012e84
 80042a8:	20012e74 	.word	0x20012e74
 80042ac:	20012e80 	.word	0x20012e80

080042b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <prvHeapInit+0xac>)
 80042be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3307      	adds	r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <prvHeapInit+0xac>)
 80042e0:	4413      	add	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <prvHeapInit+0xb0>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <prvHeapInit+0xb0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4413      	add	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042fc:	2208      	movs	r2, #8
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a15      	ldr	r2, [pc, #84]	; (8004364 <prvHeapInit+0xb4>)
 8004310:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <prvHeapInit+0xb4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <prvHeapInit+0xb4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <prvHeapInit+0xb4>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <prvHeapInit+0xb8>)
 800433e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4a09      	ldr	r2, [pc, #36]	; (800436c <prvHeapInit+0xbc>)
 8004346:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <prvHeapInit+0xc0>)
 800434a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20000268 	.word	0x20000268
 8004360:	20012e68 	.word	0x20012e68
 8004364:	20012e70 	.word	0x20012e70
 8004368:	20012e78 	.word	0x20012e78
 800436c:	20012e74 	.word	0x20012e74
 8004370:	20012e84 	.word	0x20012e84

08004374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <prvInsertBlockIntoFreeList+0xac>)
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e002      	b.n	8004388 <prvInsertBlockIntoFreeList+0x14>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d8f7      	bhi.n	8004382 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d108      	bne.n	80043b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	441a      	add	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d118      	bne.n	80043fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <prvInsertBlockIntoFreeList+0xb0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d00d      	beq.n	80043f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e008      	b.n	8004404 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <prvInsertBlockIntoFreeList+0xb0>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e003      	b.n	8004404 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d002      	beq.n	8004412 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20012e68 	.word	0x20012e68
 8004424:	20012e70 	.word	0x20012e70

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 fd3a 	bl	8004eb4 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08004f88 	.word	0x08004f88
 8004464:	08004f88 	.word	0x08004f88
 8004468:	08004f88 	.word	0x08004f88
 800446c:	08004f8c 	.word	0x08004f8c

08004470 <memcpy>:
 8004470:	440a      	add	r2, r1
 8004472:	4291      	cmp	r1, r2
 8004474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004478:	d100      	bne.n	800447c <memcpy+0xc>
 800447a:	4770      	bx	lr
 800447c:	b510      	push	{r4, lr}
 800447e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004486:	4291      	cmp	r1, r2
 8004488:	d1f9      	bne.n	800447e <memcpy+0xe>
 800448a:	bd10      	pop	{r4, pc}

0800448c <memset>:
 800448c:	4402      	add	r2, r0
 800448e:	4603      	mov	r3, r0
 8004490:	4293      	cmp	r3, r2
 8004492:	d100      	bne.n	8004496 <memset+0xa>
 8004494:	4770      	bx	lr
 8004496:	f803 1b01 	strb.w	r1, [r3], #1
 800449a:	e7f9      	b.n	8004490 <memset+0x4>

0800449c <_puts_r>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	460e      	mov	r6, r1
 80044a0:	4605      	mov	r5, r0
 80044a2:	b118      	cbz	r0, 80044ac <_puts_r+0x10>
 80044a4:	6983      	ldr	r3, [r0, #24]
 80044a6:	b90b      	cbnz	r3, 80044ac <_puts_r+0x10>
 80044a8:	f000 fa48 	bl	800493c <__sinit>
 80044ac:	69ab      	ldr	r3, [r5, #24]
 80044ae:	68ac      	ldr	r4, [r5, #8]
 80044b0:	b913      	cbnz	r3, 80044b8 <_puts_r+0x1c>
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 fa42 	bl	800493c <__sinit>
 80044b8:	4b2c      	ldr	r3, [pc, #176]	; (800456c <_puts_r+0xd0>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d120      	bne.n	8004500 <_puts_r+0x64>
 80044be:	686c      	ldr	r4, [r5, #4]
 80044c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044c2:	07db      	lsls	r3, r3, #31
 80044c4:	d405      	bmi.n	80044d2 <_puts_r+0x36>
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	0598      	lsls	r0, r3, #22
 80044ca:	d402      	bmi.n	80044d2 <_puts_r+0x36>
 80044cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ce:	f000 fad3 	bl	8004a78 <__retarget_lock_acquire_recursive>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	0719      	lsls	r1, r3, #28
 80044d6:	d51d      	bpl.n	8004514 <_puts_r+0x78>
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	b1db      	cbz	r3, 8004514 <_puts_r+0x78>
 80044dc:	3e01      	subs	r6, #1
 80044de:	68a3      	ldr	r3, [r4, #8]
 80044e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044e4:	3b01      	subs	r3, #1
 80044e6:	60a3      	str	r3, [r4, #8]
 80044e8:	bb39      	cbnz	r1, 800453a <_puts_r+0x9e>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da38      	bge.n	8004560 <_puts_r+0xc4>
 80044ee:	4622      	mov	r2, r4
 80044f0:	210a      	movs	r1, #10
 80044f2:	4628      	mov	r0, r5
 80044f4:	f000 f848 	bl	8004588 <__swbuf_r>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d011      	beq.n	8004520 <_puts_r+0x84>
 80044fc:	250a      	movs	r5, #10
 80044fe:	e011      	b.n	8004524 <_puts_r+0x88>
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <_puts_r+0xd4>)
 8004502:	429c      	cmp	r4, r3
 8004504:	d101      	bne.n	800450a <_puts_r+0x6e>
 8004506:	68ac      	ldr	r4, [r5, #8]
 8004508:	e7da      	b.n	80044c0 <_puts_r+0x24>
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <_puts_r+0xd8>)
 800450c:	429c      	cmp	r4, r3
 800450e:	bf08      	it	eq
 8004510:	68ec      	ldreq	r4, [r5, #12]
 8004512:	e7d5      	b.n	80044c0 <_puts_r+0x24>
 8004514:	4621      	mov	r1, r4
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f888 	bl	800462c <__swsetup_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	d0dd      	beq.n	80044dc <_puts_r+0x40>
 8004520:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004526:	07da      	lsls	r2, r3, #31
 8004528:	d405      	bmi.n	8004536 <_puts_r+0x9a>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	059b      	lsls	r3, r3, #22
 800452e:	d402      	bmi.n	8004536 <_puts_r+0x9a>
 8004530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004532:	f000 faa2 	bl	8004a7a <__retarget_lock_release_recursive>
 8004536:	4628      	mov	r0, r5
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	2b00      	cmp	r3, #0
 800453c:	da04      	bge.n	8004548 <_puts_r+0xac>
 800453e:	69a2      	ldr	r2, [r4, #24]
 8004540:	429a      	cmp	r2, r3
 8004542:	dc06      	bgt.n	8004552 <_puts_r+0xb6>
 8004544:	290a      	cmp	r1, #10
 8004546:	d004      	beq.n	8004552 <_puts_r+0xb6>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	7019      	strb	r1, [r3, #0]
 8004550:	e7c5      	b.n	80044de <_puts_r+0x42>
 8004552:	4622      	mov	r2, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 f817 	bl	8004588 <__swbuf_r>
 800455a:	3001      	adds	r0, #1
 800455c:	d1bf      	bne.n	80044de <_puts_r+0x42>
 800455e:	e7df      	b.n	8004520 <_puts_r+0x84>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	250a      	movs	r5, #10
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	701d      	strb	r5, [r3, #0]
 800456a:	e7db      	b.n	8004524 <_puts_r+0x88>
 800456c:	08004f40 	.word	0x08004f40
 8004570:	08004f60 	.word	0x08004f60
 8004574:	08004f20 	.word	0x08004f20

08004578 <puts>:
 8004578:	4b02      	ldr	r3, [pc, #8]	; (8004584 <puts+0xc>)
 800457a:	4601      	mov	r1, r0
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	f7ff bf8d 	b.w	800449c <_puts_r>
 8004582:	bf00      	nop
 8004584:	20000014 	.word	0x20000014

08004588 <__swbuf_r>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	460e      	mov	r6, r1
 800458c:	4614      	mov	r4, r2
 800458e:	4605      	mov	r5, r0
 8004590:	b118      	cbz	r0, 800459a <__swbuf_r+0x12>
 8004592:	6983      	ldr	r3, [r0, #24]
 8004594:	b90b      	cbnz	r3, 800459a <__swbuf_r+0x12>
 8004596:	f000 f9d1 	bl	800493c <__sinit>
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <__swbuf_r+0x98>)
 800459c:	429c      	cmp	r4, r3
 800459e:	d12b      	bne.n	80045f8 <__swbuf_r+0x70>
 80045a0:	686c      	ldr	r4, [r5, #4]
 80045a2:	69a3      	ldr	r3, [r4, #24]
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	071a      	lsls	r2, r3, #28
 80045aa:	d52f      	bpl.n	800460c <__swbuf_r+0x84>
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	b36b      	cbz	r3, 800460c <__swbuf_r+0x84>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1ac0      	subs	r0, r0, r3
 80045b6:	6963      	ldr	r3, [r4, #20]
 80045b8:	b2f6      	uxtb	r6, r6
 80045ba:	4283      	cmp	r3, r0
 80045bc:	4637      	mov	r7, r6
 80045be:	dc04      	bgt.n	80045ca <__swbuf_r+0x42>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f926 	bl	8004814 <_fflush_r>
 80045c8:	bb30      	cbnz	r0, 8004618 <__swbuf_r+0x90>
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	6022      	str	r2, [r4, #0]
 80045d6:	701e      	strb	r6, [r3, #0]
 80045d8:	6963      	ldr	r3, [r4, #20]
 80045da:	3001      	adds	r0, #1
 80045dc:	4283      	cmp	r3, r0
 80045de:	d004      	beq.n	80045ea <__swbuf_r+0x62>
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	07db      	lsls	r3, r3, #31
 80045e4:	d506      	bpl.n	80045f4 <__swbuf_r+0x6c>
 80045e6:	2e0a      	cmp	r6, #10
 80045e8:	d104      	bne.n	80045f4 <__swbuf_r+0x6c>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f911 	bl	8004814 <_fflush_r>
 80045f2:	b988      	cbnz	r0, 8004618 <__swbuf_r+0x90>
 80045f4:	4638      	mov	r0, r7
 80045f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <__swbuf_r+0x9c>)
 80045fa:	429c      	cmp	r4, r3
 80045fc:	d101      	bne.n	8004602 <__swbuf_r+0x7a>
 80045fe:	68ac      	ldr	r4, [r5, #8]
 8004600:	e7cf      	b.n	80045a2 <__swbuf_r+0x1a>
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <__swbuf_r+0xa0>)
 8004604:	429c      	cmp	r4, r3
 8004606:	bf08      	it	eq
 8004608:	68ec      	ldreq	r4, [r5, #12]
 800460a:	e7ca      	b.n	80045a2 <__swbuf_r+0x1a>
 800460c:	4621      	mov	r1, r4
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f80c 	bl	800462c <__swsetup_r>
 8004614:	2800      	cmp	r0, #0
 8004616:	d0cb      	beq.n	80045b0 <__swbuf_r+0x28>
 8004618:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800461c:	e7ea      	b.n	80045f4 <__swbuf_r+0x6c>
 800461e:	bf00      	nop
 8004620:	08004f40 	.word	0x08004f40
 8004624:	08004f60 	.word	0x08004f60
 8004628:	08004f20 	.word	0x08004f20

0800462c <__swsetup_r>:
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <__swsetup_r+0xcc>)
 800462e:	b570      	push	{r4, r5, r6, lr}
 8004630:	681d      	ldr	r5, [r3, #0]
 8004632:	4606      	mov	r6, r0
 8004634:	460c      	mov	r4, r1
 8004636:	b125      	cbz	r5, 8004642 <__swsetup_r+0x16>
 8004638:	69ab      	ldr	r3, [r5, #24]
 800463a:	b913      	cbnz	r3, 8004642 <__swsetup_r+0x16>
 800463c:	4628      	mov	r0, r5
 800463e:	f000 f97d 	bl	800493c <__sinit>
 8004642:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <__swsetup_r+0xd0>)
 8004644:	429c      	cmp	r4, r3
 8004646:	d10f      	bne.n	8004668 <__swsetup_r+0x3c>
 8004648:	686c      	ldr	r4, [r5, #4]
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004650:	0719      	lsls	r1, r3, #28
 8004652:	d42c      	bmi.n	80046ae <__swsetup_r+0x82>
 8004654:	06dd      	lsls	r5, r3, #27
 8004656:	d411      	bmi.n	800467c <__swsetup_r+0x50>
 8004658:	2309      	movs	r3, #9
 800465a:	6033      	str	r3, [r6, #0]
 800465c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004666:	e03e      	b.n	80046e6 <__swsetup_r+0xba>
 8004668:	4b25      	ldr	r3, [pc, #148]	; (8004700 <__swsetup_r+0xd4>)
 800466a:	429c      	cmp	r4, r3
 800466c:	d101      	bne.n	8004672 <__swsetup_r+0x46>
 800466e:	68ac      	ldr	r4, [r5, #8]
 8004670:	e7eb      	b.n	800464a <__swsetup_r+0x1e>
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <__swsetup_r+0xd8>)
 8004674:	429c      	cmp	r4, r3
 8004676:	bf08      	it	eq
 8004678:	68ec      	ldreq	r4, [r5, #12]
 800467a:	e7e6      	b.n	800464a <__swsetup_r+0x1e>
 800467c:	0758      	lsls	r0, r3, #29
 800467e:	d512      	bpl.n	80046a6 <__swsetup_r+0x7a>
 8004680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004682:	b141      	cbz	r1, 8004696 <__swsetup_r+0x6a>
 8004684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004688:	4299      	cmp	r1, r3
 800468a:	d002      	beq.n	8004692 <__swsetup_r+0x66>
 800468c:	4630      	mov	r0, r6
 800468e:	f000 fa5b 	bl	8004b48 <_free_r>
 8004692:	2300      	movs	r3, #0
 8004694:	6363      	str	r3, [r4, #52]	; 0x34
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	2300      	movs	r3, #0
 80046a0:	6063      	str	r3, [r4, #4]
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	b94b      	cbnz	r3, 80046c6 <__swsetup_r+0x9a>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046bc:	d003      	beq.n	80046c6 <__swsetup_r+0x9a>
 80046be:	4621      	mov	r1, r4
 80046c0:	4630      	mov	r0, r6
 80046c2:	f000 fa01 	bl	8004ac8 <__smakebuf_r>
 80046c6:	89a0      	ldrh	r0, [r4, #12]
 80046c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046cc:	f010 0301 	ands.w	r3, r0, #1
 80046d0:	d00a      	beq.n	80046e8 <__swsetup_r+0xbc>
 80046d2:	2300      	movs	r3, #0
 80046d4:	60a3      	str	r3, [r4, #8]
 80046d6:	6963      	ldr	r3, [r4, #20]
 80046d8:	425b      	negs	r3, r3
 80046da:	61a3      	str	r3, [r4, #24]
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	b943      	cbnz	r3, 80046f2 <__swsetup_r+0xc6>
 80046e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046e4:	d1ba      	bne.n	800465c <__swsetup_r+0x30>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	0781      	lsls	r1, r0, #30
 80046ea:	bf58      	it	pl
 80046ec:	6963      	ldrpl	r3, [r4, #20]
 80046ee:	60a3      	str	r3, [r4, #8]
 80046f0:	e7f4      	b.n	80046dc <__swsetup_r+0xb0>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e7f7      	b.n	80046e6 <__swsetup_r+0xba>
 80046f6:	bf00      	nop
 80046f8:	20000014 	.word	0x20000014
 80046fc:	08004f40 	.word	0x08004f40
 8004700:	08004f60 	.word	0x08004f60
 8004704:	08004f20 	.word	0x08004f20

08004708 <__sflush_r>:
 8004708:	898a      	ldrh	r2, [r1, #12]
 800470a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	4605      	mov	r5, r0
 8004710:	0710      	lsls	r0, r2, #28
 8004712:	460c      	mov	r4, r1
 8004714:	d458      	bmi.n	80047c8 <__sflush_r+0xc0>
 8004716:	684b      	ldr	r3, [r1, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	dc05      	bgt.n	8004728 <__sflush_r+0x20>
 800471c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	dc02      	bgt.n	8004728 <__sflush_r+0x20>
 8004722:	2000      	movs	r0, #0
 8004724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800472a:	2e00      	cmp	r6, #0
 800472c:	d0f9      	beq.n	8004722 <__sflush_r+0x1a>
 800472e:	2300      	movs	r3, #0
 8004730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004734:	682f      	ldr	r7, [r5, #0]
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	d032      	beq.n	80047a0 <__sflush_r+0x98>
 800473a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	075a      	lsls	r2, r3, #29
 8004740:	d505      	bpl.n	800474e <__sflush_r+0x46>
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	1ac0      	subs	r0, r0, r3
 8004746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004748:	b10b      	cbz	r3, 800474e <__sflush_r+0x46>
 800474a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800474c:	1ac0      	subs	r0, r0, r3
 800474e:	2300      	movs	r3, #0
 8004750:	4602      	mov	r2, r0
 8004752:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004754:	6a21      	ldr	r1, [r4, #32]
 8004756:	4628      	mov	r0, r5
 8004758:	47b0      	blx	r6
 800475a:	1c43      	adds	r3, r0, #1
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	d106      	bne.n	800476e <__sflush_r+0x66>
 8004760:	6829      	ldr	r1, [r5, #0]
 8004762:	291d      	cmp	r1, #29
 8004764:	d82c      	bhi.n	80047c0 <__sflush_r+0xb8>
 8004766:	4a2a      	ldr	r2, [pc, #168]	; (8004810 <__sflush_r+0x108>)
 8004768:	40ca      	lsrs	r2, r1
 800476a:	07d6      	lsls	r6, r2, #31
 800476c:	d528      	bpl.n	80047c0 <__sflush_r+0xb8>
 800476e:	2200      	movs	r2, #0
 8004770:	6062      	str	r2, [r4, #4]
 8004772:	04d9      	lsls	r1, r3, #19
 8004774:	6922      	ldr	r2, [r4, #16]
 8004776:	6022      	str	r2, [r4, #0]
 8004778:	d504      	bpl.n	8004784 <__sflush_r+0x7c>
 800477a:	1c42      	adds	r2, r0, #1
 800477c:	d101      	bne.n	8004782 <__sflush_r+0x7a>
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	b903      	cbnz	r3, 8004784 <__sflush_r+0x7c>
 8004782:	6560      	str	r0, [r4, #84]	; 0x54
 8004784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004786:	602f      	str	r7, [r5, #0]
 8004788:	2900      	cmp	r1, #0
 800478a:	d0ca      	beq.n	8004722 <__sflush_r+0x1a>
 800478c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <__sflush_r+0x92>
 8004794:	4628      	mov	r0, r5
 8004796:	f000 f9d7 	bl	8004b48 <_free_r>
 800479a:	2000      	movs	r0, #0
 800479c:	6360      	str	r0, [r4, #52]	; 0x34
 800479e:	e7c1      	b.n	8004724 <__sflush_r+0x1c>
 80047a0:	6a21      	ldr	r1, [r4, #32]
 80047a2:	2301      	movs	r3, #1
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b0      	blx	r6
 80047a8:	1c41      	adds	r1, r0, #1
 80047aa:	d1c7      	bne.n	800473c <__sflush_r+0x34>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0c4      	beq.n	800473c <__sflush_r+0x34>
 80047b2:	2b1d      	cmp	r3, #29
 80047b4:	d001      	beq.n	80047ba <__sflush_r+0xb2>
 80047b6:	2b16      	cmp	r3, #22
 80047b8:	d101      	bne.n	80047be <__sflush_r+0xb6>
 80047ba:	602f      	str	r7, [r5, #0]
 80047bc:	e7b1      	b.n	8004722 <__sflush_r+0x1a>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7ad      	b.n	8004724 <__sflush_r+0x1c>
 80047c8:	690f      	ldr	r7, [r1, #16]
 80047ca:	2f00      	cmp	r7, #0
 80047cc:	d0a9      	beq.n	8004722 <__sflush_r+0x1a>
 80047ce:	0793      	lsls	r3, r2, #30
 80047d0:	680e      	ldr	r6, [r1, #0]
 80047d2:	bf08      	it	eq
 80047d4:	694b      	ldreq	r3, [r1, #20]
 80047d6:	600f      	str	r7, [r1, #0]
 80047d8:	bf18      	it	ne
 80047da:	2300      	movne	r3, #0
 80047dc:	eba6 0807 	sub.w	r8, r6, r7
 80047e0:	608b      	str	r3, [r1, #8]
 80047e2:	f1b8 0f00 	cmp.w	r8, #0
 80047e6:	dd9c      	ble.n	8004722 <__sflush_r+0x1a>
 80047e8:	6a21      	ldr	r1, [r4, #32]
 80047ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047ec:	4643      	mov	r3, r8
 80047ee:	463a      	mov	r2, r7
 80047f0:	4628      	mov	r0, r5
 80047f2:	47b0      	blx	r6
 80047f4:	2800      	cmp	r0, #0
 80047f6:	dc06      	bgt.n	8004806 <__sflush_r+0xfe>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004804:	e78e      	b.n	8004724 <__sflush_r+0x1c>
 8004806:	4407      	add	r7, r0
 8004808:	eba8 0800 	sub.w	r8, r8, r0
 800480c:	e7e9      	b.n	80047e2 <__sflush_r+0xda>
 800480e:	bf00      	nop
 8004810:	20400001 	.word	0x20400001

08004814 <_fflush_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	690b      	ldr	r3, [r1, #16]
 8004818:	4605      	mov	r5, r0
 800481a:	460c      	mov	r4, r1
 800481c:	b913      	cbnz	r3, 8004824 <_fflush_r+0x10>
 800481e:	2500      	movs	r5, #0
 8004820:	4628      	mov	r0, r5
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	b118      	cbz	r0, 800482e <_fflush_r+0x1a>
 8004826:	6983      	ldr	r3, [r0, #24]
 8004828:	b90b      	cbnz	r3, 800482e <_fflush_r+0x1a>
 800482a:	f000 f887 	bl	800493c <__sinit>
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <_fflush_r+0x6c>)
 8004830:	429c      	cmp	r4, r3
 8004832:	d11b      	bne.n	800486c <_fflush_r+0x58>
 8004834:	686c      	ldr	r4, [r5, #4]
 8004836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ef      	beq.n	800481e <_fflush_r+0xa>
 800483e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004840:	07d0      	lsls	r0, r2, #31
 8004842:	d404      	bmi.n	800484e <_fflush_r+0x3a>
 8004844:	0599      	lsls	r1, r3, #22
 8004846:	d402      	bmi.n	800484e <_fflush_r+0x3a>
 8004848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800484a:	f000 f915 	bl	8004a78 <__retarget_lock_acquire_recursive>
 800484e:	4628      	mov	r0, r5
 8004850:	4621      	mov	r1, r4
 8004852:	f7ff ff59 	bl	8004708 <__sflush_r>
 8004856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004858:	07da      	lsls	r2, r3, #31
 800485a:	4605      	mov	r5, r0
 800485c:	d4e0      	bmi.n	8004820 <_fflush_r+0xc>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	059b      	lsls	r3, r3, #22
 8004862:	d4dd      	bmi.n	8004820 <_fflush_r+0xc>
 8004864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004866:	f000 f908 	bl	8004a7a <__retarget_lock_release_recursive>
 800486a:	e7d9      	b.n	8004820 <_fflush_r+0xc>
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <_fflush_r+0x70>)
 800486e:	429c      	cmp	r4, r3
 8004870:	d101      	bne.n	8004876 <_fflush_r+0x62>
 8004872:	68ac      	ldr	r4, [r5, #8]
 8004874:	e7df      	b.n	8004836 <_fflush_r+0x22>
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <_fflush_r+0x74>)
 8004878:	429c      	cmp	r4, r3
 800487a:	bf08      	it	eq
 800487c:	68ec      	ldreq	r4, [r5, #12]
 800487e:	e7da      	b.n	8004836 <_fflush_r+0x22>
 8004880:	08004f40 	.word	0x08004f40
 8004884:	08004f60 	.word	0x08004f60
 8004888:	08004f20 	.word	0x08004f20

0800488c <std>:
 800488c:	2300      	movs	r3, #0
 800488e:	b510      	push	{r4, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	e9c0 3300 	strd	r3, r3, [r0]
 8004896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800489a:	6083      	str	r3, [r0, #8]
 800489c:	8181      	strh	r1, [r0, #12]
 800489e:	6643      	str	r3, [r0, #100]	; 0x64
 80048a0:	81c2      	strh	r2, [r0, #14]
 80048a2:	6183      	str	r3, [r0, #24]
 80048a4:	4619      	mov	r1, r3
 80048a6:	2208      	movs	r2, #8
 80048a8:	305c      	adds	r0, #92	; 0x5c
 80048aa:	f7ff fdef 	bl	800448c <memset>
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <std+0x38>)
 80048b0:	6263      	str	r3, [r4, #36]	; 0x24
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <std+0x3c>)
 80048b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <std+0x40>)
 80048b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <std+0x44>)
 80048bc:	6224      	str	r4, [r4, #32]
 80048be:	6323      	str	r3, [r4, #48]	; 0x30
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	bf00      	nop
 80048c4:	08004d29 	.word	0x08004d29
 80048c8:	08004d4b 	.word	0x08004d4b
 80048cc:	08004d83 	.word	0x08004d83
 80048d0:	08004da7 	.word	0x08004da7

080048d4 <_cleanup_r>:
 80048d4:	4901      	ldr	r1, [pc, #4]	; (80048dc <_cleanup_r+0x8>)
 80048d6:	f000 b8af 	b.w	8004a38 <_fwalk_reent>
 80048da:	bf00      	nop
 80048dc:	08004815 	.word	0x08004815

080048e0 <__sfmoreglue>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	2268      	movs	r2, #104	; 0x68
 80048e4:	1e4d      	subs	r5, r1, #1
 80048e6:	4355      	muls	r5, r2
 80048e8:	460e      	mov	r6, r1
 80048ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048ee:	f000 f997 	bl	8004c20 <_malloc_r>
 80048f2:	4604      	mov	r4, r0
 80048f4:	b140      	cbz	r0, 8004908 <__sfmoreglue+0x28>
 80048f6:	2100      	movs	r1, #0
 80048f8:	e9c0 1600 	strd	r1, r6, [r0]
 80048fc:	300c      	adds	r0, #12
 80048fe:	60a0      	str	r0, [r4, #8]
 8004900:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004904:	f7ff fdc2 	bl	800448c <memset>
 8004908:	4620      	mov	r0, r4
 800490a:	bd70      	pop	{r4, r5, r6, pc}

0800490c <__sfp_lock_acquire>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__sfp_lock_acquire+0x8>)
 800490e:	f000 b8b3 	b.w	8004a78 <__retarget_lock_acquire_recursive>
 8004912:	bf00      	nop
 8004914:	20012e89 	.word	0x20012e89

08004918 <__sfp_lock_release>:
 8004918:	4801      	ldr	r0, [pc, #4]	; (8004920 <__sfp_lock_release+0x8>)
 800491a:	f000 b8ae 	b.w	8004a7a <__retarget_lock_release_recursive>
 800491e:	bf00      	nop
 8004920:	20012e89 	.word	0x20012e89

08004924 <__sinit_lock_acquire>:
 8004924:	4801      	ldr	r0, [pc, #4]	; (800492c <__sinit_lock_acquire+0x8>)
 8004926:	f000 b8a7 	b.w	8004a78 <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	20012e8a 	.word	0x20012e8a

08004930 <__sinit_lock_release>:
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <__sinit_lock_release+0x8>)
 8004932:	f000 b8a2 	b.w	8004a7a <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	20012e8a 	.word	0x20012e8a

0800493c <__sinit>:
 800493c:	b510      	push	{r4, lr}
 800493e:	4604      	mov	r4, r0
 8004940:	f7ff fff0 	bl	8004924 <__sinit_lock_acquire>
 8004944:	69a3      	ldr	r3, [r4, #24]
 8004946:	b11b      	cbz	r3, 8004950 <__sinit+0x14>
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	f7ff bff0 	b.w	8004930 <__sinit_lock_release>
 8004950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004954:	6523      	str	r3, [r4, #80]	; 0x50
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <__sinit+0x68>)
 8004958:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <__sinit+0x6c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	62a2      	str	r2, [r4, #40]	; 0x28
 800495e:	42a3      	cmp	r3, r4
 8004960:	bf04      	itt	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	61a3      	streq	r3, [r4, #24]
 8004966:	4620      	mov	r0, r4
 8004968:	f000 f820 	bl	80049ac <__sfp>
 800496c:	6060      	str	r0, [r4, #4]
 800496e:	4620      	mov	r0, r4
 8004970:	f000 f81c 	bl	80049ac <__sfp>
 8004974:	60a0      	str	r0, [r4, #8]
 8004976:	4620      	mov	r0, r4
 8004978:	f000 f818 	bl	80049ac <__sfp>
 800497c:	2200      	movs	r2, #0
 800497e:	60e0      	str	r0, [r4, #12]
 8004980:	2104      	movs	r1, #4
 8004982:	6860      	ldr	r0, [r4, #4]
 8004984:	f7ff ff82 	bl	800488c <std>
 8004988:	68a0      	ldr	r0, [r4, #8]
 800498a:	2201      	movs	r2, #1
 800498c:	2109      	movs	r1, #9
 800498e:	f7ff ff7d 	bl	800488c <std>
 8004992:	68e0      	ldr	r0, [r4, #12]
 8004994:	2202      	movs	r2, #2
 8004996:	2112      	movs	r1, #18
 8004998:	f7ff ff78 	bl	800488c <std>
 800499c:	2301      	movs	r3, #1
 800499e:	61a3      	str	r3, [r4, #24]
 80049a0:	e7d2      	b.n	8004948 <__sinit+0xc>
 80049a2:	bf00      	nop
 80049a4:	08004f1c 	.word	0x08004f1c
 80049a8:	080048d5 	.word	0x080048d5

080049ac <__sfp>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	4607      	mov	r7, r0
 80049b0:	f7ff ffac 	bl	800490c <__sfp_lock_acquire>
 80049b4:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <__sfp+0x84>)
 80049b6:	681e      	ldr	r6, [r3, #0]
 80049b8:	69b3      	ldr	r3, [r6, #24]
 80049ba:	b913      	cbnz	r3, 80049c2 <__sfp+0x16>
 80049bc:	4630      	mov	r0, r6
 80049be:	f7ff ffbd 	bl	800493c <__sinit>
 80049c2:	3648      	adds	r6, #72	; 0x48
 80049c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	d503      	bpl.n	80049d4 <__sfp+0x28>
 80049cc:	6833      	ldr	r3, [r6, #0]
 80049ce:	b30b      	cbz	r3, 8004a14 <__sfp+0x68>
 80049d0:	6836      	ldr	r6, [r6, #0]
 80049d2:	e7f7      	b.n	80049c4 <__sfp+0x18>
 80049d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049d8:	b9d5      	cbnz	r5, 8004a10 <__sfp+0x64>
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <__sfp+0x88>)
 80049dc:	60e3      	str	r3, [r4, #12]
 80049de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049e2:	6665      	str	r5, [r4, #100]	; 0x64
 80049e4:	f000 f847 	bl	8004a76 <__retarget_lock_init_recursive>
 80049e8:	f7ff ff96 	bl	8004918 <__sfp_lock_release>
 80049ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049f4:	6025      	str	r5, [r4, #0]
 80049f6:	61a5      	str	r5, [r4, #24]
 80049f8:	2208      	movs	r2, #8
 80049fa:	4629      	mov	r1, r5
 80049fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a00:	f7ff fd44 	bl	800448c <memset>
 8004a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a10:	3468      	adds	r4, #104	; 0x68
 8004a12:	e7d9      	b.n	80049c8 <__sfp+0x1c>
 8004a14:	2104      	movs	r1, #4
 8004a16:	4638      	mov	r0, r7
 8004a18:	f7ff ff62 	bl	80048e0 <__sfmoreglue>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	6030      	str	r0, [r6, #0]
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d1d5      	bne.n	80049d0 <__sfp+0x24>
 8004a24:	f7ff ff78 	bl	8004918 <__sfp_lock_release>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	e7ee      	b.n	8004a0c <__sfp+0x60>
 8004a2e:	bf00      	nop
 8004a30:	08004f1c 	.word	0x08004f1c
 8004a34:	ffff0001 	.word	0xffff0001

08004a38 <_fwalk_reent>:
 8004a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	4688      	mov	r8, r1
 8004a40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a44:	2700      	movs	r7, #0
 8004a46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a4a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a4e:	d505      	bpl.n	8004a5c <_fwalk_reent+0x24>
 8004a50:	6824      	ldr	r4, [r4, #0]
 8004a52:	2c00      	cmp	r4, #0
 8004a54:	d1f7      	bne.n	8004a46 <_fwalk_reent+0xe>
 8004a56:	4638      	mov	r0, r7
 8004a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a5c:	89ab      	ldrh	r3, [r5, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d907      	bls.n	8004a72 <_fwalk_reent+0x3a>
 8004a62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a66:	3301      	adds	r3, #1
 8004a68:	d003      	beq.n	8004a72 <_fwalk_reent+0x3a>
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	47c0      	blx	r8
 8004a70:	4307      	orrs	r7, r0
 8004a72:	3568      	adds	r5, #104	; 0x68
 8004a74:	e7e9      	b.n	8004a4a <_fwalk_reent+0x12>

08004a76 <__retarget_lock_init_recursive>:
 8004a76:	4770      	bx	lr

08004a78 <__retarget_lock_acquire_recursive>:
 8004a78:	4770      	bx	lr

08004a7a <__retarget_lock_release_recursive>:
 8004a7a:	4770      	bx	lr

08004a7c <__swhatbuf_r>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	460e      	mov	r6, r1
 8004a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a84:	2900      	cmp	r1, #0
 8004a86:	b096      	sub	sp, #88	; 0x58
 8004a88:	4614      	mov	r4, r2
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	da08      	bge.n	8004aa0 <__swhatbuf_r+0x24>
 8004a8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	061a      	lsls	r2, r3, #24
 8004a98:	d410      	bmi.n	8004abc <__swhatbuf_r+0x40>
 8004a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a9e:	e00e      	b.n	8004abe <__swhatbuf_r+0x42>
 8004aa0:	466a      	mov	r2, sp
 8004aa2:	f000 f9a7 	bl	8004df4 <_fstat_r>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	dbf1      	blt.n	8004a8e <__swhatbuf_r+0x12>
 8004aaa:	9a01      	ldr	r2, [sp, #4]
 8004aac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ab0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ab4:	425a      	negs	r2, r3
 8004ab6:	415a      	adcs	r2, r3
 8004ab8:	602a      	str	r2, [r5, #0]
 8004aba:	e7ee      	b.n	8004a9a <__swhatbuf_r+0x1e>
 8004abc:	2340      	movs	r3, #64	; 0x40
 8004abe:	2000      	movs	r0, #0
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	b016      	add	sp, #88	; 0x58
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ac8 <__smakebuf_r>:
 8004ac8:	898b      	ldrh	r3, [r1, #12]
 8004aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004acc:	079d      	lsls	r5, r3, #30
 8004ace:	4606      	mov	r6, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	d507      	bpl.n	8004ae4 <__smakebuf_r+0x1c>
 8004ad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	2301      	movs	r3, #1
 8004ade:	6163      	str	r3, [r4, #20]
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	ab01      	add	r3, sp, #4
 8004ae6:	466a      	mov	r2, sp
 8004ae8:	f7ff ffc8 	bl	8004a7c <__swhatbuf_r>
 8004aec:	9900      	ldr	r1, [sp, #0]
 8004aee:	4605      	mov	r5, r0
 8004af0:	4630      	mov	r0, r6
 8004af2:	f000 f895 	bl	8004c20 <_malloc_r>
 8004af6:	b948      	cbnz	r0, 8004b0c <__smakebuf_r+0x44>
 8004af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afc:	059a      	lsls	r2, r3, #22
 8004afe:	d4ef      	bmi.n	8004ae0 <__smakebuf_r+0x18>
 8004b00:	f023 0303 	bic.w	r3, r3, #3
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	e7e3      	b.n	8004ad4 <__smakebuf_r+0xc>
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <__smakebuf_r+0x7c>)
 8004b0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	6020      	str	r0, [r4, #0]
 8004b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b18:	81a3      	strh	r3, [r4, #12]
 8004b1a:	9b00      	ldr	r3, [sp, #0]
 8004b1c:	6163      	str	r3, [r4, #20]
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	6120      	str	r0, [r4, #16]
 8004b22:	b15b      	cbz	r3, 8004b3c <__smakebuf_r+0x74>
 8004b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f000 f975 	bl	8004e18 <_isatty_r>
 8004b2e:	b128      	cbz	r0, 8004b3c <__smakebuf_r+0x74>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	89a0      	ldrh	r0, [r4, #12]
 8004b3e:	4305      	orrs	r5, r0
 8004b40:	81a5      	strh	r5, [r4, #12]
 8004b42:	e7cd      	b.n	8004ae0 <__smakebuf_r+0x18>
 8004b44:	080048d5 	.word	0x080048d5

08004b48 <_free_r>:
 8004b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	d044      	beq.n	8004bd8 <_free_r+0x90>
 8004b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b52:	9001      	str	r0, [sp, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f1a1 0404 	sub.w	r4, r1, #4
 8004b5a:	bfb8      	it	lt
 8004b5c:	18e4      	addlt	r4, r4, r3
 8004b5e:	f000 f97d 	bl	8004e5c <__malloc_lock>
 8004b62:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <_free_r+0x94>)
 8004b64:	9801      	ldr	r0, [sp, #4]
 8004b66:	6813      	ldr	r3, [r2, #0]
 8004b68:	b933      	cbnz	r3, 8004b78 <_free_r+0x30>
 8004b6a:	6063      	str	r3, [r4, #4]
 8004b6c:	6014      	str	r4, [r2, #0]
 8004b6e:	b003      	add	sp, #12
 8004b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b74:	f000 b978 	b.w	8004e68 <__malloc_unlock>
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	d908      	bls.n	8004b8e <_free_r+0x46>
 8004b7c:	6825      	ldr	r5, [r4, #0]
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf01      	itttt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	1949      	addeq	r1, r1, r5
 8004b8a:	6021      	streq	r1, [r4, #0]
 8004b8c:	e7ed      	b.n	8004b6a <_free_r+0x22>
 8004b8e:	461a      	mov	r2, r3
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	b10b      	cbz	r3, 8004b98 <_free_r+0x50>
 8004b94:	42a3      	cmp	r3, r4
 8004b96:	d9fa      	bls.n	8004b8e <_free_r+0x46>
 8004b98:	6811      	ldr	r1, [r2, #0]
 8004b9a:	1855      	adds	r5, r2, r1
 8004b9c:	42a5      	cmp	r5, r4
 8004b9e:	d10b      	bne.n	8004bb8 <_free_r+0x70>
 8004ba0:	6824      	ldr	r4, [r4, #0]
 8004ba2:	4421      	add	r1, r4
 8004ba4:	1854      	adds	r4, r2, r1
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	6011      	str	r1, [r2, #0]
 8004baa:	d1e0      	bne.n	8004b6e <_free_r+0x26>
 8004bac:	681c      	ldr	r4, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	6053      	str	r3, [r2, #4]
 8004bb2:	4421      	add	r1, r4
 8004bb4:	6011      	str	r1, [r2, #0]
 8004bb6:	e7da      	b.n	8004b6e <_free_r+0x26>
 8004bb8:	d902      	bls.n	8004bc0 <_free_r+0x78>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	6003      	str	r3, [r0, #0]
 8004bbe:	e7d6      	b.n	8004b6e <_free_r+0x26>
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	1961      	adds	r1, r4, r5
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	bf04      	itt	eq
 8004bc8:	6819      	ldreq	r1, [r3, #0]
 8004bca:	685b      	ldreq	r3, [r3, #4]
 8004bcc:	6063      	str	r3, [r4, #4]
 8004bce:	bf04      	itt	eq
 8004bd0:	1949      	addeq	r1, r1, r5
 8004bd2:	6021      	streq	r1, [r4, #0]
 8004bd4:	6054      	str	r4, [r2, #4]
 8004bd6:	e7ca      	b.n	8004b6e <_free_r+0x26>
 8004bd8:	b003      	add	sp, #12
 8004bda:	bd30      	pop	{r4, r5, pc}
 8004bdc:	20012e8c 	.word	0x20012e8c

08004be0 <sbrk_aligned>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4e0e      	ldr	r6, [pc, #56]	; (8004c1c <sbrk_aligned+0x3c>)
 8004be4:	460c      	mov	r4, r1
 8004be6:	6831      	ldr	r1, [r6, #0]
 8004be8:	4605      	mov	r5, r0
 8004bea:	b911      	cbnz	r1, 8004bf2 <sbrk_aligned+0x12>
 8004bec:	f000 f88c 	bl	8004d08 <_sbrk_r>
 8004bf0:	6030      	str	r0, [r6, #0]
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f000 f887 	bl	8004d08 <_sbrk_r>
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	d00a      	beq.n	8004c14 <sbrk_aligned+0x34>
 8004bfe:	1cc4      	adds	r4, r0, #3
 8004c00:	f024 0403 	bic.w	r4, r4, #3
 8004c04:	42a0      	cmp	r0, r4
 8004c06:	d007      	beq.n	8004c18 <sbrk_aligned+0x38>
 8004c08:	1a21      	subs	r1, r4, r0
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 f87c 	bl	8004d08 <_sbrk_r>
 8004c10:	3001      	adds	r0, #1
 8004c12:	d101      	bne.n	8004c18 <sbrk_aligned+0x38>
 8004c14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c18:	4620      	mov	r0, r4
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	20012e90 	.word	0x20012e90

08004c20 <_malloc_r>:
 8004c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c24:	1ccd      	adds	r5, r1, #3
 8004c26:	f025 0503 	bic.w	r5, r5, #3
 8004c2a:	3508      	adds	r5, #8
 8004c2c:	2d0c      	cmp	r5, #12
 8004c2e:	bf38      	it	cc
 8004c30:	250c      	movcc	r5, #12
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	4607      	mov	r7, r0
 8004c36:	db01      	blt.n	8004c3c <_malloc_r+0x1c>
 8004c38:	42a9      	cmp	r1, r5
 8004c3a:	d905      	bls.n	8004c48 <_malloc_r+0x28>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	2600      	movs	r6, #0
 8004c42:	4630      	mov	r0, r6
 8004c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c48:	4e2e      	ldr	r6, [pc, #184]	; (8004d04 <_malloc_r+0xe4>)
 8004c4a:	f000 f907 	bl	8004e5c <__malloc_lock>
 8004c4e:	6833      	ldr	r3, [r6, #0]
 8004c50:	461c      	mov	r4, r3
 8004c52:	bb34      	cbnz	r4, 8004ca2 <_malloc_r+0x82>
 8004c54:	4629      	mov	r1, r5
 8004c56:	4638      	mov	r0, r7
 8004c58:	f7ff ffc2 	bl	8004be0 <sbrk_aligned>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	4604      	mov	r4, r0
 8004c60:	d14d      	bne.n	8004cfe <_malloc_r+0xde>
 8004c62:	6834      	ldr	r4, [r6, #0]
 8004c64:	4626      	mov	r6, r4
 8004c66:	2e00      	cmp	r6, #0
 8004c68:	d140      	bne.n	8004cec <_malloc_r+0xcc>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4638      	mov	r0, r7
 8004c70:	eb04 0803 	add.w	r8, r4, r3
 8004c74:	f000 f848 	bl	8004d08 <_sbrk_r>
 8004c78:	4580      	cmp	r8, r0
 8004c7a:	d13a      	bne.n	8004cf2 <_malloc_r+0xd2>
 8004c7c:	6821      	ldr	r1, [r4, #0]
 8004c7e:	3503      	adds	r5, #3
 8004c80:	1a6d      	subs	r5, r5, r1
 8004c82:	f025 0503 	bic.w	r5, r5, #3
 8004c86:	3508      	adds	r5, #8
 8004c88:	2d0c      	cmp	r5, #12
 8004c8a:	bf38      	it	cc
 8004c8c:	250c      	movcc	r5, #12
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7ff ffa5 	bl	8004be0 <sbrk_aligned>
 8004c96:	3001      	adds	r0, #1
 8004c98:	d02b      	beq.n	8004cf2 <_malloc_r+0xd2>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	442b      	add	r3, r5
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	e00e      	b.n	8004cc0 <_malloc_r+0xa0>
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	1b52      	subs	r2, r2, r5
 8004ca6:	d41e      	bmi.n	8004ce6 <_malloc_r+0xc6>
 8004ca8:	2a0b      	cmp	r2, #11
 8004caa:	d916      	bls.n	8004cda <_malloc_r+0xba>
 8004cac:	1961      	adds	r1, r4, r5
 8004cae:	42a3      	cmp	r3, r4
 8004cb0:	6025      	str	r5, [r4, #0]
 8004cb2:	bf18      	it	ne
 8004cb4:	6059      	strne	r1, [r3, #4]
 8004cb6:	6863      	ldr	r3, [r4, #4]
 8004cb8:	bf08      	it	eq
 8004cba:	6031      	streq	r1, [r6, #0]
 8004cbc:	5162      	str	r2, [r4, r5]
 8004cbe:	604b      	str	r3, [r1, #4]
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f104 060b 	add.w	r6, r4, #11
 8004cc6:	f000 f8cf 	bl	8004e68 <__malloc_unlock>
 8004cca:	f026 0607 	bic.w	r6, r6, #7
 8004cce:	1d23      	adds	r3, r4, #4
 8004cd0:	1af2      	subs	r2, r6, r3
 8004cd2:	d0b6      	beq.n	8004c42 <_malloc_r+0x22>
 8004cd4:	1b9b      	subs	r3, r3, r6
 8004cd6:	50a3      	str	r3, [r4, r2]
 8004cd8:	e7b3      	b.n	8004c42 <_malloc_r+0x22>
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	bf0c      	ite	eq
 8004ce0:	6032      	streq	r2, [r6, #0]
 8004ce2:	605a      	strne	r2, [r3, #4]
 8004ce4:	e7ec      	b.n	8004cc0 <_malloc_r+0xa0>
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	6864      	ldr	r4, [r4, #4]
 8004cea:	e7b2      	b.n	8004c52 <_malloc_r+0x32>
 8004cec:	4634      	mov	r4, r6
 8004cee:	6876      	ldr	r6, [r6, #4]
 8004cf0:	e7b9      	b.n	8004c66 <_malloc_r+0x46>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	f000 f8b6 	bl	8004e68 <__malloc_unlock>
 8004cfc:	e7a1      	b.n	8004c42 <_malloc_r+0x22>
 8004cfe:	6025      	str	r5, [r4, #0]
 8004d00:	e7de      	b.n	8004cc0 <_malloc_r+0xa0>
 8004d02:	bf00      	nop
 8004d04:	20012e8c 	.word	0x20012e8c

08004d08 <_sbrk_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d06      	ldr	r5, [pc, #24]	; (8004d24 <_sbrk_r+0x1c>)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	602b      	str	r3, [r5, #0]
 8004d14:	f000 f8c0 	bl	8004e98 <_sbrk>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_sbrk_r+0x1a>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_sbrk_r+0x1a>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	20012e94 	.word	0x20012e94

08004d28 <__sread>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d30:	f000 f8a0 	bl	8004e74 <_read_r>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	bfab      	itete	ge
 8004d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d3c:	181b      	addge	r3, r3, r0
 8004d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d42:	bfac      	ite	ge
 8004d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d46:	81a3      	strhlt	r3, [r4, #12]
 8004d48:	bd10      	pop	{r4, pc}

08004d4a <__swrite>:
 8004d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4e:	461f      	mov	r7, r3
 8004d50:	898b      	ldrh	r3, [r1, #12]
 8004d52:	05db      	lsls	r3, r3, #23
 8004d54:	4605      	mov	r5, r0
 8004d56:	460c      	mov	r4, r1
 8004d58:	4616      	mov	r6, r2
 8004d5a:	d505      	bpl.n	8004d68 <__swrite+0x1e>
 8004d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d60:	2302      	movs	r3, #2
 8004d62:	2200      	movs	r2, #0
 8004d64:	f000 f868 	bl	8004e38 <_lseek_r>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d72:	81a3      	strh	r3, [r4, #12]
 8004d74:	4632      	mov	r2, r6
 8004d76:	463b      	mov	r3, r7
 8004d78:	4628      	mov	r0, r5
 8004d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7e:	f000 b817 	b.w	8004db0 <_write_r>

08004d82 <__sseek>:
 8004d82:	b510      	push	{r4, lr}
 8004d84:	460c      	mov	r4, r1
 8004d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8a:	f000 f855 	bl	8004e38 <_lseek_r>
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	bf15      	itete	ne
 8004d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d9e:	81a3      	strheq	r3, [r4, #12]
 8004da0:	bf18      	it	ne
 8004da2:	81a3      	strhne	r3, [r4, #12]
 8004da4:	bd10      	pop	{r4, pc}

08004da6 <__sclose>:
 8004da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004daa:	f000 b813 	b.w	8004dd4 <_close_r>
	...

08004db0 <_write_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4d07      	ldr	r5, [pc, #28]	; (8004dd0 <_write_r+0x20>)
 8004db4:	4604      	mov	r4, r0
 8004db6:	4608      	mov	r0, r1
 8004db8:	4611      	mov	r1, r2
 8004dba:	2200      	movs	r2, #0
 8004dbc:	602a      	str	r2, [r5, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f7fb fda5 	bl	800090e <_write>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_write_r+0x1e>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_write_r+0x1e>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	20012e94 	.word	0x20012e94

08004dd4 <_close_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4d06      	ldr	r5, [pc, #24]	; (8004df0 <_close_r+0x1c>)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	602b      	str	r3, [r5, #0]
 8004de0:	f7fb fdb1 	bl	8000946 <_close>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_close_r+0x1a>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_close_r+0x1a>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	20012e94 	.word	0x20012e94

08004df4 <_fstat_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4d07      	ldr	r5, [pc, #28]	; (8004e14 <_fstat_r+0x20>)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	602b      	str	r3, [r5, #0]
 8004e02:	f7fb fdac 	bl	800095e <_fstat>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	d102      	bne.n	8004e10 <_fstat_r+0x1c>
 8004e0a:	682b      	ldr	r3, [r5, #0]
 8004e0c:	b103      	cbz	r3, 8004e10 <_fstat_r+0x1c>
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	bd38      	pop	{r3, r4, r5, pc}
 8004e12:	bf00      	nop
 8004e14:	20012e94 	.word	0x20012e94

08004e18 <_isatty_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4d06      	ldr	r5, [pc, #24]	; (8004e34 <_isatty_r+0x1c>)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	602b      	str	r3, [r5, #0]
 8004e24:	f7fb fdab 	bl	800097e <_isatty>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_isatty_r+0x1a>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_isatty_r+0x1a>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	20012e94 	.word	0x20012e94

08004e38 <_lseek_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4d07      	ldr	r5, [pc, #28]	; (8004e58 <_lseek_r+0x20>)
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	4608      	mov	r0, r1
 8004e40:	4611      	mov	r1, r2
 8004e42:	2200      	movs	r2, #0
 8004e44:	602a      	str	r2, [r5, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f7fb fda4 	bl	8000994 <_lseek>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_lseek_r+0x1e>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_lseek_r+0x1e>
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	20012e94 	.word	0x20012e94

08004e5c <__malloc_lock>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__malloc_lock+0x8>)
 8004e5e:	f7ff be0b 	b.w	8004a78 <__retarget_lock_acquire_recursive>
 8004e62:	bf00      	nop
 8004e64:	20012e88 	.word	0x20012e88

08004e68 <__malloc_unlock>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__malloc_unlock+0x8>)
 8004e6a:	f7ff be06 	b.w	8004a7a <__retarget_lock_release_recursive>
 8004e6e:	bf00      	nop
 8004e70:	20012e88 	.word	0x20012e88

08004e74 <_read_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4d07      	ldr	r5, [pc, #28]	; (8004e94 <_read_r+0x20>)
 8004e78:	4604      	mov	r4, r0
 8004e7a:	4608      	mov	r0, r1
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	2200      	movs	r2, #0
 8004e80:	602a      	str	r2, [r5, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f7fb fd26 	bl	80008d4 <_read>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_read_r+0x1e>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_read_r+0x1e>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	20012e94 	.word	0x20012e94

08004e98 <_sbrk>:
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <_sbrk+0x14>)
 8004e9a:	6811      	ldr	r1, [r2, #0]
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	b909      	cbnz	r1, 8004ea4 <_sbrk+0xc>
 8004ea0:	4903      	ldr	r1, [pc, #12]	; (8004eb0 <_sbrk+0x18>)
 8004ea2:	6011      	str	r1, [r2, #0]
 8004ea4:	6810      	ldr	r0, [r2, #0]
 8004ea6:	4403      	add	r3, r0
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4770      	bx	lr
 8004eac:	20012e98 	.word	0x20012e98
 8004eb0:	20012ea0 	.word	0x20012ea0

08004eb4 <_init>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr

08004ec0 <_fini>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr
