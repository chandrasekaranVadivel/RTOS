
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004afc  08004afc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b04  08004b04  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e2c  20000014  08004b20  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e40  08004b20  00022e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eda5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002633  00000000  00000000  0002ede9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00031420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  000322b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017591  00000000  00000000  00033038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa47  00000000  00000000  0004a5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f20  00000000  00000000  0005a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edf30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  000edf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a8c 	.word	0x08004a8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004a8c 	.word	0x08004a8c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fb49 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f895 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8f1 	bl	80006d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
status=	xTaskCreate(GreenLED, "greenLED", 100	, NULL, 3, &greenLEDHandle);
 80004f6:	4b3b      	ldr	r3, [pc, #236]	; (80005e4 <main+0x100>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2303      	movs	r3, #3
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	4939      	ldr	r1, [pc, #228]	; (80005e8 <main+0x104>)
 8000504:	4839      	ldr	r0, [pc, #228]	; (80005ec <main+0x108>)
 8000506:	f002 fac5 	bl	8002a94 <xTaskCreate>
 800050a:	4603      	mov	r3, r0
 800050c:	4a38      	ldr	r2, [pc, #224]	; (80005f0 <main+0x10c>)
 800050e:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 8000510:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <main+0x10c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d00a      	beq.n	800052e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051c:	f383 8811 	msr	BASEPRI, r3
 8000520:	f3bf 8f6f 	isb	sy
 8000524:	f3bf 8f4f 	dsb	sy
 8000528:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800052a:	bf00      	nop
 800052c:	e7fe      	b.n	800052c <main+0x48>
next_task_handle=greenLEDHandle;
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <main+0x100>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <main+0x110>)
 8000534:	6013      	str	r3, [r2, #0]
status=	xTaskCreate(RedLED, "redLED", 100	, NULL, 2, &redLEDHandle);
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <main+0x114>)
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2302      	movs	r3, #2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	2264      	movs	r2, #100	; 0x64
 8000542:	492e      	ldr	r1, [pc, #184]	; (80005fc <main+0x118>)
 8000544:	482e      	ldr	r0, [pc, #184]	; (8000600 <main+0x11c>)
 8000546:	f002 faa5 	bl	8002a94 <xTaskCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <main+0x10c>)
 800054e:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <main+0x10c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d00a      	beq.n	800056e <main+0x8a>
        __asm volatile
 8000558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055c:	f383 8811 	msr	BASEPRI, r3
 8000560:	f3bf 8f6f 	isb	sy
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	60bb      	str	r3, [r7, #8]
    }
 800056a:	bf00      	nop
 800056c:	e7fe      	b.n	800056c <main+0x88>
status=	xTaskCreate(blueLED, "blueLED", 100	, NULL, 1, &blueLEDHandle);
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <main+0x120>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2264      	movs	r2, #100	; 0x64
 800057a:	4923      	ldr	r1, [pc, #140]	; (8000608 <main+0x124>)
 800057c:	4823      	ldr	r0, [pc, #140]	; (800060c <main+0x128>)
 800057e:	f002 fa89 	bl	8002a94 <xTaskCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a1a      	ldr	r2, [pc, #104]	; (80005f0 <main+0x10c>)
 8000586:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <main+0x10c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d00a      	beq.n	80005a6 <main+0xc2>
        __asm volatile
 8000590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000594:	f383 8811 	msr	BASEPRI, r3
 8000598:	f3bf 8f6f 	isb	sy
 800059c:	f3bf 8f4f 	dsb	sy
 80005a0:	607b      	str	r3, [r7, #4]
    }
 80005a2:	bf00      	nop
 80005a4:	e7fe      	b.n	80005a4 <main+0xc0>
status=	xTaskCreate(OrangeLED, "orangeLED", 100	, NULL, 2, &orangeLEDHandle);
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <main+0x12c>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2302      	movs	r3, #2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	4918      	ldr	r1, [pc, #96]	; (8000614 <main+0x130>)
 80005b4:	4818      	ldr	r0, [pc, #96]	; (8000618 <main+0x134>)
 80005b6:	f002 fa6d 	bl	8002a94 <xTaskCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <main+0x10c>)
 80005be:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <main+0x10c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00a      	beq.n	80005de <main+0xfa>
        __asm volatile
 80005c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005cc:	f383 8811 	msr	BASEPRI, r3
 80005d0:	f3bf 8f6f 	isb	sy
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	603b      	str	r3, [r7, #0]
    }
 80005da:	bf00      	nop
 80005dc:	e7fe      	b.n	80005dc <main+0xf8>

  vTaskStartScheduler();
 80005de:	f002 fc2f 	bl	8002e40 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0xfe>
 80005e4:	20000034 	.word	0x20000034
 80005e8:	08004aa4 	.word	0x08004aa4
 80005ec:	080007d9 	.word	0x080007d9
 80005f0:	20000048 	.word	0x20000048
 80005f4:	20000030 	.word	0x20000030
 80005f8:	20000038 	.word	0x20000038
 80005fc:	08004ab0 	.word	0x08004ab0
 8000600:	08000835 	.word	0x08000835
 8000604:	2000003c 	.word	0x2000003c
 8000608:	08004ab8 	.word	0x08004ab8
 800060c:	08000891 	.word	0x08000891
 8000610:	20000040 	.word	0x20000040
 8000614:	08004ac0 	.word	0x08004ac0
 8000618:	080008f5 	.word	0x080008f5

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fa26 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xb4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xb4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClock_Config+0xb8>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fd77 	bl	8001180 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000698:	f000 f96c 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 ffda 	bl	8001670 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c2:	f000 f957 	bl	8000974 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xac>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_GPIO_Init+0xac>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0xac>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xac>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_GPIO_Init+0xac>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_GPIO_Init+0xac>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_GPIO_Init+0xb0>)
 800072e:	f000 fccf 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000732:	2301      	movs	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000736:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_GPIO_Init+0xb4>)
 8000748:	f000 fb3e 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800074c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_GPIO_Init+0xb0>)
 8000766:	f000 fb2f 	bl	8000dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2106      	movs	r1, #6
 800076e:	2006      	movs	r0, #6
 8000770:	f000 fb00 	bl	8000d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000774:	2006      	movs	r0, #6
 8000776:	f000 fb19 	bl	8000dac <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000

08000790 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken=pdFALSE;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]

	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <button_interrupt_handler+0x40>)
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2300      	movs	r3, #0
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2300      	movs	r3, #0
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	f003 f86c 	bl	8003888 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <button_interrupt_handler+0x36>
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <button_interrupt_handler+0x44>)
 80007b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	f3bf 8f4f 	dsb	sy
 80007c2:	f3bf 8f6f 	isb	sy
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000030 	.word	0x20000030
 80007d4:	e000ed04 	.word	0xe000ed04

080007d8 <GreenLED>:

static void GreenLED(void *parm)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af02      	add	r7, sp, #8
 80007de:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <GreenLED+0x50>)
 80007e6:	f000 fc8c 	bl	8001102 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80007ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2000      	movs	r0, #0
 80007f8:	f002 ffc6 	bl	8003788 <xTaskGenericNotifyWait>
 80007fc:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d1ed      	bne.n	80007e0 <GreenLED+0x8>
		{
			portENTER_CRITICAL();
 8000804:	f003 fde8 	bl	80043d8 <vPortEnterCritical>
			next_task_handle=orangeLEDHandle;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <GreenLED+0x54>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a08      	ldr	r2, [pc, #32]	; (8000830 <GreenLED+0x58>)
 800080e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <GreenLED+0x50>)
 8000818:	f000 fc5a 	bl	80010d0 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 800081c:	f003 fe0c 	bl	8004438 <vPortExitCritical>
			vTaskDelete(NULL);
 8000820:	2000      	movs	r0, #0
 8000822:	f002 fa7d 	bl	8002d20 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000826:	e7db      	b.n	80007e0 <GreenLED+0x8>
 8000828:	40020c00 	.word	0x40020c00
 800082c:	20000040 	.word	0x20000040
 8000830:	20000030 	.word	0x20000030

08000834 <RedLED>:
		}
//		vTaskDelay(pdMS_TO_TICKS(1000));
	}
}
static void RedLED(void *parm)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af02      	add	r7, sp, #8
 800083a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800083c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <RedLED+0x50>)
 8000842:	f000 fc5e 	bl	8001102 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000846:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2300      	movs	r3, #0
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f002 ff98 	bl	8003788 <xTaskGenericNotifyWait>
 8000858:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d1ed      	bne.n	800083c <RedLED+0x8>
		{
			portENTER_CRITICAL();
 8000860:	f003 fdba 	bl	80043d8 <vPortEnterCritical>
			next_task_handle=blueLEDHandle;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <RedLED+0x54>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <RedLED+0x58>)
 800086a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <RedLED+0x50>)
 8000874:	f000 fc2c 	bl	80010d0 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000878:	f003 fdde 	bl	8004438 <vPortExitCritical>
			vTaskDelete(NULL);
 800087c:	2000      	movs	r0, #0
 800087e:	f002 fa4f 	bl	8002d20 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000882:	e7db      	b.n	800083c <RedLED+0x8>
 8000884:	40020c00 	.word	0x40020c00
 8000888:	2000003c 	.word	0x2000003c
 800088c:	20000030 	.word	0x20000030

08000890 <blueLED>:

	}
	//vTaskDelay(pdMS_TO_TICKS(500));
}
static void blueLED(void *parm)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af02      	add	r7, sp, #8
 8000896:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <blueLED+0x58>)
 800089e:	f000 fc30 	bl	8001102 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(500));
 80008a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2300      	movs	r3, #0
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f002 ff6a 	bl	8003788 <xTaskGenericNotifyWait>
 80008b4:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d1ed      	bne.n	8000898 <blueLED+0x8>
		{
			portENTER_CRITICAL();
 80008bc:	f003 fd8c 	bl	80043d8 <vPortEnterCritical>
			next_task_handle=NULL;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <blueLED+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <blueLED+0x58>)
 80008ce:	f000 fbff 	bl	80010d0 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80008d2:	f003 fdb1 	bl	8004438 <vPortExitCritical>
			vTaskDelete(buttonHandle);
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <blueLED+0x60>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fa20 	bl	8002d20 <vTaskDelete>
			vTaskDelete(NULL);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f002 fa1d 	bl	8002d20 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008e6:	e7d7      	b.n	8000898 <blueLED+0x8>
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	20000030 	.word	0x20000030
 80008f0:	20000044 	.word	0x20000044

080008f4 <OrangeLED>:

	}
//	vTaskDelay(pdMS_TO_TICKS(400));
}
static void OrangeLED(void *parm)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80008fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <OrangeLED+0x50>)
 8000902:	f000 fbfe 	bl	8001102 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000906:	f44f 7348 	mov.w	r3, #800	; 0x320
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2000      	movs	r0, #0
 8000914:	f002 ff38 	bl	8003788 <xTaskGenericNotifyWait>
 8000918:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d1ed      	bne.n	80008fc <OrangeLED+0x8>
		{
			portENTER_CRITICAL();
 8000920:	f003 fd5a 	bl	80043d8 <vPortEnterCritical>
			next_task_handle=redLEDHandle;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <OrangeLED+0x54>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <OrangeLED+0x58>)
 800092a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <OrangeLED+0x50>)
 8000934:	f000 fbcc 	bl	80010d0 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000938:	f003 fd7e 	bl	8004438 <vPortExitCritical>
			vTaskDelete(NULL);
 800093c:	2000      	movs	r0, #0
 800093e:	f002 f9ef 	bl	8002d20 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000942:	e7db      	b.n	80008fc <OrangeLED+0x8>
 8000944:	40020c00 	.word	0x40020c00
 8000948:	20000038 	.word	0x20000038
 800094c:	20000030 	.word	0x20000030

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 f92f 	bl	8000bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40014000 	.word	0x40014000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <HAL_InitTick+0xd0>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e8:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <HAL_InitTick+0xd0>)
 80009ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ee:	6453      	str	r3, [r2, #68]	; 0x44
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <HAL_InitTick+0xd0>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fc:	f107 020c 	add.w	r2, r7, #12
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fffe 	bl	8001a08 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a0c:	f000 ffe8 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8000a10:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <HAL_InitTick+0xd4>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0c9b      	lsrs	r3, r3, #18
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a22:	4a22      	ldr	r2, [pc, #136]	; (8000aac <HAL_InitTick+0xdc>)
 8000a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a48:	f001 f810 	bl	8001a6c <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d11b      	bne.n	8000a92 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <HAL_InitTick+0xd8>)
 8000a5c:	f001 f860 	bl	8001b20 <HAL_TIM_Base_Start_IT>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d111      	bne.n	8000a92 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000a6e:	2018      	movs	r0, #24
 8000a70:	f000 f99c 	bl	8000dac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	d808      	bhi.n	8000a8c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	2018      	movs	r0, #24
 8000a80:	f000 f978 	bl	8000d74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_InitTick+0xe0>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e002      	b.n	8000a92 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	2000004c 	.word	0x2000004c
 8000aac:	40014000 	.word	0x40014000
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000ae4:	f7ff fe54 	bl	8000790 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 fb25 	bl	8001138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000afa:	f001 f873 	bl	8001be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000004c 	.word	0x2000004c

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd7 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f003 ff5d 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fcc1 	bl	80004e4 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b70:	08004b0c 	.word	0x08004b0c
  ldr r2, =_sbss
 8000b74:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b78:	20012e40 	.word	0x20012e40

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f8d8 	bl	8000d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f7ff ff0e 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fee4 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000094 	.word	0x20000094

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000094 	.word	0x20000094

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff4c 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d86:	f7ff ff61 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	6978      	ldr	r0, [r7, #20]
 8000d92:	f7ff ffb1 	bl	8000cf8 <NVIC_EncodePriority>
 8000d96:	4602      	mov	r2, r0
 8000d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff80 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff54 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	e159      	b.n	8001098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8148 	bne.w	8001092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d005      	beq.n	8000e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d130      	bne.n	8000e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	f003 0201 	and.w	r2, r3, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d017      	beq.n	8000eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d123      	bne.n	8000f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	69b9      	ldr	r1, [r7, #24]
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0203 	and.w	r2, r3, #3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80a2 	beq.w	8001092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6a:	4a52      	ldr	r2, [pc, #328]	; (80010b4 <HAL_GPIO_Init+0x2ec>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x202>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2f4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x1fe>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a47      	ldr	r2, [pc, #284]	; (80010c0 <HAL_GPIO_Init+0x2f8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a46      	ldr	r2, [pc, #280]	; (80010c4 <HAL_GPIO_Init+0x2fc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x1f6>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x1f2>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e008      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fba:	2307      	movs	r3, #7
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	f002 0203 	and.w	r2, r2, #3
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fdc:	4935      	ldr	r1, [pc, #212]	; (80010b4 <HAL_GPIO_Init+0x2ec>)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <HAL_GPIO_Init+0x304>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100e:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <HAL_GPIO_Init+0x304>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <HAL_GPIO_Init+0x304>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001038:	4a24      	ldr	r2, [pc, #144]	; (80010cc <HAL_GPIO_Init+0x304>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_GPIO_Init+0x304>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001062:	4a1a      	ldr	r2, [pc, #104]	; (80010cc <HAL_GPIO_Init+0x304>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_GPIO_Init+0x304>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_GPIO_Init+0x304>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	f67f aea2 	bls.w	8000de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40013c00 	.word	0x40013c00

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ec:	e003      	b.n	80010f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	041a      	lsls	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	041a      	lsls	r2, r3, #16
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43d9      	mvns	r1, r3
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	400b      	ands	r3, r1
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	619a      	str	r2, [r3, #24]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f806 	bl	8001168 <HAL_GPIO_EXTI_Callback>
  }
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e267      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d075      	beq.n	800128a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119e:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d00c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d112      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b82      	ldr	r3, [pc, #520]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c2:	d10b      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4b7e      	ldr	r3, [pc, #504]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d05b      	beq.n	8001288 <HAL_RCC_OscConfig+0x108>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d157      	bne.n	8001288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e242      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d106      	bne.n	80011f4 <HAL_RCC_OscConfig+0x74>
 80011e6:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a75      	ldr	r2, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6f      	ldr	r2, [pc, #444]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6c      	ldr	r2, [pc, #432]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 8001218:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a65      	ldr	r2, [pc, #404]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fcd8 	bl	8000bec <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcd4 	bl	8000bec <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e207      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xc0>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fcc4 	bl	8000bec <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fcc0 	bl	8000bec <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1f3      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0xe8>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001296:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e1c7      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4937      	ldr	r1, [pc, #220]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e03a      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_RCC_OscConfig+0x244>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fc79 	bl	8000bec <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc75 	bl	8000bec <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1a8      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4925      	ldr	r1, [pc, #148]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x244>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fc58 	bl	8000bec <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fc54 	bl	8000bec <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e187      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d036      	beq.n	80013d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d016      	beq.n	80013a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_RCC_OscConfig+0x248>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001378:	f7ff fc38 	bl	8000bec <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fc34 	bl	8000bec <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e167      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x200>
 800139e:	e01b      	b.n	80013d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_RCC_OscConfig+0x248>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fc21 	bl	8000bec <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e00e      	b.n	80013cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc1d 	bl	8000bec <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d907      	bls.n	80013cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e150      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
 80013c0:	40023800 	.word	0x40023800
 80013c4:	42470000 	.word	0x42470000
 80013c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ea      	bne.n	80013ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8097 	beq.w	8001514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b7d      	ldr	r3, [pc, #500]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a7c      	ldr	r2, [pc, #496]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b77      	ldr	r3, [pc, #476]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001422:	4b74      	ldr	r3, [pc, #464]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a73      	ldr	r2, [pc, #460]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff fbdd 	bl	8000bec <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001436:	f7ff fbd9 	bl	8000bec <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e10c      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x2ea>
 800145c:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a63      	ldr	r2, [pc, #396]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
 8001468:	e01c      	b.n	80014a4 <HAL_RCC_OscConfig+0x324>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b05      	cmp	r3, #5
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x30c>
 8001472:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a5e      	ldr	r2, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a5b      	ldr	r2, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0x324>
 800148c:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a54      	ldr	r2, [pc, #336]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 0304 	bic.w	r3, r3, #4
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d015      	beq.n	80014d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fb9e 	bl	8000bec <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb9a 	bl	8000bec <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0cb      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0ee      	beq.n	80014b4 <HAL_RCC_OscConfig+0x334>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff fb88 	bl	8000bec <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb84 	bl	8000bec <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0b5      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1ee      	bne.n	80014e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a1 	beq.w	8001660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b08      	cmp	r3, #8
 8001528:	d05c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d141      	bne.n	80015b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_RCC_OscConfig+0x478>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb58 	bl	8000bec <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fb54 	bl	8000bec <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e087      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	019b      	lsls	r3, r3, #6
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	3b01      	subs	r3, #1
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x478>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fb2d 	bl	8000bec <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fb29 	bl	8000bec <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e05c      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x416>
 80015b4:	e054      	b.n	8001660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x478>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb16 	bl	8000bec <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fb12 	bl	8000bec <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e045      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x444>
 80015e2:	e03d      	b.n	8001660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e038      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x4ec>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d028      	beq.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d121      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d11a      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800162c:	4013      	ands	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001634:	4293      	cmp	r3, r2
 8001636:	d111      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0cc      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001684:	4b68      	ldr	r3, [pc, #416]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d90c      	bls.n	80016ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b65      	ldr	r3, [pc, #404]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0b8      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	494d      	ldr	r1, [pc, #308]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d044      	beq.n	8001790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d119      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e07f      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d003      	beq.n	800172e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	2b03      	cmp	r3, #3
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e06f      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e067      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f023 0203 	bic.w	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4934      	ldr	r1, [pc, #208]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001760:	f7ff fa44 	bl	8000bec <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	e00a      	b.n	800177e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff fa40 	bl	8000bec <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e04f      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 020c 	and.w	r2, r3, #12
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	429a      	cmp	r2, r3
 800178e:	d1eb      	bne.n	8001768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d20c      	bcs.n	80017b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e032      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	490e      	ldr	r1, [pc, #56]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017f6:	f000 f821 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	490a      	ldr	r1, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f8da 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023c00 	.word	0x40023c00
 800182c:	40023800 	.word	0x40023800
 8001830:	08004ae4 	.word	0x08004ae4
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001840:	b090      	sub	sp, #64	; 0x40
 8001842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d00d      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x40>
 8001860:	2b08      	cmp	r3, #8
 8001862:	f200 80a1 	bhi.w	80019a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x34>
 800186a:	2b04      	cmp	r3, #4
 800186c:	d003      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x3a>
 800186e:	e09b      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001874:	e09b      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800187a:	e098      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800187c:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_RCC_GetSysClockFreq+0x180>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001886:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d028      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	2200      	movs	r2, #0
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	627a      	str	r2, [r7, #36]	; 0x24
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018a4:	2100      	movs	r1, #0
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018a8:	fb03 f201 	mul.w	r2, r3, r1
 80018ac:	2300      	movs	r3, #0
 80018ae:	fb00 f303 	mul.w	r3, r0, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018b6:	fba0 1202 	umull	r1, r2, r0, r2
 80018ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018bc:	460a      	mov	r2, r1
 80018be:	62ba      	str	r2, [r7, #40]	; 0x28
 80018c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c2:	4413      	add	r3, r2
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c8:	2200      	movs	r2, #0
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	61fa      	str	r2, [r7, #28]
 80018ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018d6:	f7fe fc83 	bl	80001e0 <__aeabi_uldivmod>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4613      	mov	r3, r2
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e2:	e053      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <HAL_RCC_GetSysClockFreq+0x180>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	099b      	lsrs	r3, r3, #6
 80018ea:	2200      	movs	r2, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	617a      	str	r2, [r7, #20]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018f6:	f04f 0b00 	mov.w	fp, #0
 80018fa:	4652      	mov	r2, sl
 80018fc:	465b      	mov	r3, fp
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	0159      	lsls	r1, r3, #5
 8001908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190c:	0150      	lsls	r0, r2, #5
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ebb2 080a 	subs.w	r8, r2, sl
 8001916:	eb63 090b 	sbc.w	r9, r3, fp
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800192a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800192e:	ebb2 0408 	subs.w	r4, r2, r8
 8001932:	eb63 0509 	sbc.w	r5, r3, r9
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	00eb      	lsls	r3, r5, #3
 8001940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001944:	00e2      	lsls	r2, r4, #3
 8001946:	4614      	mov	r4, r2
 8001948:	461d      	mov	r5, r3
 800194a:	eb14 030a 	adds.w	r3, r4, sl
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	eb45 030b 	adc.w	r3, r5, fp
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001962:	4629      	mov	r1, r5
 8001964:	028b      	lsls	r3, r1, #10
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800196c:	4621      	mov	r1, r4
 800196e:	028a      	lsls	r2, r1, #10
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001976:	2200      	movs	r2, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001980:	f7fe fc2e 	bl	80001e0 <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4613      	mov	r3, r2
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_GetSysClockFreq+0x180>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	3301      	adds	r3, #1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800199c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019a6:	e002      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3740      	adds	r7, #64	; 0x40
 80019b4:	46bd      	mov	sp, r7
 80019b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	017d7840 	.word	0x017d7840

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000000 	.word	0x20000000

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff fff0 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08004af4 	.word	0x08004af4

08001a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	220f      	movs	r2, #15
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_RCC_GetClockConfig+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0207 	and.w	r2, r3, #7
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e041      	b.n	8001b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f839 	bl	8001b0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f000 f9ca 	bl	8001e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e044      	b.n	8001bc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d018      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d013      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00e      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_TIM_Base_Start_IT+0xbc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d111      	bne.n	8001bb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d010      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0201 	orr.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bae:	e007      	b.n	8001bc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40000800 	.word	0x40000800
 8001bdc:	40000c00 	.word	0x40000c00
 8001be0:	40014000 	.word	0x40014000

08001be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0202 	mvn.w	r2, #2
 8001c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8ee 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8e0 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8f1 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0204 	mvn.w	r2, #4
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8c4 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8b6 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8c7 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0208 	mvn.w	r2, #8
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f89a 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f88c 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f89d 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0210 	mvn.w	r2, #16
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2208      	movs	r2, #8
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f870 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f862 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f873 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d10e      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0201 	mvn.w	r2, #1
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fdf4 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b80      	cmp	r3, #128	; 0x80
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d107      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8e2 	bl	8001f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	2b40      	cmp	r3, #64	; 0x40
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f838 	bl	8001e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0220 	mvn.w	r2, #32
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ac 	bl	8001f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a34      	ldr	r2, [pc, #208]	; (8001f28 <TIM_Base_SetConfig+0xe4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00f      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d00b      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <TIM_Base_SetConfig+0xe8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <TIM_Base_SetConfig+0xec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d003      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <TIM_Base_SetConfig+0xf0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <TIM_Base_SetConfig+0xe4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01b      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d017      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <TIM_Base_SetConfig+0xe8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <TIM_Base_SetConfig+0xec>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00f      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <TIM_Base_SetConfig+0xf0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00b      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <TIM_Base_SetConfig+0xf4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <TIM_Base_SetConfig+0xf8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <TIM_Base_SetConfig+0xfc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d108      	bne.n	8001ee0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <TIM_Base_SetConfig+0xe4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d103      	bne.n	8001f14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	615a      	str	r2, [r3, #20]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00
 8001f38:	40014000 	.word	0x40014000
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40014800 	.word	0x40014800

08001f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0208 	add.w	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f84:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f103 0208 	add.w	r2, r3, #8
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0208 	add.w	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002024:	d103      	bne.n	800202e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e00c      	b.n	8002048 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3308      	adds	r3, #8
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e002      	b.n	800203c <vListInsert+0x2e>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	429a      	cmp	r2, r3
 8002046:	d2f6      	bcs.n	8002036 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6892      	ldr	r2, [r2, #8]
 8002096:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6852      	ldr	r2, [r2, #4]
 80020a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d103      	bne.n	80020b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <xQueueGenericReset+0x2a>
        __asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	60bb      	str	r3, [r7, #8]
    }
 80020fa:	bf00      	nop
 80020fc:	e7fe      	b.n	80020fc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80020fe:	f002 f96b 	bl	80043d8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	441a      	add	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	3b01      	subs	r3, #1
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	441a      	add	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	22ff      	movs	r2, #255	; 0xff
 8002142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	22ff      	movs	r2, #255	; 0xff
 800214a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d114      	bne.n	800217e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01a      	beq.n	8002192 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3310      	adds	r3, #16
 8002160:	4618      	mov	r0, r3
 8002162:	f001 f8dd 	bl	8003320 <xTaskRemoveFromEventList>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d012      	beq.n	8002192 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <xQueueGenericReset+0xcc>)
 800216e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	e009      	b.n	8002192 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3310      	adds	r3, #16
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fef2 	bl	8001f6c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3324      	adds	r3, #36	; 0x24
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff feed 	bl	8001f6c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002192:	f002 f951 	bl	8004438 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	e000ed04 	.word	0xe000ed04

080021a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <xQueueGenericCreate+0x2a>
        __asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	61bb      	str	r3, [r7, #24]
    }
 80021ca:	bf00      	nop
 80021cc:	e7fe      	b.n	80021cc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <xQueueGenericCreate+0x48>
 80021de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d101      	bne.n	80021f0 <xQueueGenericCreate+0x4c>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <xQueueGenericCreate+0x4e>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <xQueueGenericCreate+0x68>
        __asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	617b      	str	r3, [r7, #20]
    }
 8002208:	bf00      	nop
 800220a:	e7fe      	b.n	800220a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002212:	d90a      	bls.n	800222a <xQueueGenericCreate+0x86>
        __asm volatile
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	613b      	str	r3, [r7, #16]
    }
 8002226:	bf00      	nop
 8002228:	e7fe      	b.n	8002228 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	3350      	adds	r3, #80	; 0x50
 800222e:	4618      	mov	r0, r3
 8002230:	f002 f9f4 	bl	800461c <pvPortMalloc>
 8002234:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00d      	beq.n	8002258 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3350      	adds	r3, #80	; 0x50
 8002244:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002246:	79fa      	ldrb	r2, [r7, #7]
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f805 	bl	8002262 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002258:	6a3b      	ldr	r3, [r7, #32]
    }
 800225a:	4618      	mov	r0, r3
 800225c:	3728      	adds	r7, #40	; 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e002      	b.n	8002284 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002290:	2101      	movs	r1, #1
 8002292:	69b8      	ldr	r0, [r7, #24]
 8002294:	f7ff ff1e 	bl	80020d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	; 0x38
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022b6:	2300      	movs	r3, #0
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <xQueueGenericSend+0x32>
        __asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <xQueueGenericSend+0x40>
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <xQueueGenericSend+0x44>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <xQueueGenericSend+0x46>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <xQueueGenericSend+0x60>
        __asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d103      	bne.n	8002316 <xQueueGenericSend+0x6e>
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <xQueueGenericSend+0x72>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <xQueueGenericSend+0x74>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <xQueueGenericSend+0x8e>
        __asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	623b      	str	r3, [r7, #32]
    }
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002336:	f001 f98f 	bl	8003658 <xTaskGetSchedulerState>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <xQueueGenericSend+0x9e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <xQueueGenericSend+0xa2>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <xQueueGenericSend+0xa4>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <xQueueGenericSend+0xbe>
        __asm volatile
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	61fb      	str	r3, [r7, #28]
    }
 8002362:	bf00      	nop
 8002364:	e7fe      	b.n	8002364 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002366:	f002 f837 	bl	80043d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <xQueueGenericSend+0xd4>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d129      	bne.n	80023d0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002382:	f000 fa19 	bl	80027b8 <prvCopyDataToQueue>
 8002386:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	3324      	adds	r3, #36	; 0x24
 8002394:	4618      	mov	r0, r3
 8002396:	f000 ffc3 	bl	8003320 <xTaskRemoveFromEventList>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <xQueueGenericSend+0x1f8>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	e00a      	b.n	80023c8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <xQueueGenericSend+0x1f8>)
 80023ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80023c8:	f002 f836 	bl	8004438 <vPortExitCritical>
                return pdPASS;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e063      	b.n	8002498 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023d6:	f002 f82f 	bl	8004438 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	e05c      	b.n	8002498 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fffb 	bl	80033e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023f2:	f002 f821 	bl	8004438 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023f6:	f000 fd75 	bl	8002ee4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023fa:	f001 ffed 	bl	80043d8 <vPortEnterCritical>
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002404:	b25b      	sxtb	r3, r3
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800240a:	d103      	bne.n	8002414 <xQueueGenericSend+0x16c>
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800241a:	b25b      	sxtb	r3, r3
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002420:	d103      	bne.n	800242a <xQueueGenericSend+0x182>
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800242a:	f002 f805 	bl	8004438 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800242e:	1d3a      	adds	r2, r7, #4
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f000 ffea 	bl	8003410 <xTaskCheckForTimeOut>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d124      	bne.n	800248c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002444:	f000 fab0 	bl	80029a8 <prvIsQueueFull>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d018      	beq.n	8002480 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	3310      	adds	r3, #16
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 ff12 	bl	8003280 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800245c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800245e:	f000 fa3b 	bl	80028d8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002462:	f000 fd4d 	bl	8002f00 <xTaskResumeAll>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f af7c 	bne.w	8002366 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <xQueueGenericSend+0x1f8>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	e772      	b.n	8002366 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002482:	f000 fa29 	bl	80028d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002486:	f000 fd3b 	bl	8002f00 <xTaskResumeAll>
 800248a:	e76c      	b.n	8002366 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800248c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248e:	f000 fa23 	bl	80028d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002492:	f000 fd35 	bl	8002f00 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002496:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002498:	4618      	mov	r0, r3
 800249a:	3738      	adds	r7, #56	; 0x38
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000ed04 	.word	0xe000ed04

080024a4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b090      	sub	sp, #64	; 0x40
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <xQueueGenericSendFromISR+0x3c>
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <xQueueGenericSendFromISR+0x40>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <xQueueGenericSendFromISR+0x42>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d103      	bne.n	800250e <xQueueGenericSendFromISR+0x6a>
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <xQueueGenericSendFromISR+0x6e>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <xQueueGenericSendFromISR+0x70>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	623b      	str	r3, [r7, #32]
    }
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800252e:	f002 f835 	bl	800459c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002532:	f3ef 8211 	mrs	r2, BASEPRI
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	61fa      	str	r2, [r7, #28]
 8002548:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800254a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <xQueueGenericSendFromISR+0xbc>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d13e      	bne.n	80025de <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002576:	f000 f91f 	bl	80027b8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800257a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002582:	d112      	bne.n	80025aa <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2b00      	cmp	r3, #0
 800258a:	d025      	beq.n	80025d8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	3324      	adds	r3, #36	; 0x24
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fec5 	bl	8003320 <xTaskRemoveFromEventList>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01d      	beq.n	80025d8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01a      	beq.n	80025d8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e016      	b.n	80025d8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80025aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80025ae:	2b7f      	cmp	r3, #127	; 0x7f
 80025b0:	d10a      	bne.n	80025c8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80025b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b6:	f383 8811 	msr	BASEPRI, r3
 80025ba:	f3bf 8f6f 	isb	sy
 80025be:	f3bf 8f4f 	dsb	sy
 80025c2:	617b      	str	r3, [r7, #20]
    }
 80025c4:	bf00      	nop
 80025c6:	e7fe      	b.n	80025c6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025cc:	3301      	adds	r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	b25a      	sxtb	r2, r3
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80025d8:	2301      	movs	r3, #1
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80025dc:	e001      	b.n	80025e2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80025ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3740      	adds	r7, #64	; 0x40
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <xQueueReceive+0x30>
        __asm volatile
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	623b      	str	r3, [r7, #32]
    }
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <xQueueReceive+0x3e>
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <xQueueReceive+0x42>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueReceive+0x44>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueReceive+0x5e>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	61fb      	str	r3, [r7, #28]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002656:	f000 ffff 	bl	8003658 <xTaskGetSchedulerState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <xQueueReceive+0x6e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <xQueueReceive+0x72>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueReceive+0x74>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueReceive+0x8e>
        __asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61bb      	str	r3, [r7, #24]
    }
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002686:	f001 fea7 	bl	80043d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01f      	beq.n	80026d6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800269a:	f000 f8f7 	bl	800288c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00f      	beq.n	80026ce <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	3310      	adds	r3, #16
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fe34 	bl	8003320 <xTaskRemoveFromEventList>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <xQueueReceive+0x1bc>)
 80026c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026ce:	f001 feb3 	bl	8004438 <vPortExitCritical>
                return pdPASS;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e069      	b.n	80027aa <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026dc:	f001 feac 	bl	8004438 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e062      	b.n	80027aa <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fe78 	bl	80033e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026f8:	f001 fe9e 	bl	8004438 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026fc:	f000 fbf2 	bl	8002ee4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002700:	f001 fe6a 	bl	80043d8 <vPortEnterCritical>
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800270a:	b25b      	sxtb	r3, r3
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d103      	bne.n	800271a <xQueueReceive+0x122>
 8002712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002720:	b25b      	sxtb	r3, r3
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002726:	d103      	bne.n	8002730 <xQueueReceive+0x138>
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002730:	f001 fe82 	bl	8004438 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002734:	1d3a      	adds	r2, r7, #4
 8002736:	f107 0310 	add.w	r3, r7, #16
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fe67 	bl	8003410 <xTaskCheckForTimeOut>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d123      	bne.n	8002790 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800274a:	f000 f917 	bl	800297c <prvIsQueueEmpty>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d017      	beq.n	8002784 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	3324      	adds	r3, #36	; 0x24
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fd8f 	bl	8003280 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002764:	f000 f8b8 	bl	80028d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002768:	f000 fbca 	bl	8002f00 <xTaskResumeAll>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d189      	bne.n	8002686 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <xQueueReceive+0x1bc>)
 8002774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	e780      	b.n	8002686 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002786:	f000 f8a7 	bl	80028d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800278a:	f000 fbb9 	bl	8002f00 <xTaskResumeAll>
 800278e:	e77a      	b.n	8002686 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002792:	f000 f8a1 	bl	80028d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002796:	f000 fbb3 	bl	8002f00 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800279a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800279c:	f000 f8ee 	bl	800297c <prvIsQueueEmpty>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f43f af6f 	beq.w	8002686 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80027a8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3730      	adds	r7, #48	; 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000ed04 	.word	0xe000ed04

080027b8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10d      	bne.n	80027f2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d14d      	bne.n	800287a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 ff56 	bl	8003694 <xTaskPriorityDisinherit>
 80027e8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e043      	b.n	800287a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d119      	bne.n	800282c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6858      	ldr	r0, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	461a      	mov	r2, r3
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	f002 f92c 	bl	8004a60 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	441a      	add	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	d32b      	bcc.n	800287a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	e026      	b.n	800287a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68d8      	ldr	r0, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	461a      	mov	r2, r3
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	f002 f912 	bl	8004a60 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	425b      	negs	r3, r3
 8002846:	441a      	add	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d207      	bcs.n	8002868 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	425b      	negs	r3, r3
 8002862:	441a      	add	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d105      	bne.n	800287a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	3b01      	subs	r3, #1
 8002878:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002882:	697b      	ldr	r3, [r7, #20]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d018      	beq.n	80028d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	441a      	add	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d303      	bcc.n	80028c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68d9      	ldr	r1, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	461a      	mov	r2, r3
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	f002 f8c8 	bl	8004a60 <memcpy>
    }
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028e0:	f001 fd7a 	bl	80043d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ec:	e011      	b.n	8002912 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3324      	adds	r3, #36	; 0x24
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd10 	bl	8003320 <xTaskRemoveFromEventList>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002906:	f000 fde9 	bl	80034dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3b01      	subs	r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	dce9      	bgt.n	80028ee <prvUnlockQueue+0x16>
 800291a:	e000      	b.n	800291e <prvUnlockQueue+0x46>
                        break;
 800291c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002926:	f001 fd87 	bl	8004438 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800292a:	f001 fd55 	bl	80043d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002934:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002936:	e011      	b.n	800295c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3310      	adds	r3, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fceb 	bl	8003320 <xTaskRemoveFromEventList>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002950:	f000 fdc4 	bl	80034dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002954:	7bbb      	ldrb	r3, [r7, #14]
 8002956:	3b01      	subs	r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800295c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002960:	2b00      	cmp	r3, #0
 8002962:	dce9      	bgt.n	8002938 <prvUnlockQueue+0x60>
 8002964:	e000      	b.n	8002968 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002966:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002970:	f001 fd62 	bl	8004438 <vPortExitCritical>
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002984:	f001 fd28 	bl	80043d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002990:	2301      	movs	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e001      	b.n	800299a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800299a:	f001 fd4d 	bl	8004438 <vPortExitCritical>

    return xReturn;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029b0:	f001 fd12 	bl	80043d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d102      	bne.n	80029c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e001      	b.n	80029ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029ca:	f001 fd35 	bl	8004438 <vPortExitCritical>

    return xReturn;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e014      	b.n	8002a12 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029e8:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <vQueueAddToRegistry+0x50>)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029f4:	490c      	ldr	r1, [pc, #48]	; (8002a28 <vQueueAddToRegistry+0x50>)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <vQueueAddToRegistry+0x50>)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002a0a:	e006      	b.n	8002a1a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b07      	cmp	r3, #7
 8002a16:	d9e7      	bls.n	80029e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000098 	.word	0x20000098

08002a2c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a3c:	f001 fccc 	bl	80043d8 <vPortEnterCritical>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a4c:	d103      	bne.n	8002a56 <vQueueWaitForMessageRestricted+0x2a>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a62:	d103      	bne.n	8002a6c <vQueueWaitForMessageRestricted+0x40>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a6c:	f001 fce4 	bl	8004438 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3324      	adds	r3, #36	; 0x24
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fc21 	bl	80032c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f7ff ff26 	bl	80028d8 <prvUnlockQueue>
    }
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af04      	add	r7, sp, #16
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fdb7 	bl	800461c <pvPortMalloc>
 8002aae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00e      	beq.n	8002ad4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ab6:	2058      	movs	r0, #88	; 0x58
 8002ab8:	f001 fdb0 	bl	800461c <pvPortMalloc>
 8002abc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aca:	e005      	b.n	8002ad8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002acc:	6978      	ldr	r0, [r7, #20]
 8002ace:	f001 fe85 	bl	80047dc <vPortFree>
 8002ad2:	e001      	b.n	8002ad8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d013      	beq.n	8002b06 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9303      	str	r3, [sp, #12]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f80e 	bl	8002b16 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002afa:	69f8      	ldr	r0, [r7, #28]
 8002afc:	f000 f8a2 	bl	8002c44 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b00:	2301      	movs	r3, #1
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e002      	b.n	8002b0c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
    }
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b088      	sub	sp, #32
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	21a5      	movs	r1, #165	; 0xa5
 8002b30:	f001 ffa4 	bl	8004a7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f023 0307 	bic.w	r3, r3, #7
 8002b4c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	617b      	str	r3, [r7, #20]
    }
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01f      	beq.n	8002bb4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e012      	b.n	8002ba0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	7819      	ldrb	r1, [r3, #0]
 8002b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	3334      	adds	r3, #52	; 0x34
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b09      	cmp	r3, #9
 8002ba4:	d9e9      	bls.n	8002b7a <prvInitialiseNewTask+0x64>
 8002ba6:	e000      	b.n	8002baa <prvInitialiseNewTask+0x94>
            {
                break;
 8002ba8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bb2:	e003      	b.n	8002bbc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d901      	bls.n	8002bc6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f9e5 	bl	8001fac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	3318      	adds	r3, #24
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f9e0 	bl	8001fac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	f1c3 0205 	rsb	r2, r3, #5
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	3350      	adds	r3, #80	; 0x50
 8002c06:	2204      	movs	r2, #4
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 ff36 	bl	8004a7c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	3354      	adds	r3, #84	; 0x54
 8002c14:	2201      	movs	r2, #1
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 ff2f 	bl	8004a7c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	69b8      	ldr	r0, [r7, #24]
 8002c24:	f001 faaa 	bl	800417c <pxPortInitialiseStack>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c38:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c3a:	bf00      	nop
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c4c:	f001 fbc4 	bl	80043d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c50:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <prvAddNewTaskToReadyList+0xc0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <prvAddNewTaskToReadyList+0xc0>)
 8002c58:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <prvAddNewTaskToReadyList+0xc4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <prvAddNewTaskToReadyList+0xc4>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <prvAddNewTaskToReadyList+0xc0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d110      	bne.n	8002c92 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c70:	f000 fc58 	bl	8003524 <prvInitialiseTaskLists>
 8002c74:	e00d      	b.n	8002c92 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <prvAddNewTaskToReadyList+0xc8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c7e:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <prvAddNewTaskToReadyList+0xc4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d802      	bhi.n	8002c92 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c8c:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <prvAddNewTaskToReadyList+0xc4>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c92:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <prvAddNewTaskToReadyList+0xcc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <prvAddNewTaskToReadyList+0xcc>)
 8002c9a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <prvAddNewTaskToReadyList+0xcc>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <prvAddNewTaskToReadyList+0xd0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <prvAddNewTaskToReadyList+0xd0>)
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <prvAddNewTaskToReadyList+0xd4>)
 8002cc4:	441a      	add	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7ff f97a 	bl	8001fc6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cd2:	f001 fbb1 	bl	8004438 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <prvAddNewTaskToReadyList+0xc8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00e      	beq.n	8002cfc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <prvAddNewTaskToReadyList+0xc4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d207      	bcs.n	8002cfc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <prvAddNewTaskToReadyList+0xd8>)
 8002cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200001b0 	.word	0x200001b0
 8002d08:	200000d8 	.word	0x200000d8
 8002d0c:	200001bc 	.word	0x200001bc
 8002d10:	200001cc 	.word	0x200001cc
 8002d14:	200001b8 	.word	0x200001b8
 8002d18:	200000dc 	.word	0x200000dc
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d28:	f001 fb56 	bl	80043d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <vTaskDelete+0x18>
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <vTaskDelete+0xf8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e000      	b.n	8002d3a <vTaskDelete+0x1a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f99d 	bl	8002080 <uxListRemove>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d115      	bne.n	8002d78 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4932      	ldr	r1, [pc, #200]	; (8002e1c <vTaskDelete+0xfc>)
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <vTaskDelete+0x58>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	2201      	movs	r2, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <vTaskDelete+0x100>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4013      	ands	r3, r2
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <vTaskDelete+0x100>)
 8002d76:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3318      	adds	r3, #24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f97b 	bl	8002080 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <vTaskDelete+0x104>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <vTaskDelete+0x104>)
 8002d92:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <vTaskDelete+0xf8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d10b      	bne.n	8002db6 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4820      	ldr	r0, [pc, #128]	; (8002e28 <vTaskDelete+0x108>)
 8002da6:	f7ff f90e 	bl	8001fc6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <vTaskDelete+0x10c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <vTaskDelete+0x10c>)
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e009      	b.n	8002dca <vTaskDelete+0xaa>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <vTaskDelete+0x110>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <vTaskDelete+0x110>)
 8002dbe:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
                prvDeleteTCB( pxTCB );
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fc1d 	bl	8003600 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002dc6:	f000 fc2b 	bl	8003620 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002dca:	f001 fb35 	bl	8004438 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <vTaskDelete+0x114>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01b      	beq.n	8002e0e <vTaskDelete+0xee>
        {
            if( pxTCB == pxCurrentTCB )
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <vTaskDelete+0xf8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d116      	bne.n	8002e0e <vTaskDelete+0xee>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <vTaskDelete+0x118>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <vTaskDelete+0xde>
        __asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	60bb      	str	r3, [r7, #8]
    }
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <vTaskDelete+0xdc>
                portYIELD_WITHIN_API();
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <vTaskDelete+0x11c>)
 8002e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200000d8 	.word	0x200000d8
 8002e1c:	200000dc 	.word	0x200000dc
 8002e20:	200001b8 	.word	0x200001b8
 8002e24:	200001cc 	.word	0x200001cc
 8002e28:	20000184 	.word	0x20000184
 8002e2c:	20000198 	.word	0x20000198
 8002e30:	200001b0 	.word	0x200001b0
 8002e34:	200001bc 	.word	0x200001bc
 8002e38:	200001d8 	.word	0x200001d8
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <vTaskStartScheduler+0x88>)
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2282      	movs	r2, #130	; 0x82
 8002e52:	491e      	ldr	r1, [pc, #120]	; (8002ecc <vTaskStartScheduler+0x8c>)
 8002e54:	481e      	ldr	r0, [pc, #120]	; (8002ed0 <vTaskStartScheduler+0x90>)
 8002e56:	f7ff fe1d 	bl	8002a94 <xTaskCreate>
 8002e5a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e62:	f000 fe79 	bl	8003b58 <xTimerCreateTimerTask>
 8002e66:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d116      	bne.n	8002e9c <vTaskStartScheduler+0x5c>
        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	60bb      	str	r3, [r7, #8]
    }
 8002e80:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <vTaskStartScheduler+0x94>)
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e88:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <vTaskStartScheduler+0x98>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <vTaskStartScheduler+0x9c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002e96:	f001 f9fd 	bl	8004294 <xPortStartScheduler>
 8002e9a:	e00e      	b.n	8002eba <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea2:	d10a      	bne.n	8002eba <vTaskStartScheduler+0x7a>
        __asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	607b      	str	r3, [r7, #4]
    }
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <vTaskStartScheduler+0xa0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200001d4 	.word	0x200001d4
 8002ecc:	08004acc 	.word	0x08004acc
 8002ed0:	080034f5 	.word	0x080034f5
 8002ed4:	200001d0 	.word	0x200001d0
 8002ed8:	200001bc 	.word	0x200001bc
 8002edc:	200001b4 	.word	0x200001b4
 8002ee0:	2000000c 	.word	0x2000000c

08002ee4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <vTaskSuspendAll+0x18>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a03      	ldr	r2, [pc, #12]	; (8002efc <vTaskSuspendAll+0x18>)
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	200001d8 	.word	0x200001d8

08002f00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <xTaskResumeAll+0x114>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <xTaskResumeAll+0x2c>
        __asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	603b      	str	r3, [r7, #0]
    }
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f2c:	f001 fa54 	bl	80043d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f30:	4b38      	ldr	r3, [pc, #224]	; (8003014 <xTaskResumeAll+0x114>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	4a37      	ldr	r2, [pc, #220]	; (8003014 <xTaskResumeAll+0x114>)
 8002f38:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <xTaskResumeAll+0x114>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d161      	bne.n	8003006 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f42:	4b35      	ldr	r3, [pc, #212]	; (8003018 <xTaskResumeAll+0x118>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d05d      	beq.n	8003006 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f4a:	e02e      	b.n	8002faa <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f4c:	4b33      	ldr	r3, [pc, #204]	; (800301c <xTaskResumeAll+0x11c>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3318      	adds	r3, #24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f891 	bl	8002080 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f88c 	bl	8002080 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <xTaskResumeAll+0x120>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <xTaskResumeAll+0x120>)
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4a27      	ldr	r2, [pc, #156]	; (8003024 <xTaskResumeAll+0x124>)
 8002f88:	441a      	add	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f7ff f818 	bl	8001fc6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <xTaskResumeAll+0x128>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <xTaskResumeAll+0x12c>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <xTaskResumeAll+0x11c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1cc      	bne.n	8002f4c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fb8:	f000 fb32 	bl	8003620 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <xTaskResumeAll+0x130>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fc8:	f000 f846 	bl	8003058 <xTaskIncrementTick>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <xTaskResumeAll+0x12c>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f1      	bne.n	8002fc8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002fe4:	4b12      	ldr	r3, [pc, #72]	; (8003030 <xTaskResumeAll+0x130>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <xTaskResumeAll+0x12c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <xTaskResumeAll+0x134>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003006:	f001 fa17 	bl	8004438 <vPortExitCritical>

    return xAlreadyYielded;
 800300a:	68bb      	ldr	r3, [r7, #8]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200001d8 	.word	0x200001d8
 8003018:	200001b0 	.word	0x200001b0
 800301c:	20000170 	.word	0x20000170
 8003020:	200001b8 	.word	0x200001b8
 8003024:	200000dc 	.word	0x200000dc
 8003028:	200000d8 	.word	0x200000d8
 800302c:	200001c4 	.word	0x200001c4
 8003030:	200001c0 	.word	0x200001c0
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <xTaskGetTickCount+0x1c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200001b4 	.word	0x200001b4

08003058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003062:	4b4e      	ldr	r3, [pc, #312]	; (800319c <xTaskIncrementTick+0x144>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 808e 	bne.w	8003188 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800306c:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <xTaskIncrementTick+0x148>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003074:	4a4a      	ldr	r2, [pc, #296]	; (80031a0 <xTaskIncrementTick+0x148>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d120      	bne.n	80030c2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003080:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <xTaskIncrementTick+0x14c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <xTaskIncrementTick+0x48>
        __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	603b      	str	r3, [r7, #0]
    }
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xTaskIncrementTick+0x46>
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b40      	ldr	r3, [pc, #256]	; (80031a8 <xTaskIncrementTick+0x150>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3e      	ldr	r2, [pc, #248]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4a3e      	ldr	r2, [pc, #248]	; (80031a8 <xTaskIncrementTick+0x150>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <xTaskIncrementTick+0x154>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <xTaskIncrementTick+0x154>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	f000 faaf 	bl	8003620 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030c2:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d348      	bcc.n	800315e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030dc:	601a      	str	r2, [r3, #0]
                    break;
 80030de:	e03e      	b.n	800315e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d203      	bcs.n	8003100 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030f8:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030fe:	e02e      	b.n	800315e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3304      	adds	r3, #4
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe ffbb 	bl	8002080 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3318      	adds	r3, #24
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe ffb2 	bl	8002080 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	2201      	movs	r2, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <xTaskIncrementTick+0x15c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <xTaskIncrementTick+0x15c>)
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <xTaskIncrementTick+0x160>)
 800313c:	441a      	add	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7fe ff3e 	bl	8001fc6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <xTaskIncrementTick+0x164>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	429a      	cmp	r2, r3
 8003156:	d3b9      	bcc.n	80030cc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003158:	2301      	movs	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800315c:	e7b6      	b.n	80030cc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <xTaskIncrementTick+0x164>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	4914      	ldr	r1, [pc, #80]	; (80031b8 <xTaskIncrementTick+0x160>)
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d901      	bls.n	800317a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <xTaskIncrementTick+0x168>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e004      	b.n	8003192 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <xTaskIncrementTick+0x16c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <xTaskIncrementTick+0x16c>)
 8003190:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003192:	697b      	ldr	r3, [r7, #20]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200001d8 	.word	0x200001d8
 80031a0:	200001b4 	.word	0x200001b4
 80031a4:	20000168 	.word	0x20000168
 80031a8:	2000016c 	.word	0x2000016c
 80031ac:	200001c8 	.word	0x200001c8
 80031b0:	200001d0 	.word	0x200001d0
 80031b4:	200001b8 	.word	0x200001b8
 80031b8:	200000dc 	.word	0x200000dc
 80031bc:	200000d8 	.word	0x200000d8
 80031c0:	200001c4 	.word	0x200001c4
 80031c4:	200001c0 	.word	0x200001c0

080031c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031ce:	4b27      	ldr	r3, [pc, #156]	; (800326c <vTaskSwitchContext+0xa4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031d6:	4b26      	ldr	r3, [pc, #152]	; (8003270 <vTaskSwitchContext+0xa8>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031dc:	e03f      	b.n	800325e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <vTaskSwitchContext+0xa8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <vTaskSwitchContext+0xac>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f1c3 031f 	rsb	r3, r3, #31
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	491f      	ldr	r1, [pc, #124]	; (8003278 <vTaskSwitchContext+0xb0>)
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <vTaskSwitchContext+0x5c>
        __asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	607b      	str	r3, [r7, #4]
    }
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <vTaskSwitchContext+0x5a>
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <vTaskSwitchContext+0xb0>)
 8003230:	4413      	add	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	3308      	adds	r3, #8
 8003246:	429a      	cmp	r2, r3
 8003248:	d104      	bne.n	8003254 <vTaskSwitchContext+0x8c>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <vTaskSwitchContext+0xb4>)
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	200001d8 	.word	0x200001d8
 8003270:	200001c4 	.word	0x200001c4
 8003274:	200001b8 	.word	0x200001b8
 8003278:	200000dc 	.word	0x200000dc
 800327c:	200000d8 	.word	0x200000d8

08003280 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	60fb      	str	r3, [r7, #12]
    }
 80032a2:	bf00      	nop
 80032a4:	e7fe      	b.n	80032a4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <vTaskPlaceOnEventList+0x44>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3318      	adds	r3, #24
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe fead 	bl	800200e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032b4:	2101      	movs	r1, #1
 80032b6:	6838      	ldr	r0, [r7, #0]
 80032b8:	f000 fbe8 	bl	8003a8c <prvAddCurrentTaskToDelayedList>
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200000d8 	.word	0x200000d8

080032c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	617b      	str	r3, [r7, #20]
    }
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <vTaskPlaceOnEventListRestricted+0x54>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3318      	adds	r3, #24
 80032f6:	4619      	mov	r1, r3
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7fe fe64 	bl	8001fc6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003308:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	68b8      	ldr	r0, [r7, #8]
 800330e:	f000 fbbd 	bl	8003a8c <prvAddCurrentTaskToDelayedList>
    }
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200000d8 	.word	0x200000d8

08003320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	60fb      	str	r3, [r7, #12]
    }
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	3318      	adds	r3, #24
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe fe95 	bl	8002080 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <xTaskRemoveFromEventList+0xac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11c      	bne.n	8003398 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	3304      	adds	r3, #4
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fe8c 	bl	8002080 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <xTaskRemoveFromEventList+0xb0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <xTaskRemoveFromEventList+0xb0>)
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <xTaskRemoveFromEventList+0xb4>)
 8003388:	441a      	add	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7fe fe18 	bl	8001fc6 <vListInsertEnd>
 8003396:	e005      	b.n	80033a4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	3318      	adds	r3, #24
 800339c:	4619      	mov	r1, r3
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <xTaskRemoveFromEventList+0xb8>)
 80033a0:	f7fe fe11 	bl	8001fc6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <xTaskRemoveFromEventList+0xbc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d905      	bls.n	80033be <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033b2:	2301      	movs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <xTaskRemoveFromEventList+0xc0>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e001      	b.n	80033c2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80033c2:	697b      	ldr	r3, [r7, #20]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	200001d8 	.word	0x200001d8
 80033d0:	200001b8 	.word	0x200001b8
 80033d4:	200000dc 	.word	0x200000dc
 80033d8:	20000170 	.word	0x20000170
 80033dc:	200000d8 	.word	0x200000d8
 80033e0:	200001c4 	.word	0x200001c4

080033e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <vTaskInternalSetTimeOutState+0x24>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <vTaskInternalSetTimeOutState+0x28>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	605a      	str	r2, [r3, #4]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	200001c8 	.word	0x200001c8
 800340c:	200001b4 	.word	0x200001b4

08003410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	613b      	str	r3, [r7, #16]
    }
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60fb      	str	r3, [r7, #12]
    }
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003452:	f000 ffc1 	bl	80043d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003456:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <xTaskCheckForTimeOut+0xc4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346e:	d102      	bne.n	8003476 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e026      	b.n	80034c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <xTaskCheckForTimeOut+0xc8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d00a      	beq.n	8003498 <xTaskCheckForTimeOut+0x88>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	429a      	cmp	r2, r3
 800348a:	d305      	bcc.n	8003498 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e015      	b.n	80034c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d20b      	bcs.n	80034ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad2      	subs	r2, r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff98 	bl	80033e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	e004      	b.n	80034c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034c4:	f000 ffb8 	bl	8004438 <vPortExitCritical>

    return xReturn;
 80034c8:	69fb      	ldr	r3, [r7, #28]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200001b4 	.word	0x200001b4
 80034d8:	200001c8 	.word	0x200001c8

080034dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <vTaskMissedYield+0x14>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	200001c4 	.word	0x200001c4

080034f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80034fc:	f000 f852 	bl	80035a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <prvIdleTask+0x28>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d9f9      	bls.n	80034fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <prvIdleTask+0x2c>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003518:	e7f0      	b.n	80034fc <prvIdleTask+0x8>
 800351a:	bf00      	nop
 800351c:	200000dc 	.word	0x200000dc
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	e00c      	b.n	800354a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <prvInitialiseTaskLists+0x60>)
 800353c:	4413      	add	r3, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe fd14 	bl	8001f6c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3301      	adds	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b04      	cmp	r3, #4
 800354e:	d9ef      	bls.n	8003530 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <prvInitialiseTaskLists+0x64>)
 8003552:	f7fe fd0b 	bl	8001f6c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003556:	480d      	ldr	r0, [pc, #52]	; (800358c <prvInitialiseTaskLists+0x68>)
 8003558:	f7fe fd08 	bl	8001f6c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800355c:	480c      	ldr	r0, [pc, #48]	; (8003590 <prvInitialiseTaskLists+0x6c>)
 800355e:	f7fe fd05 	bl	8001f6c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003562:	480c      	ldr	r0, [pc, #48]	; (8003594 <prvInitialiseTaskLists+0x70>)
 8003564:	f7fe fd02 	bl	8001f6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <prvInitialiseTaskLists+0x74>)
 800356a:	f7fe fcff 	bl	8001f6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <prvInitialiseTaskLists+0x78>)
 8003570:	4a05      	ldr	r2, [pc, #20]	; (8003588 <prvInitialiseTaskLists+0x64>)
 8003572:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <prvInitialiseTaskLists+0x7c>)
 8003576:	4a05      	ldr	r2, [pc, #20]	; (800358c <prvInitialiseTaskLists+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200000dc 	.word	0x200000dc
 8003588:	20000140 	.word	0x20000140
 800358c:	20000154 	.word	0x20000154
 8003590:	20000170 	.word	0x20000170
 8003594:	20000184 	.word	0x20000184
 8003598:	2000019c 	.word	0x2000019c
 800359c:	20000168 	.word	0x20000168
 80035a0:	2000016c 	.word	0x2000016c

080035a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035aa:	e019      	b.n	80035e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80035ac:	f000 ff14 	bl	80043d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <prvCheckTasksWaitingTermination+0x50>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fd5f 	bl	8002080 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <prvCheckTasksWaitingTermination+0x54>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <prvCheckTasksWaitingTermination+0x54>)
 80035ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <prvCheckTasksWaitingTermination+0x58>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <prvCheckTasksWaitingTermination+0x58>)
 80035d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80035d6:	f000 ff2f 	bl	8004438 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f810 	bl	8003600 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <prvCheckTasksWaitingTermination+0x58>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e1      	bne.n	80035ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000184 	.word	0x20000184
 80035f8:	200001b0 	.word	0x200001b0
 80035fc:	20000198 	.word	0x20000198

08003600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	4618      	mov	r0, r3
 800360e:	f001 f8e5 	bl	80047dc <vPortFree>
                vPortFree( pxTCB );
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f001 f8e2 	bl	80047dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <prvResetNextTaskUnblockTime+0x30>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <prvResetNextTaskUnblockTime+0x34>)
 8003630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003634:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003636:	e005      	b.n	8003644 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <prvResetNextTaskUnblockTime+0x30>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <prvResetNextTaskUnblockTime+0x34>)
 8003642:	6013      	str	r3, [r2, #0]
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000168 	.word	0x20000168
 8003654:	200001d0 	.word	0x200001d0

08003658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <xTaskGetSchedulerState+0x34>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003666:	2301      	movs	r3, #1
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	e008      	b.n	800367e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <xTaskGetSchedulerState+0x38>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003674:	2302      	movs	r3, #2
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	e001      	b.n	800367e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800367e:	687b      	ldr	r3, [r7, #4]
    }
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	200001bc 	.word	0x200001bc
 8003690:	200001d8 	.word	0x200001d8

08003694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d063      	beq.n	8003772 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <xTaskPriorityDisinherit+0xe8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d00a      	beq.n	80036ca <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	60fb      	str	r3, [r7, #12]
    }
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60bb      	str	r3, [r7, #8]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d039      	beq.n	8003772 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d135      	bne.n	8003772 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	3304      	adds	r3, #4
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fcb8 	bl	8002080 <uxListRemove>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	2201      	movs	r2, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43da      	mvns	r2, r3
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <xTaskPriorityDisinherit+0xec>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4013      	ands	r3, r2
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <xTaskPriorityDisinherit+0xec>)
 800372a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	f1c3 0205 	rsb	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2201      	movs	r2, #1
 8003746:	409a      	lsls	r2, r3
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <xTaskPriorityDisinherit+0xec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4313      	orrs	r3, r2
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <xTaskPriorityDisinherit+0xec>)
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <xTaskPriorityDisinherit+0xf0>)
 8003760:	441a      	add	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fe fc2c 	bl	8001fc6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800376e:	2301      	movs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003772:	697b      	ldr	r3, [r7, #20]
    }
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200000d8 	.word	0x200000d8
 8003780:	200001b8 	.word	0x200001b8
 8003784:	200000dc 	.word	0x200000dc

08003788 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	613b      	str	r3, [r7, #16]
    }
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80037b2:	f000 fe11 	bl	80043d8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80037b6:	4b32      	ldr	r3, [pc, #200]	; (8003880 <xTaskGenericNotifyWait+0xf8>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	3354      	adds	r3, #84	; 0x54
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d022      	beq.n	800380e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <xTaskGenericNotifyWait+0xf8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	3214      	adds	r2, #20
 80037d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	43d2      	mvns	r2, r2
 80037d8:	4011      	ands	r1, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	3214      	adds	r2, #20
 80037de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80037e2:	4b27      	ldr	r3, [pc, #156]	; (8003880 <xTaskGenericNotifyWait+0xf8>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	3354      	adds	r3, #84	; 0x54
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037f6:	2101      	movs	r1, #1
 80037f8:	6a38      	ldr	r0, [r7, #32]
 80037fa:	f000 f947 	bl	8003a8c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80037fe:	4b21      	ldr	r3, [pc, #132]	; (8003884 <xTaskGenericNotifyWait+0xfc>)
 8003800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800380e:	f000 fe13 	bl	8004438 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003812:	f000 fde1 	bl	80043d8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <xTaskGenericNotifyWait+0xf8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	3214      	adds	r2, #20
 8003824:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <xTaskGenericNotifyWait+0xf8>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	3354      	adds	r3, #84	; 0x54
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d002      	beq.n	8003844 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e00e      	b.n	8003862 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <xTaskGenericNotifyWait+0xf8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	3214      	adds	r2, #20
 800384c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	43d2      	mvns	r2, r2
 8003854:	4011      	ands	r1, r2
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	3214      	adds	r2, #20
 800385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <xTaskGenericNotifyWait+0xf8>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	3354      	adds	r3, #84	; 0x54
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003870:	f000 fde2 	bl	8004438 <vPortExitCritical>

        return xReturn;
 8003874:	697b      	ldr	r3, [r7, #20]
    }
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200000d8 	.word	0x200000d8
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003888:	b580      	push	{r7, lr}
 800388a:	b090      	sub	sp, #64	; 0x40
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003896:	2301      	movs	r3, #1
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038d2:	f000 fe63 	bl	800459c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80038da:	f3ef 8211 	mrs	r2, BASEPRI
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	627a      	str	r2, [r7, #36]	; 0x24
 80038f0:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80038f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	3214      	adds	r2, #20
 8003902:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003908:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800390a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4413      	add	r3, r2
 8003910:	3354      	adds	r3, #84	; 0x54
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4413      	add	r3, r2
 800391e:	3354      	adds	r3, #84	; 0x54
 8003920:	2202      	movs	r2, #2
 8003922:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b04      	cmp	r3, #4
 8003928:	d83b      	bhi.n	80039a2 <xTaskGenericNotifyFromISR+0x11a>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <xTaskGenericNotifyFromISR+0xa8>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	080039c1 	.word	0x080039c1
 8003934:	08003945 	.word	0x08003945
 8003938:	08003961 	.word	0x08003961
 800393c:	08003979 	.word	0x08003979
 8003940:	08003987 	.word	0x08003987
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	3214      	adds	r2, #20
 800394a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	ea42 0103 	orr.w	r1, r2, r3
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	3214      	adds	r2, #20
 800395a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800395e:	e032      	b.n	80039c6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	3214      	adds	r2, #20
 8003966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	3214      	adds	r2, #20
 8003972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003976:	e026      	b.n	80039c6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	3214      	adds	r2, #20
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003984:	e01f      	b.n	80039c6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800398a:	2b02      	cmp	r3, #2
 800398c:	d006      	beq.n	800399c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	3214      	adds	r2, #20
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800399a:	e014      	b.n	80039c6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800399c:	2300      	movs	r3, #0
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80039a0:	e011      	b.n	80039c6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80039a2:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <xTaskGenericNotifyFromISR+0x1e8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	61fb      	str	r3, [r7, #28]
    }
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xTaskGenericNotifyFromISR+0x136>
                    break;
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80039c4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80039c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d145      	bne.n	8003a5a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	61bb      	str	r3, [r7, #24]
    }
 80039e8:	bf00      	nop
 80039ea:	e7fe      	b.n	80039ea <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ec:	4b21      	ldr	r3, [pc, #132]	; (8003a74 <xTaskGenericNotifyFromISR+0x1ec>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11c      	bne.n	8003a2e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	3304      	adds	r3, #4
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fb41 	bl	8002080 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	2201      	movs	r2, #1
 8003a04:	409a      	lsls	r2, r3
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <xTaskGenericNotifyFromISR+0x1f0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <xTaskGenericNotifyFromISR+0x1f0>)
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <xTaskGenericNotifyFromISR+0x1f4>)
 8003a1e:	441a      	add	r2, r3
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f7fe facd 	bl	8001fc6 <vListInsertEnd>
 8003a2c:	e005      	b.n	8003a3a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	3318      	adds	r3, #24
 8003a32:	4619      	mov	r1, r3
 8003a34:	4812      	ldr	r0, [pc, #72]	; (8003a80 <xTaskGenericNotifyFromISR+0x1f8>)
 8003a36:	f7fe fac6 	bl	8001fc6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <xTaskGenericNotifyFromISR+0x1fc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d908      	bls.n	8003a5a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <xTaskGenericNotifyFromISR+0x200>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f383 8811 	msr	BASEPRI, r3
    }
 8003a64:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3740      	adds	r7, #64	; 0x40
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200001b4 	.word	0x200001b4
 8003a74:	200001d8 	.word	0x200001d8
 8003a78:	200001b8 	.word	0x200001b8
 8003a7c:	200000dc 	.word	0x200000dc
 8003a80:	20000170 	.word	0x20000170
 8003a84:	200000d8 	.word	0x200000d8
 8003a88:	200001c4 	.word	0x200001c4

08003a8c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe faec 	bl	8002080 <uxListRemove>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ac4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003acc:	d10a      	bne.n	8003ae4 <prvAddCurrentTaskToDelayedList+0x58>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	481a      	ldr	r0, [pc, #104]	; (8003b48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ade:	f7fe fa72 	bl	8001fc6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ae2:	e026      	b.n	8003b32 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d209      	bcs.n	8003b10 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f7fe fa80 	bl	800200e <vListInsert>
}
 8003b0e:	e010      	b.n	8003b32 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7fe fa76 	bl	800200e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d202      	bcs.n	8003b32 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b2c:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6013      	str	r3, [r2, #0]
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200001b4 	.word	0x200001b4
 8003b40:	200000d8 	.word	0x200000d8
 8003b44:	200001b8 	.word	0x200001b8
 8003b48:	2000019c 	.word	0x2000019c
 8003b4c:	2000016c 	.word	0x2000016c
 8003b50:	20000168 	.word	0x20000168
 8003b54:	200001d0 	.word	0x200001d0

08003b58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b62:	f000 fad5 	bl	8004110 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <xTimerCreateTimerTask+0x54>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <xTimerCreateTimerTask+0x58>)
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2302      	movs	r3, #2
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b7c:	490d      	ldr	r1, [pc, #52]	; (8003bb4 <xTimerCreateTimerTask+0x5c>)
 8003b7e:	480e      	ldr	r0, [pc, #56]	; (8003bb8 <xTimerCreateTimerTask+0x60>)
 8003b80:	f7fe ff88 	bl	8002a94 <xTaskCreate>
 8003b84:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	603b      	str	r3, [r7, #0]
    }
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ba2:	687b      	ldr	r3, [r7, #4]
    }
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	2000020c 	.word	0x2000020c
 8003bb0:	20000210 	.word	0x20000210
 8003bb4:	08004ad4 	.word	0x08004ad4
 8003bb8:	08003cf1 	.word	0x08003cf1

08003bbc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <xTimerGenericCommand+0x2e>
        __asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	623b      	str	r3, [r7, #32]
    }
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <xTimerGenericCommand+0x98>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d02a      	beq.n	8003c48 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	dc18      	bgt.n	8003c36 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c04:	f7ff fd28 	bl	8003658 <xTaskGetSchedulerState>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d109      	bne.n	8003c22 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <xTimerGenericCommand+0x98>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f107 0114 	add.w	r1, r7, #20
 8003c16:	2300      	movs	r3, #0
 8003c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1a:	f7fe fb45 	bl	80022a8 <xQueueGenericSend>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8003c20:	e012      	b.n	8003c48 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <xTimerGenericCommand+0x98>)
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	f107 0114 	add.w	r1, r7, #20
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f7fe fb3b 	bl	80022a8 <xQueueGenericSend>
 8003c32:	6278      	str	r0, [r7, #36]	; 0x24
 8003c34:	e008      	b.n	8003c48 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <xTimerGenericCommand+0x98>)
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	f107 0114 	add.w	r1, r7, #20
 8003c3e:	2300      	movs	r3, #0
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	f7fe fc2f 	bl	80024a4 <xQueueGenericSendFromISR>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3728      	adds	r7, #40	; 0x28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000020c 	.word	0x2000020c

08003c58 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <prvProcessExpiredTimer+0x94>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fa05 	bl	8002080 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d022      	beq.n	8003cca <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	18d1      	adds	r1, r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f000 f8d1 	bl	8003e38 <prvInsertTimerInActiveList>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01f      	beq.n	8003cdc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff88 	bl	8003bbc <xTimerGenericCommand>
 8003cac:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d113      	bne.n	8003cdc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	60fb      	str	r3, [r7, #12]
    }
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	6978      	ldr	r0, [r7, #20]
 8003ce2:	4798      	blx	r3
    }
 8003ce4:	bf00      	nop
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000204 	.word	0x20000204

08003cf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cf8:	f107 0308 	add.w	r3, r7, #8
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f857 	bl	8003db0 <prvGetNextExpireTime>
 8003d02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4619      	mov	r1, r3
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f803 	bl	8003d14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d0e:	f000 f8d5 	bl	8003ebc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d12:	e7f1      	b.n	8003cf8 <prvTimerTask+0x8>

08003d14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d1e:	f7ff f8e1 	bl	8002ee4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f866 	bl	8003df8 <prvSampleTimeNow>
 8003d2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d130      	bne.n	8003d96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <prvProcessTimerOrBlockTask+0x3c>
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d806      	bhi.n	8003d50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d42:	f7ff f8dd 	bl	8002f00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff85 	bl	8003c58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d4e:	e024      	b.n	8003d9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d56:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <prvProcessTimerOrBlockTask+0x90>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <prvProcessTimerOrBlockTask+0x50>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <prvProcessTimerOrBlockTask+0x52>
 8003d64:	2300      	movs	r3, #0
 8003d66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <prvProcessTimerOrBlockTask+0x94>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7fe fe59 	bl	8002a2c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d7a:	f7ff f8c1 	bl	8002f00 <xTaskResumeAll>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <prvProcessTimerOrBlockTask+0x98>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
    }
 8003d94:	e001      	b.n	8003d9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d96:	f7ff f8b3 	bl	8002f00 <xTaskResumeAll>
    }
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000208 	.word	0x20000208
 8003da8:	2000020c 	.word	0x2000020c
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <prvGetNextExpireTime+0x44>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <prvGetNextExpireTime+0x16>
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	e000      	b.n	8003dc8 <prvGetNextExpireTime+0x18>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <prvGetNextExpireTime+0x44>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e001      	b.n	8003de4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003de4:	68fb      	ldr	r3, [r7, #12]
    }
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000204 	.word	0x20000204

08003df8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e00:	f7ff f91a 	bl	8003038 <xTaskGetTickCount>
 8003e04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <prvSampleTimeNow+0x3c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d205      	bcs.n	8003e1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e10:	f000 f91a 	bl	8004048 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e002      	b.n	8003e22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e22:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <prvSampleTimeNow+0x3c>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e28:	68fb      	ldr	r3, [r7, #12]
    }
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000214 	.word	0x20000214

08003e38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d812      	bhi.n	8003e84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	1ad2      	subs	r2, r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d302      	bcc.n	8003e72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e01b      	b.n	8003eaa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <prvInsertTimerInActiveList+0x7c>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fe f8c6 	bl	800200e <vListInsert>
 8003e82:	e012      	b.n	8003eaa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d206      	bcs.n	8003e9a <prvInsertTimerInActiveList+0x62>
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e007      	b.n	8003eaa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <prvInsertTimerInActiveList+0x80>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe f8b2 	bl	800200e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003eaa:	697b      	ldr	r3, [r7, #20]
    }
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000208 	.word	0x20000208
 8003eb8:	20000204 	.word	0x20000204

08003ebc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	; 0x30
 8003ec0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ec2:	e0ae      	b.n	8004022 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f2c0 80aa 	blt.w	8004020 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	3304      	adds	r3, #4
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe f8cf 	bl	8002080 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ee2:	1d3b      	adds	r3, r7, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff87 	bl	8003df8 <prvSampleTimeNow>
 8003eea:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	f200 8097 	bhi.w	8004022 <prvProcessReceivedCommands+0x166>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <prvProcessReceivedCommands+0x40>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f25 	.word	0x08003f25
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f25 	.word	0x08003f25
 8003f08:	08003f99 	.word	0x08003f99
 8003f0c:	08003fad 	.word	0x08003fad
 8003f10:	08003ff7 	.word	0x08003ff7
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f25 	.word	0x08003f25
 8003f1c:	08003f99 	.word	0x08003f99
 8003f20:	08003fad 	.word	0x08003fad
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	18d1      	adds	r1, r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f44:	f7ff ff78 	bl	8003e38 <prvInsertTimerInActiveList>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d069      	beq.n	8004022 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f54:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05e      	beq.n	8004022 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f76:	f7ff fe21 	bl	8003bbc <xTimerGenericCommand>
 8003f7a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d14f      	bne.n	8004022 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	61bb      	str	r3, [r7, #24]
    }
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003faa:	e03a      	b.n	8004022 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	617b      	str	r3, [r7, #20]
    }
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	18d1      	adds	r1, r2, r3
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff0:	f7ff ff22 	bl	8003e38 <prvInsertTimerInActiveList>
                        break;
 8003ff4:	e015      	b.n	8004022 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d103      	bne.n	800400c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004006:	f000 fbe9 	bl	80047dc <vPortFree>
 800400a:	e00a      	b.n	8004022 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800401e:	e000      	b.n	8004022 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004020:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <prvProcessReceivedCommands+0x188>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f107 0108 	add.w	r1, r7, #8
 800402a:	2200      	movs	r2, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fae3 	bl	80025f8 <xQueueReceive>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f47f af45 	bne.w	8003ec4 <prvProcessReceivedCommands+0x8>
        }
    }
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	3728      	adds	r7, #40	; 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000020c 	.word	0x2000020c

08004048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800404e:	e048      	b.n	80040e2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <prvSwitchTimerLists+0xc0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <prvSwitchTimerLists+0xc0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3304      	adds	r3, #4
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe f809 	bl	8002080 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02e      	beq.n	80040e2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90e      	bls.n	80040b4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <prvSwitchTimerLists+0xc0>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fd ffae 	bl	800200e <vListInsert>
 80040b2:	e016      	b.n	80040e2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040b4:	2300      	movs	r3, #0
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2300      	movs	r3, #0
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	2100      	movs	r1, #0
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff fd7c 	bl	8003bbc <xTimerGenericCommand>
 80040c4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	603b      	str	r3, [r7, #0]
    }
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <prvSwitchTimerLists+0xc0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1b1      	bne.n	8004050 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <prvSwitchTimerLists+0xc0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <prvSwitchTimerLists+0xc4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a04      	ldr	r2, [pc, #16]	; (8004108 <prvSwitchTimerLists+0xc0>)
 80040f8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <prvSwitchTimerLists+0xc4>)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6013      	str	r3, [r2, #0]
    }
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000204 	.word	0x20000204
 800410c:	20000208 	.word	0x20000208

08004110 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004114:	f000 f960 	bl	80043d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <prvCheckForValidListAndQueue+0x54>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d11d      	bne.n	800415c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004120:	4811      	ldr	r0, [pc, #68]	; (8004168 <prvCheckForValidListAndQueue+0x58>)
 8004122:	f7fd ff23 	bl	8001f6c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004126:	4811      	ldr	r0, [pc, #68]	; (800416c <prvCheckForValidListAndQueue+0x5c>)
 8004128:	f7fd ff20 	bl	8001f6c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <prvCheckForValidListAndQueue+0x60>)
 800412e:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <prvCheckForValidListAndQueue+0x58>)
 8004130:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <prvCheckForValidListAndQueue+0x64>)
 8004134:	4a0d      	ldr	r2, [pc, #52]	; (800416c <prvCheckForValidListAndQueue+0x5c>)
 8004136:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004138:	2200      	movs	r2, #0
 800413a:	210c      	movs	r1, #12
 800413c:	200a      	movs	r0, #10
 800413e:	f7fe f831 	bl	80021a4 <xQueueGenericCreate>
 8004142:	4603      	mov	r3, r0
 8004144:	4a07      	ldr	r2, [pc, #28]	; (8004164 <prvCheckForValidListAndQueue+0x54>)
 8004146:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <prvCheckForValidListAndQueue+0x54>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <prvCheckForValidListAndQueue+0x54>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4908      	ldr	r1, [pc, #32]	; (8004178 <prvCheckForValidListAndQueue+0x68>)
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fc3e 	bl	80029d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800415c:	f000 f96c 	bl	8004438 <vPortExitCritical>
    }
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000020c 	.word	0x2000020c
 8004168:	200001dc 	.word	0x200001dc
 800416c:	200001f0 	.word	0x200001f0
 8004170:	20000204 	.word	0x20000204
 8004174:	20000208 	.word	0x20000208
 8004178:	08004adc 	.word	0x08004adc

0800417c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3b04      	subs	r3, #4
 800418c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004194:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b04      	subs	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f023 0201 	bic.w	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3b04      	subs	r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <pxPortInitialiseStack+0x64>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b14      	subs	r3, #20
 80041b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f06f 0202 	mvn.w	r2, #2
 80041ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3b20      	subs	r3, #32
 80041d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	080041e5 	.word	0x080041e5

080041e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <prvTaskExitError+0x54>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f6:	d00a      	beq.n	800420e <prvTaskExitError+0x2a>
        __asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
    }
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <prvTaskExitError+0x28>
        __asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60bb      	str	r3, [r7, #8]
    }
 8004220:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004222:	bf00      	nop
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0fc      	beq.n	8004224 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000010 	.word	0x20000010
 800423c:	00000000 	.word	0x00000000

08004240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	4770      	bx	lr
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004268:	4808      	ldr	r0, [pc, #32]	; (800428c <prvPortStartFirstTask+0x24>)
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	f380 8808 	msr	MSP, r0
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8814 	msr	CONTROL, r0
 800427a:	b662      	cpsie	i
 800427c:	b661      	cpsie	f
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	df00      	svc	0
 8004288:	bf00      	nop
 800428a:	0000      	.short	0x0000
 800428c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop

08004294 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <xPortStartScheduler+0x120>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a46      	ldr	r2, [pc, #280]	; (80043b8 <xPortStartScheduler+0x124>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10a      	bne.n	80042ba <xPortStartScheduler+0x26>
        __asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	613b      	str	r3, [r7, #16]
    }
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <xPortStartScheduler+0x120>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a3f      	ldr	r2, [pc, #252]	; (80043bc <xPortStartScheduler+0x128>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10a      	bne.n	80042da <xPortStartScheduler+0x46>
        __asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60fb      	str	r3, [r7, #12]
    }
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042da:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <xPortStartScheduler+0x12c>)
 80042dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	22ff      	movs	r2, #255	; 0xff
 80042ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <xPortStartScheduler+0x130>)
 8004300:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <xPortStartScheduler+0x134>)
 8004304:	2207      	movs	r2, #7
 8004306:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004308:	e009      	b.n	800431e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <xPortStartScheduler+0x134>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3b01      	subs	r3, #1
 8004310:	4a2d      	ldr	r2, [pc, #180]	; (80043c8 <xPortStartScheduler+0x134>)
 8004312:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d0ef      	beq.n	800430a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <xPortStartScheduler+0x134>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1c3 0307 	rsb	r3, r3, #7
 8004332:	2b04      	cmp	r3, #4
 8004334:	d00a      	beq.n	800434c <xPortStartScheduler+0xb8>
        __asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60bb      	str	r3, [r7, #8]
    }
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <xPortStartScheduler+0x134>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <xPortStartScheduler+0x134>)
 8004354:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <xPortStartScheduler+0x134>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800435e:	4a1a      	ldr	r2, [pc, #104]	; (80043c8 <xPortStartScheduler+0x134>)
 8004360:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <xPortStartScheduler+0x138>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <xPortStartScheduler+0x138>)
 8004370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004374:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <xPortStartScheduler+0x138>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a14      	ldr	r2, [pc, #80]	; (80043cc <xPortStartScheduler+0x138>)
 800437c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004380:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004382:	f000 f8db 	bl	800453c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <xPortStartScheduler+0x13c>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800438c:	f000 f8fa 	bl	8004584 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <xPortStartScheduler+0x140>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <xPortStartScheduler+0x140>)
 8004396:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800439a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800439c:	f7ff ff64 	bl	8004268 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043a0:	f7fe ff12 	bl	80031c8 <vTaskSwitchContext>
    prvTaskExitError();
 80043a4:	f7ff ff1e 	bl	80041e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	e000ed00 	.word	0xe000ed00
 80043b8:	410fc271 	.word	0x410fc271
 80043bc:	410fc270 	.word	0x410fc270
 80043c0:	e000e400 	.word	0xe000e400
 80043c4:	20000218 	.word	0x20000218
 80043c8:	2000021c 	.word	0x2000021c
 80043cc:	e000ed20 	.word	0xe000ed20
 80043d0:	20000010 	.word	0x20000010
 80043d4:	e000ef34 	.word	0xe000ef34

080043d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
        __asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
    }
 80043f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <vPortEnterCritical+0x58>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <vPortEnterCritical+0x58>)
 80043fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <vPortEnterCritical+0x58>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10f      	bne.n	8004424 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <vPortEnterCritical+0x5c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <vPortEnterCritical+0x4c>
        __asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	603b      	str	r3, [r7, #0]
    }
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vPortEnterCritical+0x4a>
    }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000010 	.word	0x20000010
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <vPortExitCritical+0x50>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <vPortExitCritical+0x24>
        __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	607b      	str	r3, [r7, #4]
    }
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <vPortExitCritical+0x50>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3b01      	subs	r3, #1
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <vPortExitCritical+0x50>)
 8004464:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <vPortExitCritical+0x50>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <vPortExitCritical+0x42>
 800446e:	2300      	movs	r3, #0
 8004470:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f383 8811 	msr	BASEPRI, r3
    }
 8004478:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000010 	.word	0x20000010
 800448c:	00000000 	.word	0x00000000

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <pxCurrentTCBConst>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f01e 0f10 	tst.w	lr, #16
 80044a0:	bf08      	it	eq
 80044a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044aa:	6010      	str	r0, [r2, #0]
 80044ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044b4:	f380 8811 	msr	BASEPRI, r0
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f7fe fe82 	bl	80031c8 <vTaskSwitchContext>
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f380 8811 	msr	BASEPRI, r0
 80044cc:	bc09      	pop	{r0, r3}
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	6808      	ldr	r0, [r1, #0]
 80044d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d6:	f01e 0f10 	tst.w	lr, #16
 80044da:	bf08      	it	eq
 80044dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044e0:	f380 8809 	msr	PSP, r0
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst>:
 80044f0:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
    }
 8004510:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004512:	f7fe fda1 	bl	8003058 <xTaskIncrementTick>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <SysTick_Handler+0x40>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f383 8811 	msr	BASEPRI, r3
    }
 800452e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <vPortSetupTimerInterrupt+0x34>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <vPortSetupTimerInterrupt+0x38>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <vPortSetupTimerInterrupt+0x3c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0a      	ldr	r2, [pc, #40]	; (800457c <vPortSetupTimerInterrupt+0x40>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	4a09      	ldr	r2, [pc, #36]	; (8004580 <vPortSetupTimerInterrupt+0x44>)
 800455a:	3b01      	subs	r3, #1
 800455c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <vPortSetupTimerInterrupt+0x34>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000e010 	.word	0xe000e010
 8004574:	e000e018 	.word	0xe000e018
 8004578:	20000000 	.word	0x20000000
 800457c:	10624dd3 	.word	0x10624dd3
 8004580:	e000e014 	.word	0xe000e014

08004584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004594 <vPortEnableVFP+0x10>
 8004588:	6801      	ldr	r1, [r0, #0]
 800458a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800458e:	6001      	str	r1, [r0, #0]
 8004590:	4770      	bx	lr
 8004592:	0000      	.short	0x0000
 8004594:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop

0800459c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045a2:	f3ef 8305 	mrs	r3, IPSR
 80045a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	d914      	bls.n	80045d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <vPortValidateInterruptPriority+0x70>)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <vPortValidateInterruptPriority+0x74>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	7afa      	ldrb	r2, [r7, #11]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d20a      	bcs.n	80045d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	607b      	str	r3, [r7, #4]
    }
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <vPortValidateInterruptPriority+0x78>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <vPortValidateInterruptPriority+0x7c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d90a      	bls.n	80045fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	603b      	str	r3, [r7, #0]
    }
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <vPortValidateInterruptPriority+0x60>
    }
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000e3f0 	.word	0xe000e3f0
 8004610:	20000218 	.word	0x20000218
 8004614:	e000ed0c 	.word	0xe000ed0c
 8004618:	2000021c 	.word	0x2000021c

0800461c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	; 0x28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004628:	f7fe fc5c 	bl	8002ee4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800462c:	4b65      	ldr	r3, [pc, #404]	; (80047c4 <pvPortMalloc+0x1a8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004634:	f000 f934 	bl	80048a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004638:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <pvPortMalloc+0x1ac>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 80a7 	bne.w	8004794 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02d      	beq.n	80046a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800464c:	2208      	movs	r2, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	d227      	bcs.n	80046a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004658:	2208      	movs	r2, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b00      	cmp	r3, #0
 8004668:	d021      	beq.n	80046ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f023 0307 	bic.w	r3, r3, #7
 8004670:	3308      	adds	r3, #8
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d214      	bcs.n	80046a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f023 0307 	bic.w	r3, r3, #7
 800467e:	3308      	adds	r3, #8
 8004680:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <pvPortMalloc+0x92>
        __asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	617b      	str	r3, [r7, #20]
    }
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046a6:	e002      	b.n	80046ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	e000      	b.n	80046b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d06e      	beq.n	8004794 <pvPortMalloc+0x178>
 80046b6:	4b45      	ldr	r3, [pc, #276]	; (80047cc <pvPortMalloc+0x1b0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d869      	bhi.n	8004794 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <pvPortMalloc+0x1b4>)
 80046c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <pvPortMalloc+0x1b4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ca:	e004      	b.n	80046d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d903      	bls.n	80046e8 <pvPortMalloc+0xcc>
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f1      	bne.n	80046cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <pvPortMalloc+0x1a8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d050      	beq.n	8004794 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2208      	movs	r2, #8
 80046f8:	4413      	add	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	2308      	movs	r3, #8
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	429a      	cmp	r2, r3
 8004712:	d91f      	bls.n	8004754 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <pvPortMalloc+0x120>
        __asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	613b      	str	r3, [r7, #16]
    }
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800474e:	69b8      	ldr	r0, [r7, #24]
 8004750:	f000 f908 	bl	8004964 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <pvPortMalloc+0x1b0>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <pvPortMalloc+0x1b0>)
 8004760:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004762:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <pvPortMalloc+0x1b0>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <pvPortMalloc+0x1b8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d203      	bcs.n	8004776 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800476e:	4b17      	ldr	r3, [pc, #92]	; (80047cc <pvPortMalloc+0x1b0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <pvPortMalloc+0x1b8>)
 8004774:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <pvPortMalloc+0x1ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	431a      	orrs	r2, r3
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <pvPortMalloc+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3301      	adds	r3, #1
 8004790:	4a11      	ldr	r2, [pc, #68]	; (80047d8 <pvPortMalloc+0x1bc>)
 8004792:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004794:	f7fe fbb4 	bl	8002f00 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <pvPortMalloc+0x19c>
        __asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60fb      	str	r3, [r7, #12]
    }
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80047b8:	69fb      	ldr	r3, [r7, #28]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3728      	adds	r7, #40	; 0x28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20012e28 	.word	0x20012e28
 80047c8:	20012e3c 	.word	0x20012e3c
 80047cc:	20012e2c 	.word	0x20012e2c
 80047d0:	20012e20 	.word	0x20012e20
 80047d4:	20012e30 	.word	0x20012e30
 80047d8:	20012e34 	.word	0x20012e34

080047dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04d      	beq.n	800488a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047ee:	2308      	movs	r3, #8
 80047f0:	425b      	negs	r3, r3
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4b24      	ldr	r3, [pc, #144]	; (8004894 <vPortFree+0xb8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <vPortFree+0x44>
        __asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60fb      	str	r3, [r7, #12]
    }
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <vPortFree+0x62>
        __asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	60bb      	str	r3, [r7, #8]
    }
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <vPortFree+0xb8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01e      	beq.n	800488a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11a      	bne.n	800488a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <vPortFree+0xb8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	43db      	mvns	r3, r3
 800485e:	401a      	ands	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004864:	f7fe fb3e 	bl	8002ee4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortFree+0xbc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4413      	add	r3, r2
 8004872:	4a09      	ldr	r2, [pc, #36]	; (8004898 <vPortFree+0xbc>)
 8004874:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004876:	6938      	ldr	r0, [r7, #16]
 8004878:	f000 f874 	bl	8004964 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <vPortFree+0xc0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a06      	ldr	r2, [pc, #24]	; (800489c <vPortFree+0xc0>)
 8004884:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004886:	f7fe fb3b 	bl	8002f00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20012e3c 	.word	0x20012e3c
 8004898:	20012e2c 	.word	0x20012e2c
 800489c:	20012e38 	.word	0x20012e38

080048a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80048aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048ac:	4b27      	ldr	r3, [pc, #156]	; (800494c <prvHeapInit+0xac>)
 80048ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3307      	adds	r3, #7
 80048be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0307 	bic.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	4a1f      	ldr	r2, [pc, #124]	; (800494c <prvHeapInit+0xac>)
 80048d0:	4413      	add	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <prvHeapInit+0xb0>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048de:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <prvHeapInit+0xb0>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048ec:	2208      	movs	r2, #8
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0307 	bic.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a15      	ldr	r2, [pc, #84]	; (8004954 <prvHeapInit+0xb4>)
 8004900:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <prvHeapInit+0xb4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <prvHeapInit+0xb4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <prvHeapInit+0xb4>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <prvHeapInit+0xb8>)
 800492e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <prvHeapInit+0xbc>)
 8004936:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <prvHeapInit+0xc0>)
 800493a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000220 	.word	0x20000220
 8004950:	20012e20 	.word	0x20012e20
 8004954:	20012e28 	.word	0x20012e28
 8004958:	20012e30 	.word	0x20012e30
 800495c:	20012e2c 	.word	0x20012e2c
 8004960:	20012e3c 	.word	0x20012e3c

08004964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800496c:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <prvInsertBlockIntoFreeList+0xac>)
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e002      	b.n	8004978 <prvInsertBlockIntoFreeList+0x14>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d8f7      	bhi.n	8004972 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d108      	bne.n	80049a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	441a      	add	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d118      	bne.n	80049ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <prvInsertBlockIntoFreeList+0xb0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d00d      	beq.n	80049e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e008      	b.n	80049f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <prvInsertBlockIntoFreeList+0xb0>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e003      	b.n	80049f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d002      	beq.n	8004a02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20012e20 	.word	0x20012e20
 8004a14:	20012e28 	.word	0x20012e28

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	; (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	; (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	; (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	; (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f000 f82e 	bl	8004a8c <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08004b04 	.word	0x08004b04
 8004a54:	08004b04 	.word	0x08004b04
 8004a58:	08004b04 	.word	0x08004b04
 8004a5c:	08004b08 	.word	0x08004b08

08004a60 <memcpy>:
 8004a60:	440a      	add	r2, r1
 8004a62:	4291      	cmp	r1, r2
 8004a64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a68:	d100      	bne.n	8004a6c <memcpy+0xc>
 8004a6a:	4770      	bx	lr
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a76:	4291      	cmp	r1, r2
 8004a78:	d1f9      	bne.n	8004a6e <memcpy+0xe>
 8004a7a:	bd10      	pop	{r4, pc}

08004a7c <memset>:
 8004a7c:	4402      	add	r2, r0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
