
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004934  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e2c  20000014  08004b5c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e40  08004b5c  00022e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebfc  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262e  00000000  00000000  0002ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00031270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017591  00000000  00000000  00032e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa54  00000000  00000000  0004a409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f19  00000000  00000000  00059e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edd76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  000eddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004abc 	.word	0x08004abc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004abc 	.word	0x08004abc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fb5b 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f8b7 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f913 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
status=	xTaskCreate(GreenLED, "greenLED", 100	, NULL, 3, &greenLEDHandle);
 80004f6:	4b49      	ldr	r3, [pc, #292]	; (800061c <main+0x138>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2303      	movs	r3, #3
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	4947      	ldr	r1, [pc, #284]	; (8000620 <main+0x13c>)
 8000504:	4847      	ldr	r0, [pc, #284]	; (8000624 <main+0x140>)
 8000506:	f002 facb 	bl	8002aa0 <xTaskCreate>
 800050a:	4603      	mov	r3, r0
 800050c:	4a46      	ldr	r2, [pc, #280]	; (8000628 <main+0x144>)
 800050e:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 8000510:	4b45      	ldr	r3, [pc, #276]	; (8000628 <main+0x144>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d00a      	beq.n	800052e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051c:	f383 8811 	msr	BASEPRI, r3
 8000520:	f3bf 8f6f 	isb	sy
 8000524:	f3bf 8f4f 	dsb	sy
 8000528:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800052a:	bf00      	nop
 800052c:	e7fe      	b.n	800052c <main+0x48>
next_task_handle=greenLEDHandle;
 800052e:	4b3b      	ldr	r3, [pc, #236]	; (800061c <main+0x138>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a3e      	ldr	r2, [pc, #248]	; (800062c <main+0x148>)
 8000534:	6013      	str	r3, [r2, #0]
status=	xTaskCreate(RedLED, "redLED", 100	, NULL, 2, &redLEDHandle);
 8000536:	4b3e      	ldr	r3, [pc, #248]	; (8000630 <main+0x14c>)
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2302      	movs	r3, #2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	2264      	movs	r2, #100	; 0x64
 8000542:	493c      	ldr	r1, [pc, #240]	; (8000634 <main+0x150>)
 8000544:	483c      	ldr	r0, [pc, #240]	; (8000638 <main+0x154>)
 8000546:	f002 faab 	bl	8002aa0 <xTaskCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	4a36      	ldr	r2, [pc, #216]	; (8000628 <main+0x144>)
 800054e:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <main+0x144>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d00a      	beq.n	800056e <main+0x8a>
        __asm volatile
 8000558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055c:	f383 8811 	msr	BASEPRI, r3
 8000560:	f3bf 8f6f 	isb	sy
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	613b      	str	r3, [r7, #16]
    }
 800056a:	bf00      	nop
 800056c:	e7fe      	b.n	800056c <main+0x88>
status=	xTaskCreate(blueLED, "blueLED", 100	, NULL, 1, &blueLEDHandle);
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <main+0x158>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2264      	movs	r2, #100	; 0x64
 800057a:	4931      	ldr	r1, [pc, #196]	; (8000640 <main+0x15c>)
 800057c:	4831      	ldr	r0, [pc, #196]	; (8000644 <main+0x160>)
 800057e:	f002 fa8f 	bl	8002aa0 <xTaskCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <main+0x144>)
 8000586:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <main+0x144>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d00a      	beq.n	80005a6 <main+0xc2>
        __asm volatile
 8000590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000594:	f383 8811 	msr	BASEPRI, r3
 8000598:	f3bf 8f6f 	isb	sy
 800059c:	f3bf 8f4f 	dsb	sy
 80005a0:	60fb      	str	r3, [r7, #12]
    }
 80005a2:	bf00      	nop
 80005a4:	e7fe      	b.n	80005a4 <main+0xc0>
status=	xTaskCreate(OrangeLED, "orangeLED", 100	, NULL, 2, &orangeLEDHandle);
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <main+0x164>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2302      	movs	r3, #2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	4926      	ldr	r1, [pc, #152]	; (800064c <main+0x168>)
 80005b4:	4826      	ldr	r0, [pc, #152]	; (8000650 <main+0x16c>)
 80005b6:	f002 fa73 	bl	8002aa0 <xTaskCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <main+0x144>)
 80005be:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0x144>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00a      	beq.n	80005de <main+0xfa>
        __asm volatile
 80005c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005cc:	f383 8811 	msr	BASEPRI, r3
 80005d0:	f3bf 8f6f 	isb	sy
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	60bb      	str	r3, [r7, #8]
    }
 80005da:	bf00      	nop
 80005dc:	e7fe      	b.n	80005dc <main+0xf8>
status=	xTaskCreate(buttonTask, "buttonTask", 100	, NULL, 4, &buttonHandle);
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <main+0x170>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2304      	movs	r3, #4
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2264      	movs	r2, #100	; 0x64
 80005ea:	491b      	ldr	r1, [pc, #108]	; (8000658 <main+0x174>)
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0x178>)
 80005ee:	f002 fa57 	bl	8002aa0 <xTaskCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <main+0x144>)
 80005f6:	6013      	str	r3, [r2, #0]
configASSERT(status==pdPASS);
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <main+0x144>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d00a      	beq.n	8000616 <main+0x132>
        __asm volatile
 8000600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000604:	f383 8811 	msr	BASEPRI, r3
 8000608:	f3bf 8f6f 	isb	sy
 800060c:	f3bf 8f4f 	dsb	sy
 8000610:	607b      	str	r3, [r7, #4]
    }
 8000612:	bf00      	nop
 8000614:	e7fe      	b.n	8000614 <main+0x130>

  vTaskStartScheduler();
 8000616:	f002 fc4d 	bl	8002eb4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x136>
 800061c:	20000034 	.word	0x20000034
 8000620:	08004ad4 	.word	0x08004ad4
 8000624:	08000811 	.word	0x08000811
 8000628:	20000048 	.word	0x20000048
 800062c:	20000030 	.word	0x20000030
 8000630:	20000038 	.word	0x20000038
 8000634:	08004ae0 	.word	0x08004ae0
 8000638:	0800086d 	.word	0x0800086d
 800063c:	2000003c 	.word	0x2000003c
 8000640:	08004ae8 	.word	0x08004ae8
 8000644:	080008c9 	.word	0x080008c9
 8000648:	20000040 	.word	0x20000040
 800064c:	08004af0 	.word	0x08004af0
 8000650:	0800092d 	.word	0x0800092d
 8000654:	20000044 	.word	0x20000044
 8000658:	08004afc 	.word	0x08004afc
 800065c:	080007c1 	.word	0x080007c1

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fa1c 	bl	8004aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xb4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xb8>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fd5b 	bl	800118c <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006dc:	f000 f966 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffbe 	bl	800167c <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000706:	f000 f951 	bl	80009ac <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <MX_GPIO_Init+0x98>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000772:	f000 fcd7 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_GPIO_Init+0xa0>)
 800078a:	f000 fb2f 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800078e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_GPIO_Init+0x9c>)
 80007a8:	f000 fb20 	bl	8000dec <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020000 	.word	0x40020000

080007c0 <buttonTask>:

/* USER CODE BEGIN 4 */
static void buttonTask(void *param)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	6078      	str	r0, [r7, #4]
	uint8_t btn_read=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73bb      	strb	r3, [r7, #14]
	uint8_t prevRead=0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		btn_read=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80007d0:	2101      	movs	r1, #1
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <buttonTask+0x48>)
 80007d4:	f000 fc8e 	bl	80010f4 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	73bb      	strb	r3, [r7, #14]
		if(btn_read)
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00b      	beq.n	80007fa <buttonTask+0x3a>
		{
			if(!prevRead)
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d108      	bne.n	80007fa <buttonTask+0x3a>
			{
				xTaskNotify(next_task_handle,0,eNoAction);
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <buttonTask+0x4c>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 f881 	bl	80038fc <xTaskGenericNotify>
			}
		}
		prevRead=btn_read;
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80007fe:	200a      	movs	r0, #10
 8000800:	f002 fb24 	bl	8002e4c <vTaskDelay>
		btn_read=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000804:	e7e4      	b.n	80007d0 <buttonTask+0x10>
 8000806:	bf00      	nop
 8000808:	40020000 	.word	0x40020000
 800080c:	20000030 	.word	0x20000030

08000810 <GreenLED>:
	}
}
static void GreenLED(void *parm)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af02      	add	r7, sp, #8
 8000816:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <GreenLED+0x50>)
 800081e:	f000 fc9a 	bl	8001156 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000822:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2300      	movs	r3, #0
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2000      	movs	r0, #0
 8000830:	f002 ffe4 	bl	80037fc <xTaskGenericNotifyWait>
 8000834:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d1ed      	bne.n	8000818 <GreenLED+0x8>
		{
			vTaskSuspendAll();
 800083c:	f002 fb8c 	bl	8002f58 <vTaskSuspendAll>
			next_task_handle=orangeLEDHandle;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <GreenLED+0x54>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a08      	ldr	r2, [pc, #32]	; (8000868 <GreenLED+0x58>)
 8000846:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000848:	f002 fb94 	bl	8002f74 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <GreenLED+0x50>)
 8000854:	f000 fc66 	bl	8001124 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000858:	2000      	movs	r0, #0
 800085a:	f002 fa67 	bl	8002d2c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800085e:	e7db      	b.n	8000818 <GreenLED+0x8>
 8000860:	40020c00 	.word	0x40020c00
 8000864:	20000040 	.word	0x20000040
 8000868:	20000030 	.word	0x20000030

0800086c <RedLED>:
		}
//		vTaskDelay(pdMS_TO_TICKS(1000));
	}
}
static void RedLED(void *parm)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
 8000872:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000878:	4810      	ldr	r0, [pc, #64]	; (80008bc <RedLED+0x50>)
 800087a:	f000 fc6c 	bl	8001156 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 800087e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2300      	movs	r3, #0
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2000      	movs	r0, #0
 800088c:	f002 ffb6 	bl	80037fc <xTaskGenericNotifyWait>
 8000890:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d1ed      	bne.n	8000874 <RedLED+0x8>
		{
			vTaskSuspendAll();
 8000898:	f002 fb5e 	bl	8002f58 <vTaskSuspendAll>
			next_task_handle=blueLEDHandle;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <RedLED+0x54>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <RedLED+0x58>)
 80008a2:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80008a4:	f002 fb66 	bl	8002f74 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <RedLED+0x50>)
 80008b0:	f000 fc38 	bl	8001124 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f002 fa39 	bl	8002d2c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008ba:	e7db      	b.n	8000874 <RedLED+0x8>
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	2000003c 	.word	0x2000003c
 80008c4:	20000030 	.word	0x20000030

080008c8 <blueLED>:

	}
	//vTaskDelay(pdMS_TO_TICKS(500));
}
static void blueLED(void *parm)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <blueLED+0x58>)
 80008d6:	f000 fc3e 	bl	8001156 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(500));
 80008da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2300      	movs	r3, #0
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2000      	movs	r0, #0
 80008e8:	f002 ff88 	bl	80037fc <xTaskGenericNotifyWait>
 80008ec:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d1ed      	bne.n	80008d0 <blueLED+0x8>
		{
			vTaskSuspendAll();
 80008f4:	f002 fb30 	bl	8002f58 <vTaskSuspendAll>
			next_task_handle=NULL;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <blueLED+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80008fe:	f002 fb39 	bl	8002f74 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <blueLED+0x58>)
 800090a:	f000 fc0b 	bl	8001124 <HAL_GPIO_WritePin>
			vTaskDelete(buttonHandle);
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <blueLED+0x60>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fa0a 	bl	8002d2c <vTaskDelete>
			vTaskDelete(NULL);
 8000918:	2000      	movs	r0, #0
 800091a:	f002 fa07 	bl	8002d2c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800091e:	e7d7      	b.n	80008d0 <blueLED+0x8>
 8000920:	40020c00 	.word	0x40020c00
 8000924:	20000030 	.word	0x20000030
 8000928:	20000044 	.word	0x20000044

0800092c <OrangeLED>:

	}
//	vTaskDelay(pdMS_TO_TICKS(400));
}
static void OrangeLED(void *parm)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
 8000932:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <OrangeLED+0x50>)
 800093a:	f000 fc0c 	bl	8001156 <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 800093e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2000      	movs	r0, #0
 800094c:	f002 ff56 	bl	80037fc <xTaskGenericNotifyWait>
 8000950:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d1ed      	bne.n	8000934 <OrangeLED+0x8>
		{
			vTaskSuspendAll();
 8000958:	f002 fafe 	bl	8002f58 <vTaskSuspendAll>
			next_task_handle=redLEDHandle;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <OrangeLED+0x54>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <OrangeLED+0x58>)
 8000962:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000964:	f002 fb06 	bl	8002f74 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <OrangeLED+0x50>)
 8000970:	f000 fbd8 	bl	8001124 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000974:	2000      	movs	r0, #0
 8000976:	f002 f9d9 	bl	8002d2c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800097a:	e7db      	b.n	8000934 <OrangeLED+0x8>
 800097c:	40020c00 	.word	0x40020c00
 8000980:	20000038 	.word	0x20000038
 8000984:	20000030 	.word	0x20000030

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 f925 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40014000 	.word	0x40014000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	; 0x30
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <HAL_InitTick+0xd0>)
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a20:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <HAL_InitTick+0xd0>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	6453      	str	r3, [r2, #68]	; 0x44
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <HAL_InitTick+0xd0>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a34:	f107 020c 	add.w	r2, r7, #12
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 ffe8 	bl	8001a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a44:	f000 ffd2 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
 8000a48:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HAL_InitTick+0xd4>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	0c9b      	lsrs	r3, r3, #18
 8000a54:	3b01      	subs	r3, #1
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <HAL_InitTick+0xdc>)
 8000a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a64:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000a7e:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a80:	f000 fffa 	bl	8001a78 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d11b      	bne.n	8000aca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <HAL_InitTick+0xd8>)
 8000a94:	f001 f84a 	bl	8001b2c <HAL_TIM_Base_Start_IT>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d111      	bne.n	8000aca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000aa6:	2018      	movs	r0, #24
 8000aa8:	f000 f992 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	d808      	bhi.n	8000ac4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	2018      	movs	r0, #24
 8000ab8:	f000 f96e 	bl	8000d98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_InitTick+0xe0>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	e002      	b.n	8000aca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3730      	adds	r7, #48	; 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	40014000 	.word	0x40014000
 8000ae8:	20000004 	.word	0x20000004

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000b1e:	f001 f867 	bl	8001bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000004c 	.word	0x2000004c

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f003 ff63 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fcaf 	bl	80004e4 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b94:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 8000b98:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b9c:	20012e40 	.word	0x20012e40

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d8 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff ff18 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff feee 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000094 	.word	0x20000094

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000094 	.word	0x20000094

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e159      	b.n	80010bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8148 	bne.w	80010b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a2 	beq.w	80010b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x2f0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x202>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2f4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1fe>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2f8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2fc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1f6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1f2>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001086:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f aea2 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001140:	e003      	b.n	800114a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4013      	ands	r3, r2
 800116e:	041a      	lsls	r2, r3, #16
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43d9      	mvns	r1, r3
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	400b      	ands	r3, r1
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e267      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d075      	beq.n	8001296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d00c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d05b      	beq.n	8001294 <HAL_RCC_OscConfig+0x108>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d157      	bne.n	8001294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e242      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x74>
 80011f2:	4b76      	ldr	r3, [pc, #472]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a75      	ldr	r2, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b70      	ldr	r3, [pc, #448]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6c      	ldr	r2, [pc, #432]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001224:	4b69      	ldr	r3, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a68      	ldr	r2, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a65      	ldr	r2, [pc, #404]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fce4 	bl	8000c10 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fce0 	bl	8000c10 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e207      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xc0>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcd0 	bl	8000c10 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fccc 	bl	8000c10 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1f3      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0xe8>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b44      	ldr	r3, [pc, #272]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1c7      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e03a      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_RCC_OscConfig+0x244>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff fc85 	bl	8000c10 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fc81 	bl	8000c10 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1a8      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4925      	ldr	r1, [pc, #148]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_RCC_OscConfig+0x244>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc64 	bl	8000c10 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fc60 	bl	8000c10 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e187      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d036      	beq.n	80013e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d016      	beq.n	80013ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_RCC_OscConfig+0x248>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fc44 	bl	8000c10 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc40 	bl	8000c10 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e167      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x200>
 80013aa:	e01b      	b.n	80013e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_OscConfig+0x248>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fc2d 	bl	8000c10 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e00e      	b.n	80013d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc29 	bl	8000c10 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d907      	bls.n	80013d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e150      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	42470000 	.word	0x42470000
 80013d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ea      	bne.n	80013ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8097 	beq.w	8001520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b77      	ldr	r3, [pc, #476]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a73      	ldr	r2, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fbe9 	bl	8000c10 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fbe5 	bl	8000c10 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e10c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x2ea>
 8001468:	4b64      	ldr	r3, [pc, #400]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a63      	ldr	r2, [pc, #396]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	e01c      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x30c>
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a5b      	ldr	r2, [pc, #364]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001498:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d015      	beq.n	80014e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fbaa 	bl	8000c10 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fba6 	bl	8000c10 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0cb      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ee      	beq.n	80014c0 <HAL_RCC_OscConfig+0x334>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fb94 	bl	8000c10 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb90 	bl	8000c10 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0b5      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	4a38      	ldr	r2, [pc, #224]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a1 	beq.w	800166c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d05c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d141      	bne.n	80015c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb64 	bl	8000c10 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fb60 	bl	8000c10 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e087      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	3b01      	subs	r3, #1
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	491b      	ldr	r1, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fb39 	bl	8000c10 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb35 	bl	8000c10 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e05c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x416>
 80015c0:	e054      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb22 	bl	8000c10 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fb1e 	bl	8000c10 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e045      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x444>
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e038      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000
 8001604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x4ec>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d028      	beq.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d121      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11a      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001638:	4013      	ands	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800163e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001640:	4293      	cmp	r3, r2
 8001642:	d111      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	3b01      	subs	r3, #1
 8001652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0cc      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa50 	bl	8000c10 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fa4c 	bl	8000c10 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f8f0 	bl	8000a08 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00
 8001838:	40023800 	.word	0x40023800
 800183c:	08004b20 	.word	0x08004b20
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800184c:	b090      	sub	sp, #64	; 0x40
 800184e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d00d      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x40>
 800186c:	2b08      	cmp	r3, #8
 800186e:	f200 80a1 	bhi.w	80019b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x34>
 8001876:	2b04      	cmp	r3, #4
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x3a>
 800187a:	e09b      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_GetSysClockFreq+0x184>)
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001880:	e09b      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001882:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001886:	e098      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001892:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d028      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	2200      	movs	r2, #0
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	627a      	str	r2, [r7, #36]	; 0x24
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018b0:	2100      	movs	r1, #0
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80018b4:	fb03 f201 	mul.w	r2, r3, r1
 80018b8:	2300      	movs	r3, #0
 80018ba:	fb00 f303 	mul.w	r3, r0, r3
 80018be:	4413      	add	r3, r2
 80018c0:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c2:	fba0 1202 	umull	r1, r2, r0, r2
 80018c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c8:	460a      	mov	r2, r1
 80018ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80018cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ce:	4413      	add	r3, r2
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d4:	2200      	movs	r2, #0
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	61fa      	str	r2, [r7, #28]
 80018da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018e2:	f7fe fc7d 	bl	80001e0 <__aeabi_uldivmod>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4613      	mov	r3, r2
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ee:	e053      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	2200      	movs	r2, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	617a      	str	r2, [r7, #20]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001902:	f04f 0b00 	mov.w	fp, #0
 8001906:	4652      	mov	r2, sl
 8001908:	465b      	mov	r3, fp
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0159      	lsls	r1, r3, #5
 8001914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001918:	0150      	lsls	r0, r2, #5
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ebb2 080a 	subs.w	r8, r2, sl
 8001922:	eb63 090b 	sbc.w	r9, r3, fp
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001932:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001936:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800193a:	ebb2 0408 	subs.w	r4, r2, r8
 800193e:	eb63 0509 	sbc.w	r5, r3, r9
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	00eb      	lsls	r3, r5, #3
 800194c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001950:	00e2      	lsls	r2, r4, #3
 8001952:	4614      	mov	r4, r2
 8001954:	461d      	mov	r5, r3
 8001956:	eb14 030a 	adds.w	r3, r4, sl
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	eb45 030b 	adc.w	r3, r5, fp
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800196e:	4629      	mov	r1, r5
 8001970:	028b      	lsls	r3, r1, #10
 8001972:	4621      	mov	r1, r4
 8001974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001978:	4621      	mov	r1, r4
 800197a:	028a      	lsls	r2, r1, #10
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	2200      	movs	r2, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	60fa      	str	r2, [r7, #12]
 8001988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198c:	f7fe fc28 	bl	80001e0 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetSysClockFreq+0x184>)
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3740      	adds	r7, #64	; 0x40
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	017d7840 	.word	0x017d7840

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0b5b      	lsrs	r3, r3, #13
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08004b30 	.word	0x08004b30

08001a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	220f      	movs	r2, #15
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <HAL_RCC_GetClockConfig+0x60>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0207 	and.w	r2, r3, #7
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e041      	b.n	8001b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f839 	bl	8001b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f000 f9ca 	bl	8001e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d001      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e044      	b.n	8001bce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_TIM_Base_Start_IT+0xb0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d018      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x6c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6e:	d013      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x6c>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00e      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x6c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d009      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x6c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d004      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x6c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_TIM_Base_Start_IT+0xc0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d111      	bne.n	8001bbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d010      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bba:	e007      	b.n	8001bcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40000c00 	.word	0x40000c00
 8001bec:	40014000 	.word	0x40014000

08001bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d122      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d11b      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0202 	mvn.w	r2, #2
 8001c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8ee 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8e0 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8f1 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d122      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d11b      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0204 	mvn.w	r2, #4
 8001c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2202      	movs	r2, #2
 8001c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8c4 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8b6 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8c7 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d122      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d11b      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0208 	mvn.w	r2, #8
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f89a 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f88c 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f89d 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0210 	mvn.w	r2, #16
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f870 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f862 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f873 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0201 	mvn.w	r2, #1
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fe0a 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	2b80      	cmp	r3, #128	; 0x80
 8001d80:	d10e      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d107      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8e2 	bl	8001f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001daa:	2b40      	cmp	r3, #64	; 0x40
 8001dac:	d10e      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	d107      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f838 	bl	8001e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d10e      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d107      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0220 	mvn.w	r2, #32
 8001df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8ac 	bl	8001f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <TIM_Base_SetConfig+0xe4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00f      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d00b      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <TIM_Base_SetConfig+0xe8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a30      	ldr	r2, [pc, #192]	; (8001f3c <TIM_Base_SetConfig+0xec>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a2f      	ldr	r2, [pc, #188]	; (8001f40 <TIM_Base_SetConfig+0xf0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d108      	bne.n	8001e9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <TIM_Base_SetConfig+0xe4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01b      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d017      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <TIM_Base_SetConfig+0xe8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <TIM_Base_SetConfig+0xec>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00f      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <TIM_Base_SetConfig+0xf0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00b      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <TIM_Base_SetConfig+0xf4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <TIM_Base_SetConfig+0xf8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d003      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <TIM_Base_SetConfig+0xfc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d108      	bne.n	8001eec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <TIM_Base_SetConfig+0xe4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d103      	bne.n	8001f20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	615a      	str	r2, [r3, #20]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40000800 	.word	0x40000800
 8001f40:	40000c00 	.word	0x40000c00
 8001f44:	40014000 	.word	0x40014000
 8001f48:	40014400 	.word	0x40014400
 8001f4c:	40014800 	.word	0x40014800

08001f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f103 0208 	add.w	r2, r3, #8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f90:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f103 0208 	add.w	r2, r3, #8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f103 0208 	add.w	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002030:	d103      	bne.n	800203a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e00c      	b.n	8002054 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3308      	adds	r3, #8
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e002      	b.n	8002048 <vListInsert+0x2e>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	429a      	cmp	r2, r3
 8002052:	d2f6      	bcs.n	8002042 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	601a      	str	r2, [r3, #0]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6892      	ldr	r2, [r2, #8]
 80020a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6852      	ldr	r2, [r2, #4]
 80020ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d103      	bne.n	80020c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1e5a      	subs	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <xQueueGenericReset+0x2a>
        __asm volatile
 80020f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f8:	f383 8811 	msr	BASEPRI, r3
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f3bf 8f4f 	dsb	sy
 8002104:	60bb      	str	r3, [r7, #8]
    }
 8002106:	bf00      	nop
 8002108:	e7fe      	b.n	8002108 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800210a:	f002 f97d 	bl	8004408 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	441a      	add	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	3b01      	subs	r3, #1
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	441a      	add	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	22ff      	movs	r2, #255	; 0xff
 800214e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d114      	bne.n	800218a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01a      	beq.n	800219e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3310      	adds	r3, #16
 800216c:	4618      	mov	r0, r3
 800216e:	f001 f911 	bl	8003394 <xTaskRemoveFromEventList>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <xQueueGenericReset+0xcc>)
 800217a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	e009      	b.n	800219e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3310      	adds	r3, #16
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fef2 	bl	8001f78 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3324      	adds	r3, #36	; 0x24
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff feed 	bl	8001f78 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800219e:	f002 f963 	bl	8004468 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	e000ed04 	.word	0xe000ed04

080021b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <xQueueGenericCreate+0x2a>
        __asm volatile
 80021c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	61bb      	str	r3, [r7, #24]
    }
 80021d6:	bf00      	nop
 80021d8:	e7fe      	b.n	80021d8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <xQueueGenericCreate+0x48>
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d101      	bne.n	80021fc <xQueueGenericCreate+0x4c>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <xQueueGenericCreate+0x4e>
 80021fc:	2300      	movs	r3, #0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <xQueueGenericCreate+0x68>
        __asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	617b      	str	r3, [r7, #20]
    }
 8002214:	bf00      	nop
 8002216:	e7fe      	b.n	8002216 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800221e:	d90a      	bls.n	8002236 <xQueueGenericCreate+0x86>
        __asm volatile
 8002220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	613b      	str	r3, [r7, #16]
    }
 8002232:	bf00      	nop
 8002234:	e7fe      	b.n	8002234 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	3350      	adds	r3, #80	; 0x50
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fa06 	bl	800464c <pvPortMalloc>
 8002240:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3350      	adds	r3, #80	; 0x50
 8002250:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002252:	79fa      	ldrb	r2, [r7, #7]
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f805 	bl	800226e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002264:	6a3b      	ldr	r3, [r7, #32]
    }
 8002266:	4618      	mov	r0, r3
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e002      	b.n	8002290 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800229c:	2101      	movs	r1, #1
 800229e:	69b8      	ldr	r0, [r7, #24]
 80022a0:	f7ff ff1e 	bl	80020e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08e      	sub	sp, #56	; 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <xQueueGenericSend+0x32>
        __asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <xQueueGenericSend+0x40>
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <xQueueGenericSend+0x44>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <xQueueGenericSend+0x46>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <xQueueGenericSend+0x60>
        __asm volatile
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002310:	bf00      	nop
 8002312:	e7fe      	b.n	8002312 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d103      	bne.n	8002322 <xQueueGenericSend+0x6e>
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <xQueueGenericSend+0x72>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <xQueueGenericSend+0x74>
 8002326:	2300      	movs	r3, #0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <xQueueGenericSend+0x8e>
        __asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	623b      	str	r3, [r7, #32]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002342:	f001 f9c3 	bl	80036cc <xTaskGetSchedulerState>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <xQueueGenericSend+0x9e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <xQueueGenericSend+0xa2>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <xQueueGenericSend+0xa4>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <xQueueGenericSend+0xbe>
        __asm volatile
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	61fb      	str	r3, [r7, #28]
    }
 800236e:	bf00      	nop
 8002370:	e7fe      	b.n	8002370 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002372:	f002 f849 	bl	8004408 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <xQueueGenericSend+0xd4>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d129      	bne.n	80023dc <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800238e:	f000 fa19 	bl	80027c4 <prvCopyDataToQueue>
 8002392:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	3324      	adds	r3, #36	; 0x24
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fff7 	bl	8003394 <xTaskRemoveFromEventList>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <xQueueGenericSend+0x1f8>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	e00a      	b.n	80023d4 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80023c4:	4b39      	ldr	r3, [pc, #228]	; (80024ac <xQueueGenericSend+0x1f8>)
 80023c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80023d4:	f002 f848 	bl	8004468 <vPortExitCritical>
                return pdPASS;
 80023d8:	2301      	movs	r3, #1
 80023da:	e063      	b.n	80024a4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023e2:	f002 f841 	bl	8004468 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e05c      	b.n	80024a4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 f82f 	bl	8003458 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023fa:	2301      	movs	r3, #1
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023fe:	f002 f833 	bl	8004468 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002402:	f000 fda9 	bl	8002f58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002406:	f001 ffff 	bl	8004408 <vPortEnterCritical>
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002410:	b25b      	sxtb	r3, r3
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002416:	d103      	bne.n	8002420 <xQueueGenericSend+0x16c>
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002426:	b25b      	sxtb	r3, r3
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242c:	d103      	bne.n	8002436 <xQueueGenericSend+0x182>
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002436:	f002 f817 	bl	8004468 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800243a:	1d3a      	adds	r2, r7, #4
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f001 f81e 	bl	8003484 <xTaskCheckForTimeOut>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d124      	bne.n	8002498 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800244e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002450:	f000 fab0 	bl	80029b4 <prvIsQueueFull>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d018      	beq.n	800248c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	3310      	adds	r3, #16
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 ff46 	bl	80032f4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800246a:	f000 fa3b 	bl	80028e4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800246e:	f000 fd81 	bl	8002f74 <xTaskResumeAll>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	f47f af7c 	bne.w	8002372 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <xQueueGenericSend+0x1f8>)
 800247c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	e772      	b.n	8002372 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800248c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248e:	f000 fa29 	bl	80028e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002492:	f000 fd6f 	bl	8002f74 <xTaskResumeAll>
 8002496:	e76c      	b.n	8002372 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800249a:	f000 fa23 	bl	80028e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800249e:	f000 fd69 	bl	8002f74 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80024a2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3738      	adds	r7, #56	; 0x38
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	e000ed04 	.word	0xe000ed04

080024b0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b090      	sub	sp, #64	; 0x40
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80024da:	bf00      	nop
 80024dc:	e7fe      	b.n	80024dc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <xQueueGenericSendFromISR+0x3c>
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <xQueueGenericSendFromISR+0x40>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <xQueueGenericSendFromISR+0x42>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80024f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fa:	f383 8811 	msr	BASEPRI, r3
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002508:	bf00      	nop
 800250a:	e7fe      	b.n	800250a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d103      	bne.n	800251a <xQueueGenericSendFromISR+0x6a>
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <xQueueGenericSendFromISR+0x6e>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <xQueueGenericSendFromISR+0x70>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	623b      	str	r3, [r7, #32]
    }
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800253a:	f002 f847 	bl	80045cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800253e:	f3ef 8211 	mrs	r2, BASEPRI
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	61fa      	str	r2, [r7, #28]
 8002554:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002556:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <xQueueGenericSendFromISR+0xbc>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d13e      	bne.n	80025ea <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002582:	f000 f91f 	bl	80027c4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800258e:	d112      	bne.n	80025b6 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d025      	beq.n	80025e4 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fef9 	bl	8003394 <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01d      	beq.n	80025e4 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01a      	beq.n	80025e4 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e016      	b.n	80025e4 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80025b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80025ba:	2b7f      	cmp	r3, #127	; 0x7f
 80025bc:	d10a      	bne.n	80025d4 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	617b      	str	r3, [r7, #20]
    }
 80025d0:	bf00      	nop
 80025d2:	e7fe      	b.n	80025d2 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025d8:	3301      	adds	r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	b25a      	sxtb	r2, r3
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80025e4:	2301      	movs	r3, #1
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80025e8:	e001      	b.n	80025ee <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80025f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80025fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3740      	adds	r7, #64	; 0x40
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	; 0x30
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <xQueueReceive+0x30>
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	623b      	str	r3, [r7, #32]
    }
 8002630:	bf00      	nop
 8002632:	e7fe      	b.n	8002632 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <xQueueReceive+0x3e>
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <xQueueReceive+0x42>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <xQueueReceive+0x44>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <xQueueReceive+0x5e>
        __asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	61fb      	str	r3, [r7, #28]
    }
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002662:	f001 f833 	bl	80036cc <xTaskGetSchedulerState>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <xQueueReceive+0x6e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <xQueueReceive+0x72>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <xQueueReceive+0x74>
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <xQueueReceive+0x8e>
        __asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	61bb      	str	r3, [r7, #24]
    }
 800268e:	bf00      	nop
 8002690:	e7fe      	b.n	8002690 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002692:	f001 feb9 	bl	8004408 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01f      	beq.n	80026e2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026a6:	f000 f8f7 	bl	8002898 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00f      	beq.n	80026da <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	3310      	adds	r3, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fe68 	bl	8003394 <xTaskRemoveFromEventList>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <xQueueReceive+0x1bc>)
 80026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026da:	f001 fec5 	bl	8004468 <vPortExitCritical>
                return pdPASS;
 80026de:	2301      	movs	r3, #1
 80026e0:	e069      	b.n	80027b6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d103      	bne.n	80026f0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026e8:	f001 febe 	bl	8004468 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e062      	b.n	80027b6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 feac 	bl	8003458 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002704:	f001 feb0 	bl	8004468 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002708:	f000 fc26 	bl	8002f58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800270c:	f001 fe7c 	bl	8004408 <vPortEnterCritical>
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002716:	b25b      	sxtb	r3, r3
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271c:	d103      	bne.n	8002726 <xQueueReceive+0x122>
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800272c:	b25b      	sxtb	r3, r3
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002732:	d103      	bne.n	800273c <xQueueReceive+0x138>
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800273c:	f001 fe94 	bl	8004468 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002740:	1d3a      	adds	r2, r7, #4
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fe9b 	bl	8003484 <xTaskCheckForTimeOut>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d123      	bne.n	800279c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002756:	f000 f917 	bl	8002988 <prvIsQueueEmpty>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d017      	beq.n	8002790 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	3324      	adds	r3, #36	; 0x24
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fdc3 	bl	80032f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800276e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002770:	f000 f8b8 	bl	80028e4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002774:	f000 fbfe 	bl	8002f74 <xTaskResumeAll>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d189      	bne.n	8002692 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <xQueueReceive+0x1bc>)
 8002780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	e780      	b.n	8002692 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002792:	f000 f8a7 	bl	80028e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002796:	f000 fbed 	bl	8002f74 <xTaskResumeAll>
 800279a:	e77a      	b.n	8002692 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800279c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800279e:	f000 f8a1 	bl	80028e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027a2:	f000 fbe7 	bl	8002f74 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a8:	f000 f8ee 	bl	8002988 <prvIsQueueEmpty>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f43f af6f 	beq.w	8002692 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80027b4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3730      	adds	r7, #48	; 0x30
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000ed04 	.word	0xe000ed04

080027c4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d14d      	bne.n	8002886 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 ff8a 	bl	8003708 <xTaskPriorityDisinherit>
 80027f4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	e043      	b.n	8002886 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d119      	bne.n	8002838 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6858      	ldr	r0, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	461a      	mov	r2, r3
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	f002 f93e 	bl	8004a90 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	441a      	add	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d32b      	bcc.n	8002886 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	e026      	b.n	8002886 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	68d8      	ldr	r0, [r3, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	461a      	mov	r2, r3
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	f002 f924 	bl	8004a90 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	425b      	negs	r3, r3
 8002852:	441a      	add	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	425b      	negs	r3, r3
 800286e:	441a      	add	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d105      	bne.n	8002886 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	3b01      	subs	r3, #1
 8002884:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800288e:	697b      	ldr	r3, [r7, #20]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d018      	beq.n	80028dc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	441a      	add	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d303      	bcc.n	80028cc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68d9      	ldr	r1, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	461a      	mov	r2, r3
 80028d6:	6838      	ldr	r0, [r7, #0]
 80028d8:	f002 f8da 	bl	8004a90 <memcpy>
    }
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028ec:	f001 fd8c 	bl	8004408 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028f8:	e011      	b.n	800291e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d012      	beq.n	8002928 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3324      	adds	r3, #36	; 0x24
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fd44 	bl	8003394 <xTaskRemoveFromEventList>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002912:	f000 fe1d 	bl	8003550 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	3b01      	subs	r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dce9      	bgt.n	80028fa <prvUnlockQueue+0x16>
 8002926:	e000      	b.n	800292a <prvUnlockQueue+0x46>
                        break;
 8002928:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002932:	f001 fd99 	bl	8004468 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002936:	f001 fd67 	bl	8004408 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002940:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002942:	e011      	b.n	8002968 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d012      	beq.n	8002972 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3310      	adds	r3, #16
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fd1f 	bl	8003394 <xTaskRemoveFromEventList>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800295c:	f000 fdf8 	bl	8003550 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	3b01      	subs	r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800296c:	2b00      	cmp	r3, #0
 800296e:	dce9      	bgt.n	8002944 <prvUnlockQueue+0x60>
 8002970:	e000      	b.n	8002974 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002972:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	22ff      	movs	r2, #255	; 0xff
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800297c:	f001 fd74 	bl	8004468 <vPortExitCritical>
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002990:	f001 fd3a 	bl	8004408 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800299c:	2301      	movs	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e001      	b.n	80029a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029a6:	f001 fd5f 	bl	8004468 <vPortExitCritical>

    return xReturn;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029bc:	f001 fd24 	bl	8004408 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d102      	bne.n	80029d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80029cc:	2301      	movs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e001      	b.n	80029d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029d6:	f001 fd47 	bl	8004468 <vPortExitCritical>

    return xReturn;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e014      	b.n	8002a1e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029f4:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <vQueueAddToRegistry+0x50>)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <vQueueAddToRegistry+0x50>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <vQueueAddToRegistry+0x50>)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002a16:	e006      	b.n	8002a26 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b07      	cmp	r3, #7
 8002a22:	d9e7      	bls.n	80029f4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000098 	.word	0x20000098

08002a38 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a48:	f001 fcde 	bl	8004408 <vPortEnterCritical>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a58:	d103      	bne.n	8002a62 <vQueueWaitForMessageRestricted+0x2a>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6e:	d103      	bne.n	8002a78 <vQueueWaitForMessageRestricted+0x40>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a78:	f001 fcf6 	bl	8004468 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3324      	adds	r3, #36	; 0x24
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fc55 	bl	800333c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff26 	bl	80028e4 <prvUnlockQueue>
    }
 8002a98:	bf00      	nop
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	; 0x30
 8002aa4:	af04      	add	r7, sp, #16
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 fdc9 	bl	800464c <pvPortMalloc>
 8002aba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00e      	beq.n	8002ae0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ac2:	2058      	movs	r0, #88	; 0x58
 8002ac4:	f001 fdc2 	bl	800464c <pvPortMalloc>
 8002ac8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad6:	e005      	b.n	8002ae4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f001 fe97 	bl	800480c <vPortFree>
 8002ade:	e001      	b.n	8002ae4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d013      	beq.n	8002b12 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	2300      	movs	r3, #0
 8002aee:	9303      	str	r3, [sp, #12]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f80e 	bl	8002b22 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b06:	69f8      	ldr	r0, [r7, #28]
 8002b08:	f000 f8a2 	bl	8002c50 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e002      	b.n	8002b18 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b16:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b18:	69bb      	ldr	r3, [r7, #24]
    }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b088      	sub	sp, #32
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	21a5      	movs	r1, #165	; 0xa5
 8002b3c:	f001 ffb6 	bl	8004aac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f023 0307 	bic.w	r3, r3, #7
 8002b58:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	617b      	str	r3, [r7, #20]
    }
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01f      	beq.n	8002bc0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	e012      	b.n	8002bac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	7819      	ldrb	r1, [r3, #0]
 8002b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	3334      	adds	r3, #52	; 0x34
 8002b96:	460a      	mov	r2, r1
 8002b98:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	d9e9      	bls.n	8002b86 <prvInitialiseNewTask+0x64>
 8002bb2:	e000      	b.n	8002bb6 <prvInitialiseNewTask+0x94>
            {
                break;
 8002bb4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bbe:	e003      	b.n	8002bc8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d901      	bls.n	8002bd2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bce:	2304      	movs	r3, #4
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bdc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	2200      	movs	r2, #0
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	3304      	adds	r3, #4
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f9e5 	bl	8001fb8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	3318      	adds	r3, #24
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f9e0 	bl	8001fb8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	f1c3 0205 	rsb	r2, r3, #5
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	3350      	adds	r3, #80	; 0x50
 8002c12:	2204      	movs	r2, #4
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 ff48 	bl	8004aac <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	3354      	adds	r3, #84	; 0x54
 8002c20:	2201      	movs	r2, #1
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 ff41 	bl	8004aac <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	69b8      	ldr	r0, [r7, #24]
 8002c30:	f001 fabc 	bl	80041ac <pxPortInitialiseStack>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c44:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c58:	f001 fbd6 	bl	8004408 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <prvAddNewTaskToReadyList+0xc0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <prvAddNewTaskToReadyList+0xc0>)
 8002c64:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c66:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c6e:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c74:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <prvAddNewTaskToReadyList+0xc0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d110      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c7c:	f000 fc8c 	bl	8003598 <prvInitialiseTaskLists>
 8002c80:	e00d      	b.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d802      	bhi.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c98:	4a1e      	ldr	r2, [pc, #120]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <prvAddNewTaskToReadyList+0xcc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <prvAddNewTaskToReadyList+0xcc>)
 8002ca6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <prvAddNewTaskToReadyList+0xcc>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <prvAddNewTaskToReadyList+0xd4>)
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f7ff f97a 	bl	8001fd2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cde:	f001 fbc3 	bl	8004468 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00e      	beq.n	8002d08 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <prvAddNewTaskToReadyList+0xd8>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200001b0 	.word	0x200001b0
 8002d14:	200000d8 	.word	0x200000d8
 8002d18:	200001bc 	.word	0x200001bc
 8002d1c:	200001cc 	.word	0x200001cc
 8002d20:	200001b8 	.word	0x200001b8
 8002d24:	200000dc 	.word	0x200000dc
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d34:	f001 fb68 	bl	8004408 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <vTaskDelete+0x18>
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <vTaskDelete+0xf8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e000      	b.n	8002d46 <vTaskDelete+0x1a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff f99d 	bl	800208c <uxListRemove>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d115      	bne.n	8002d84 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	4932      	ldr	r1, [pc, #200]	; (8002e28 <vTaskDelete+0xfc>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <vTaskDelete+0x58>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	2201      	movs	r2, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <vTaskDelete+0x100>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <vTaskDelete+0x100>)
 8002d82:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3318      	adds	r3, #24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f97b 	bl	800208c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <vTaskDelete+0x104>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <vTaskDelete+0x104>)
 8002d9e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <vTaskDelete+0xf8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d10b      	bne.n	8002dc2 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4820      	ldr	r0, [pc, #128]	; (8002e34 <vTaskDelete+0x108>)
 8002db2:	f7ff f90e 	bl	8001fd2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <vTaskDelete+0x10c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <vTaskDelete+0x10c>)
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e009      	b.n	8002dd6 <vTaskDelete+0xaa>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <vTaskDelete+0x110>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <vTaskDelete+0x110>)
 8002dca:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
                prvDeleteTCB( pxTCB );
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fc51 	bl	8003674 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002dd2:	f000 fc5f 	bl	8003694 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002dd6:	f001 fb47 	bl	8004468 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <vTaskDelete+0x114>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01b      	beq.n	8002e1a <vTaskDelete+0xee>
        {
            if( pxTCB == pxCurrentTCB )
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <vTaskDelete+0xf8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d116      	bne.n	8002e1a <vTaskDelete+0xee>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <vTaskDelete+0x118>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <vTaskDelete+0xde>
        __asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60bb      	str	r3, [r7, #8]
    }
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <vTaskDelete+0xdc>
                portYIELD_WITHIN_API();
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <vTaskDelete+0x11c>)
 8002e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200000d8 	.word	0x200000d8
 8002e28:	200000dc 	.word	0x200000dc
 8002e2c:	200001b8 	.word	0x200001b8
 8002e30:	200001cc 	.word	0x200001cc
 8002e34:	20000184 	.word	0x20000184
 8002e38:	20000198 	.word	0x20000198
 8002e3c:	200001b0 	.word	0x200001b0
 8002e40:	200001bc 	.word	0x200001bc
 8002e44:	200001d8 	.word	0x200001d8
 8002e48:	e000ed04 	.word	0xe000ed04

08002e4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <vTaskDelay+0x60>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <vTaskDelay+0x30>
        __asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	60bb      	str	r3, [r7, #8]
    }
 8002e78:	bf00      	nop
 8002e7a:	e7fe      	b.n	8002e7a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002e7c:	f000 f86c 	bl	8002f58 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e80:	2100      	movs	r1, #0
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fe1a 	bl	8003abc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e88:	f000 f874 	bl	8002f74 <xTaskResumeAll>
 8002e8c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <vTaskDelay+0x64>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200001d8 	.word	0x200001d8
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <vTaskStartScheduler+0x88>)
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2282      	movs	r2, #130	; 0x82
 8002ec6:	491e      	ldr	r1, [pc, #120]	; (8002f40 <vTaskStartScheduler+0x8c>)
 8002ec8:	481e      	ldr	r0, [pc, #120]	; (8002f44 <vTaskStartScheduler+0x90>)
 8002eca:	f7ff fde9 	bl	8002aa0 <xTaskCreate>
 8002ece:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d102      	bne.n	8002edc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002ed6:	f000 fe57 	bl	8003b88 <xTimerCreateTimerTask>
 8002eda:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d116      	bne.n	8002f10 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	60bb      	str	r3, [r7, #8]
    }
 8002ef4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <vTaskStartScheduler+0x94>)
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002efc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <vTaskStartScheduler+0x98>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <vTaskStartScheduler+0x9c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f0a:	f001 f9db 	bl	80042c4 <xPortStartScheduler>
 8002f0e:	e00e      	b.n	8002f2e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f16:	d10a      	bne.n	8002f2e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	607b      	str	r3, [r7, #4]
    }
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <vTaskStartScheduler+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200001d4 	.word	0x200001d4
 8002f40:	08004b08 	.word	0x08004b08
 8002f44:	08003569 	.word	0x08003569
 8002f48:	200001d0 	.word	0x200001d0
 8002f4c:	200001bc 	.word	0x200001bc
 8002f50:	200001b4 	.word	0x200001b4
 8002f54:	2000000c 	.word	0x2000000c

08002f58 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <vTaskSuspendAll+0x18>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a03      	ldr	r2, [pc, #12]	; (8002f70 <vTaskSuspendAll+0x18>)
 8002f64:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	200001d8 	.word	0x200001d8

08002f74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <xTaskResumeAll+0x114>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	603b      	str	r3, [r7, #0]
    }
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fa0:	f001 fa32 	bl	8004408 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <xTaskResumeAll+0x114>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	4a37      	ldr	r2, [pc, #220]	; (8003088 <xTaskResumeAll+0x114>)
 8002fac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <xTaskResumeAll+0x114>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d161      	bne.n	800307a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fb6:	4b35      	ldr	r3, [pc, #212]	; (800308c <xTaskResumeAll+0x118>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d05d      	beq.n	800307a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fbe:	e02e      	b.n	800301e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	4b33      	ldr	r3, [pc, #204]	; (8003090 <xTaskResumeAll+0x11c>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3318      	adds	r3, #24
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff f85d 	bl	800208c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f858 	bl	800208c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <xTaskResumeAll+0x120>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <xTaskResumeAll+0x120>)
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4a27      	ldr	r2, [pc, #156]	; (8003098 <xTaskResumeAll+0x124>)
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7fe ffe4 	bl	8001fd2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <xTaskResumeAll+0x128>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <xTaskResumeAll+0x12c>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <xTaskResumeAll+0x11c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1cc      	bne.n	8002fc0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800302c:	f000 fb32 	bl	8003694 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003030:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <xTaskResumeAll+0x130>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800303c:	f000 f846 	bl	80030cc <xTaskIncrementTick>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <xTaskResumeAll+0x12c>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f1      	bne.n	800303c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <xTaskResumeAll+0x130>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <xTaskResumeAll+0x12c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003066:	2301      	movs	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <xTaskResumeAll+0x134>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800307a:	f001 f9f5 	bl	8004468 <vPortExitCritical>

    return xAlreadyYielded;
 800307e:	68bb      	ldr	r3, [r7, #8]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200001d8 	.word	0x200001d8
 800308c:	200001b0 	.word	0x200001b0
 8003090:	20000170 	.word	0x20000170
 8003094:	200001b8 	.word	0x200001b8
 8003098:	200000dc 	.word	0x200000dc
 800309c:	200000d8 	.word	0x200000d8
 80030a0:	200001c4 	.word	0x200001c4
 80030a4:	200001c0 	.word	0x200001c0
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <xTaskGetTickCount+0x1c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200001b4 	.word	0x200001b4

080030cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d6:	4b4e      	ldr	r3, [pc, #312]	; (8003210 <xTaskIncrementTick+0x144>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 808e 	bne.w	80031fc <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <xTaskIncrementTick+0x148>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030e8:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <xTaskIncrementTick+0x148>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d120      	bne.n	8003136 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80030f4:	4b48      	ldr	r3, [pc, #288]	; (8003218 <xTaskIncrementTick+0x14c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <xTaskIncrementTick+0x48>
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	603b      	str	r3, [r7, #0]
    }
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <xTaskIncrementTick+0x46>
 8003114:	4b40      	ldr	r3, [pc, #256]	; (8003218 <xTaskIncrementTick+0x14c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b40      	ldr	r3, [pc, #256]	; (800321c <xTaskIncrementTick+0x150>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3e      	ldr	r2, [pc, #248]	; (8003218 <xTaskIncrementTick+0x14c>)
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4a3e      	ldr	r2, [pc, #248]	; (800321c <xTaskIncrementTick+0x150>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <xTaskIncrementTick+0x154>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	4a3c      	ldr	r2, [pc, #240]	; (8003220 <xTaskIncrementTick+0x154>)
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	f000 faaf 	bl	8003694 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <xTaskIncrementTick+0x158>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	429a      	cmp	r2, r3
 800313e:	d348      	bcc.n	80031d2 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003140:	4b35      	ldr	r3, [pc, #212]	; (8003218 <xTaskIncrementTick+0x14c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <xTaskIncrementTick+0x158>)
 800314c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003150:	601a      	str	r2, [r3, #0]
                    break;
 8003152:	e03e      	b.n	80031d2 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003154:	4b30      	ldr	r3, [pc, #192]	; (8003218 <xTaskIncrementTick+0x14c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d203      	bcs.n	8003174 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800316c:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <xTaskIncrementTick+0x158>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003172:	e02e      	b.n	80031d2 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	3304      	adds	r3, #4
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe ff87 	bl	800208c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3318      	adds	r3, #24
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe ff7e 	bl	800208c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <xTaskIncrementTick+0x15c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	4a22      	ldr	r2, [pc, #136]	; (8003228 <xTaskIncrementTick+0x15c>)
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4a1f      	ldr	r2, [pc, #124]	; (800322c <xTaskIncrementTick+0x160>)
 80031b0:	441a      	add	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f7fe ff0a 	bl	8001fd2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <xTaskIncrementTick+0x164>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3b9      	bcc.n	8003140 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d0:	e7b6      	b.n	8003140 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <xTaskIncrementTick+0x164>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	4914      	ldr	r1, [pc, #80]	; (800322c <xTaskIncrementTick+0x160>)
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d901      	bls.n	80031ee <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <xTaskIncrementTick+0x168>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e004      	b.n	8003206 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <xTaskIncrementTick+0x16c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <xTaskIncrementTick+0x16c>)
 8003204:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003206:	697b      	ldr	r3, [r7, #20]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200001d8 	.word	0x200001d8
 8003214:	200001b4 	.word	0x200001b4
 8003218:	20000168 	.word	0x20000168
 800321c:	2000016c 	.word	0x2000016c
 8003220:	200001c8 	.word	0x200001c8
 8003224:	200001d0 	.word	0x200001d0
 8003228:	200001b8 	.word	0x200001b8
 800322c:	200000dc 	.word	0x200000dc
 8003230:	200000d8 	.word	0x200000d8
 8003234:	200001c4 	.word	0x200001c4
 8003238:	200001c0 	.word	0x200001c0

0800323c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <vTaskSwitchContext+0xa4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <vTaskSwitchContext+0xa8>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003250:	e03f      	b.n	80032d2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <vTaskSwitchContext+0xa8>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003258:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <vTaskSwitchContext+0xac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	f1c3 031f 	rsb	r3, r3, #31
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	491f      	ldr	r1, [pc, #124]	; (80032ec <vTaskSwitchContext+0xb0>)
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	607b      	str	r3, [r7, #4]
    }
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <vTaskSwitchContext+0x5a>
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <vTaskSwitchContext+0xb0>)
 80032a4:	4413      	add	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	3308      	adds	r3, #8
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d104      	bne.n	80032c8 <vTaskSwitchContext+0x8c>
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <vTaskSwitchContext+0xb4>)
 80032d0:	6013      	str	r3, [r2, #0]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	200001d8 	.word	0x200001d8
 80032e4:	200001c4 	.word	0x200001c4
 80032e8:	200001b8 	.word	0x200001b8
 80032ec:	200000dc 	.word	0x200000dc
 80032f0:	200000d8 	.word	0x200000d8

080032f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	60fb      	str	r3, [r7, #12]
    }
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <vTaskPlaceOnEventList+0x44>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3318      	adds	r3, #24
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe fe79 	bl	800201a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003328:	2101      	movs	r1, #1
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f000 fbc6 	bl	8003abc <prvAddCurrentTaskToDelayedList>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200000d8 	.word	0x200000d8

0800333c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	617b      	str	r3, [r7, #20]
    }
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <vTaskPlaceOnEventListRestricted+0x54>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3318      	adds	r3, #24
 800336a:	4619      	mov	r1, r3
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7fe fe30 	bl	8001fd2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800337c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	68b8      	ldr	r0, [r7, #8]
 8003382:	f000 fb9b 	bl	8003abc <prvAddCurrentTaskToDelayedList>
    }
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200000d8 	.word	0x200000d8

08003394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	60fb      	str	r3, [r7, #12]
    }
 80033bc:	bf00      	nop
 80033be:	e7fe      	b.n	80033be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	3318      	adds	r3, #24
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fe61 	bl	800208c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <xTaskRemoveFromEventList+0xac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d11c      	bne.n	800340c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fe58 	bl	800208c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <xTaskRemoveFromEventList+0xb0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	4a16      	ldr	r2, [pc, #88]	; (8003444 <xTaskRemoveFromEventList+0xb0>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <xTaskRemoveFromEventList+0xb4>)
 80033fc:	441a      	add	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7fe fde4 	bl	8001fd2 <vListInsertEnd>
 800340a:	e005      	b.n	8003418 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3318      	adds	r3, #24
 8003410:	4619      	mov	r1, r3
 8003412:	480e      	ldr	r0, [pc, #56]	; (800344c <xTaskRemoveFromEventList+0xb8>)
 8003414:	f7fe fddd 	bl	8001fd2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <xTaskRemoveFromEventList+0xbc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	429a      	cmp	r2, r3
 8003424:	d905      	bls.n	8003432 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <xTaskRemoveFromEventList+0xc0>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e001      	b.n	8003436 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003436:	697b      	ldr	r3, [r7, #20]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200001d8 	.word	0x200001d8
 8003444:	200001b8 	.word	0x200001b8
 8003448:	200000dc 	.word	0x200000dc
 800344c:	20000170 	.word	0x20000170
 8003450:	200000d8 	.word	0x200000d8
 8003454:	200001c4 	.word	0x200001c4

08003458 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <vTaskInternalSetTimeOutState+0x24>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <vTaskInternalSetTimeOutState+0x28>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	200001c8 	.word	0x200001c8
 8003480:	200001b4 	.word	0x200001b4

08003484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	613b      	str	r3, [r7, #16]
    }
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	60fb      	str	r3, [r7, #12]
    }
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80034c6:	f000 ff9f 	bl	8004408 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <xTaskCheckForTimeOut+0xc4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e2:	d102      	bne.n	80034ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e026      	b.n	8003538 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <xTaskCheckForTimeOut+0xc8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d00a      	beq.n	800350c <xTaskCheckForTimeOut+0x88>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d305      	bcc.n	800350c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e015      	b.n	8003538 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	429a      	cmp	r2, r3
 8003514:	d20b      	bcs.n	800352e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad2      	subs	r2, r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff98 	bl	8003458 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e004      	b.n	8003538 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003538:	f000 ff96 	bl	8004468 <vPortExitCritical>

    return xReturn;
 800353c:	69fb      	ldr	r3, [r7, #28]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200001b4 	.word	0x200001b4
 800354c:	200001c8 	.word	0x200001c8

08003550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <vTaskMissedYield+0x14>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	200001c4 	.word	0x200001c4

08003568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003570:	f000 f852 	bl	8003618 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <prvIdleTask+0x28>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d9f9      	bls.n	8003570 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <prvIdleTask+0x2c>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800358c:	e7f0      	b.n	8003570 <prvIdleTask+0x8>
 800358e:	bf00      	nop
 8003590:	200000dc 	.word	0x200000dc
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e00c      	b.n	80035be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <prvInitialiseTaskLists+0x60>)
 80035b0:	4413      	add	r3, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fce0 	bl	8001f78 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3301      	adds	r3, #1
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d9ef      	bls.n	80035a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035c4:	480d      	ldr	r0, [pc, #52]	; (80035fc <prvInitialiseTaskLists+0x64>)
 80035c6:	f7fe fcd7 	bl	8001f78 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035ca:	480d      	ldr	r0, [pc, #52]	; (8003600 <prvInitialiseTaskLists+0x68>)
 80035cc:	f7fe fcd4 	bl	8001f78 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035d0:	480c      	ldr	r0, [pc, #48]	; (8003604 <prvInitialiseTaskLists+0x6c>)
 80035d2:	f7fe fcd1 	bl	8001f78 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80035d6:	480c      	ldr	r0, [pc, #48]	; (8003608 <prvInitialiseTaskLists+0x70>)
 80035d8:	f7fe fcce 	bl	8001f78 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <prvInitialiseTaskLists+0x74>)
 80035de:	f7fe fccb 	bl	8001f78 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <prvInitialiseTaskLists+0x78>)
 80035e4:	4a05      	ldr	r2, [pc, #20]	; (80035fc <prvInitialiseTaskLists+0x64>)
 80035e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvInitialiseTaskLists+0x7c>)
 80035ea:	4a05      	ldr	r2, [pc, #20]	; (8003600 <prvInitialiseTaskLists+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200000dc 	.word	0x200000dc
 80035fc:	20000140 	.word	0x20000140
 8003600:	20000154 	.word	0x20000154
 8003604:	20000170 	.word	0x20000170
 8003608:	20000184 	.word	0x20000184
 800360c:	2000019c 	.word	0x2000019c
 8003610:	20000168 	.word	0x20000168
 8003614:	2000016c 	.word	0x2000016c

08003618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800361e:	e019      	b.n	8003654 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003620:	f000 fef2 	bl	8004408 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <prvCheckTasksWaitingTermination+0x50>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fd2b 	bl	800208c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <prvCheckTasksWaitingTermination+0x54>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3b01      	subs	r3, #1
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <prvCheckTasksWaitingTermination+0x54>)
 800363e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003648:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800364a:	f000 ff0d 	bl	8004468 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f810 	bl	8003674 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e1      	bne.n	8003620 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000184 	.word	0x20000184
 800366c:	200001b0 	.word	0x200001b0
 8003670:	20000198 	.word	0x20000198

08003674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f8c3 	bl	800480c <vPortFree>
                vPortFree( pxTCB );
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f001 f8c0 	bl	800480c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036aa:	e005      	b.n	80036b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000168 	.word	0x20000168
 80036c8:	200001d0 	.word	0x200001d0

080036cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <xTaskGetSchedulerState+0x34>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80036da:	2301      	movs	r3, #1
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	e008      	b.n	80036f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <xTaskGetSchedulerState+0x38>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80036e8:	2302      	movs	r3, #2
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	e001      	b.n	80036f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036f2:	687b      	ldr	r3, [r7, #4]
    }
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	200001bc 	.word	0x200001bc
 8003704:	200001d8 	.word	0x200001d8

08003708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d063      	beq.n	80037e6 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800371e:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <xTaskPriorityDisinherit+0xe8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	429a      	cmp	r2, r3
 8003726:	d00a      	beq.n	800373e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	60fb      	str	r3, [r7, #12]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	60bb      	str	r3, [r7, #8]
    }
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	429a      	cmp	r2, r3
 8003770:	d039      	beq.n	80037e6 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d135      	bne.n	80037e6 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	3304      	adds	r3, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fc84 	bl	800208c <uxListRemove>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	2201      	movs	r2, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43da      	mvns	r2, r3
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <xTaskPriorityDisinherit+0xec>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4013      	ands	r3, r2
 800379c:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <xTaskPriorityDisinherit+0xec>)
 800379e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f1c3 0205 	rsb	r2, r3, #5
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	2201      	movs	r2, #1
 80037ba:	409a      	lsls	r2, r3
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <xTaskPriorityDisinherit+0xec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	4a0c      	ldr	r2, [pc, #48]	; (80037f4 <xTaskPriorityDisinherit+0xec>)
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <xTaskPriorityDisinherit+0xf0>)
 80037d4:	441a      	add	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3304      	adds	r3, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7fe fbf8 	bl	8001fd2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80037e2:	2301      	movs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80037e6:	697b      	ldr	r3, [r7, #20]
    }
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	200000d8 	.word	0x200000d8
 80037f4:	200001b8 	.word	0x200001b8
 80037f8:	200000dc 	.word	0x200000dc

080037fc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	613b      	str	r3, [r7, #16]
    }
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003826:	f000 fdef 	bl	8004408 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800382a:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <xTaskGenericNotifyWait+0xf8>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	3354      	adds	r3, #84	; 0x54
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d022      	beq.n	8003882 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800383c:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <xTaskGenericNotifyWait+0xf8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	3214      	adds	r2, #20
 8003844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	43d2      	mvns	r2, r2
 800384c:	4011      	ands	r1, r2
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	3214      	adds	r2, #20
 8003852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003856:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <xTaskGenericNotifyWait+0xf8>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	3354      	adds	r3, #84	; 0x54
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800386a:	2101      	movs	r1, #1
 800386c:	6a38      	ldr	r0, [r7, #32]
 800386e:	f000 f925 	bl	8003abc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <xTaskGenericNotifyWait+0xfc>)
 8003874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003882:	f000 fdf1 	bl	8004468 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003886:	f000 fdbf 	bl	8004408 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003890:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <xTaskGenericNotifyWait+0xf8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	3214      	adds	r2, #20
 8003898:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <xTaskGenericNotifyWait+0xf8>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	3354      	adds	r3, #84	; 0x54
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d002      	beq.n	80038b8 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e00e      	b.n	80038d6 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <xTaskGenericNotifyWait+0xf8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	3214      	adds	r2, #20
 80038c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	43d2      	mvns	r2, r2
 80038c8:	4011      	ands	r1, r2
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	3214      	adds	r2, #20
 80038ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80038d2:	2301      	movs	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <xTaskGenericNotifyWait+0xf8>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	3354      	adds	r3, #84	; 0x54
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80038e4:	f000 fdc0 	bl	8004468 <vPortExitCritical>

        return xReturn;
 80038e8:	697b      	ldr	r3, [r7, #20]
    }
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200000d8 	.word	0x200000d8
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800390a:	2301      	movs	r3, #1
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <xTaskGenericNotify+0x2e>
        __asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	623b      	str	r3, [r7, #32]
    }
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	61fb      	str	r3, [r7, #28]
    }
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800394a:	f000 fd5d 	bl	8004408 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	3214      	adds	r2, #20
 800395a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4413      	add	r3, r2
 8003968:	3354      	adds	r3, #84	; 0x54
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4413      	add	r3, r2
 8003976:	3354      	adds	r3, #84	; 0x54
 8003978:	2202      	movs	r2, #2
 800397a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	2b04      	cmp	r3, #4
 8003980:	d83b      	bhi.n	80039fa <xTaskGenericNotify+0xfe>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <xTaskGenericNotify+0x8c>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	08003a19 	.word	0x08003a19
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039d1 	.word	0x080039d1
 8003998:	080039df 	.word	0x080039df
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	3214      	adds	r2, #20
 80039a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	ea42 0103 	orr.w	r1, r2, r3
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	3214      	adds	r2, #20
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039b6:	e032      	b.n	8003a1e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	3214      	adds	r2, #20
 80039be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	3214      	adds	r2, #20
 80039ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039ce:	e026      	b.n	8003a1e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	3214      	adds	r2, #20
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039dc:	e01f      	b.n	8003a1e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80039de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d006      	beq.n	80039f4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	3214      	adds	r2, #20
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80039f2:	e014      	b.n	8003a1e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80039f8:	e011      	b.n	8003a1e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <xTaskGenericNotify+0x1ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <xTaskGenericNotify+0x120>
        __asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	61bb      	str	r3, [r7, #24]
    }
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xTaskGenericNotify+0x11a>
                    break;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <xTaskGenericNotify+0x122>

                    break;
 8003a1c:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d139      	bne.n	8003a9a <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fb2e 	bl	800208c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	2201      	movs	r2, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <xTaskGenericNotify+0x1b0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <xTaskGenericNotify+0x1b0>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <xTaskGenericNotify+0x1b4>)
 8003a50:	441a      	add	r2, r3
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	3304      	adds	r3, #4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7fe faba 	bl	8001fd2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <xTaskGenericNotify+0x180>
        __asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	617b      	str	r3, [r7, #20]
    }
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <xTaskGenericNotify+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d907      	bls.n	8003a9a <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <xTaskGenericNotify+0x1bc>)
 8003a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a9a:	f000 fce5 	bl	8004468 <vPortExitCritical>

        return xReturn;
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3730      	adds	r7, #48	; 0x30
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	200001b4 	.word	0x200001b4
 8003aac:	200001b8 	.word	0x200001b8
 8003ab0:	200000dc 	.word	0x200000dc
 8003ab4:	200000d8 	.word	0x200000d8
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fada 	bl	800208c <uxListRemove>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43da      	mvns	r2, r3
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4013      	ands	r3, r2
 8003af2:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003af4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afc:	d10a      	bne.n	8003b14 <prvAddCurrentTaskToDelayedList+0x58>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	481a      	ldr	r0, [pc, #104]	; (8003b78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b0e:	f7fe fa60 	bl	8001fd2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b12:	e026      	b.n	8003b62 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d209      	bcs.n	8003b40 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b2c:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7fe fa6e 	bl	800201a <vListInsert>
}
 8003b3e:	e010      	b.n	8003b62 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7fe fa64 	bl	800201a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d202      	bcs.n	8003b62 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200001b4 	.word	0x200001b4
 8003b70:	200000d8 	.word	0x200000d8
 8003b74:	200001b8 	.word	0x200001b8
 8003b78:	2000019c 	.word	0x2000019c
 8003b7c:	2000016c 	.word	0x2000016c
 8003b80:	20000168 	.word	0x20000168
 8003b84:	200001d0 	.word	0x200001d0

08003b88 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b92:	f000 fad5 	bl	8004140 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <xTimerCreateTimerTask+0x54>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <xTimerCreateTimerTask+0x58>)
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bac:	490d      	ldr	r1, [pc, #52]	; (8003be4 <xTimerCreateTimerTask+0x5c>)
 8003bae:	480e      	ldr	r0, [pc, #56]	; (8003be8 <xTimerCreateTimerTask+0x60>)
 8003bb0:	f7fe ff76 	bl	8002aa0 <xTaskCreate>
 8003bb4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	603b      	str	r3, [r7, #0]
    }
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003bd2:	687b      	ldr	r3, [r7, #4]
    }
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	2000020c 	.word	0x2000020c
 8003be0:	20000210 	.word	0x20000210
 8003be4:	08004b10 	.word	0x08004b10
 8003be8:	08003d21 	.word	0x08003d21

08003bec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	623b      	str	r3, [r7, #32]
    }
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02a      	beq.n	8003c78 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	dc18      	bgt.n	8003c66 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c34:	f7ff fd4a 	bl	80036cc <xTaskGetSchedulerState>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d109      	bne.n	8003c52 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f107 0114 	add.w	r1, r7, #20
 8003c46:	2300      	movs	r3, #0
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	f7fe fb33 	bl	80022b4 <xQueueGenericSend>
 8003c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003c50:	e012      	b.n	8003c78 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	f107 0114 	add.w	r1, r7, #20
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f7fe fb29 	bl	80022b4 <xQueueGenericSend>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24
 8003c64:	e008      	b.n	8003c78 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f107 0114 	add.w	r1, r7, #20
 8003c6e:	2300      	movs	r3, #0
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	f7fe fc1d 	bl	80024b0 <xQueueGenericSendFromISR>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	2000020c 	.word	0x2000020c

08003c88 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <prvProcessExpiredTimer+0x94>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe f9f3 	bl	800208c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d022      	beq.n	8003cfa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	18d1      	adds	r1, r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f000 f8d1 	bl	8003e68 <prvInsertTimerInActiveList>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01f      	beq.n	8003d0c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff ff88 	bl	8003bec <xTimerGenericCommand>
 8003cdc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d113      	bne.n	8003d0c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
    }
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	6978      	ldr	r0, [r7, #20]
 8003d12:	4798      	blx	r3
    }
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000204 	.word	0x20000204

08003d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f857 	bl	8003de0 <prvGetNextExpireTime>
 8003d32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4619      	mov	r1, r3
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f803 	bl	8003d44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d3e:	f000 f8d5 	bl	8003eec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d42:	e7f1      	b.n	8003d28 <prvTimerTask+0x8>

08003d44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d4e:	f7ff f903 	bl	8002f58 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f866 	bl	8003e28 <prvSampleTimeNow>
 8003d5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d130      	bne.n	8003dc6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <prvProcessTimerOrBlockTask+0x3c>
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d806      	bhi.n	8003d80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d72:	f7ff f8ff 	bl	8002f74 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff85 	bl	8003c88 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d7e:	e024      	b.n	8003dca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <prvProcessTimerOrBlockTask+0x90>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <prvProcessTimerOrBlockTask+0x50>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <prvProcessTimerOrBlockTask+0x52>
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <prvProcessTimerOrBlockTask+0x94>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fe fe47 	bl	8002a38 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003daa:	f7ff f8e3 	bl	8002f74 <xTaskResumeAll>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <prvProcessTimerOrBlockTask+0x98>)
 8003db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	f3bf 8f6f 	isb	sy
    }
 8003dc4:	e001      	b.n	8003dca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003dc6:	f7ff f8d5 	bl	8002f74 <xTaskResumeAll>
    }
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000208 	.word	0x20000208
 8003dd8:	2000020c 	.word	0x2000020c
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <prvGetNextExpireTime+0x44>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <prvGetNextExpireTime+0x16>
 8003df2:	2201      	movs	r2, #1
 8003df4:	e000      	b.n	8003df8 <prvGetNextExpireTime+0x18>
 8003df6:	2200      	movs	r2, #0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <prvGetNextExpireTime+0x44>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e001      	b.n	8003e14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e14:	68fb      	ldr	r3, [r7, #12]
    }
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000204 	.word	0x20000204

08003e28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e30:	f7ff f93c 	bl	80030ac <xTaskGetTickCount>
 8003e34:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <prvSampleTimeNow+0x3c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d205      	bcs.n	8003e4c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e40:	f000 f91a 	bl	8004078 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e52:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <prvSampleTimeNow+0x3c>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e58:	68fb      	ldr	r3, [r7, #12]
    }
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000214 	.word	0x20000214

08003e68 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d812      	bhi.n	8003eb4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e01b      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <prvInsertTimerInActiveList+0x7c>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe f8b4 	bl	800201a <vListInsert>
 8003eb2:	e012      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d206      	bcs.n	8003eca <prvInsertTimerInActiveList+0x62>
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e007      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <prvInsertTimerInActiveList+0x80>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fe f8a0 	bl	800201a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003eda:	697b      	ldr	r3, [r7, #20]
    }
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000208 	.word	0x20000208
 8003ee8:	20000204 	.word	0x20000204

08003eec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	; 0x30
 8003ef0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ef2:	e0ae      	b.n	8004052 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f2c0 80aa 	blt.w	8004050 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe f8bd 	bl	800208c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff87 	bl	8003e28 <prvSampleTimeNow>
 8003f1a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b09      	cmp	r3, #9
 8003f20:	f200 8097 	bhi.w	8004052 <prvProcessReceivedCommands+0x166>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <prvProcessReceivedCommands+0x40>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f55 	.word	0x08003f55
 8003f38:	08003fc9 	.word	0x08003fc9
 8003f3c:	08003fdd 	.word	0x08003fdd
 8003f40:	08004027 	.word	0x08004027
 8003f44:	08003f55 	.word	0x08003f55
 8003f48:	08003f55 	.word	0x08003f55
 8003f4c:	08003fc9 	.word	0x08003fc9
 8003f50:	08003fdd 	.word	0x08003fdd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	18d1      	adds	r1, r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a3a      	ldr	r2, [r7, #32]
 8003f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f74:	f7ff ff78 	bl	8003e68 <prvInsertTimerInActiveList>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d069      	beq.n	8004052 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f84:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d05e      	beq.n	8004052 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	441a      	add	r2, r3
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa6:	f7ff fe21 	bl	8003bec <xTimerGenericCommand>
 8003faa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d14f      	bne.n	8004052 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61bb      	str	r3, [r7, #24]
    }
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003fda:	e03a      	b.n	8004052 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	617b      	str	r3, [r7, #20]
    }
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	18d1      	adds	r1, r2, r3
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	6a3a      	ldr	r2, [r7, #32]
 800401e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004020:	f7ff ff22 	bl	8003e68 <prvInsertTimerInActiveList>
                        break;
 8004024:	e015      	b.n	8004052 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d103      	bne.n	800403c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004036:	f000 fbe9 	bl	800480c <vPortFree>
 800403a:	e00a      	b.n	8004052 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	b2da      	uxtb	r2, r3
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800404e:	e000      	b.n	8004052 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004050:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <prvProcessReceivedCommands+0x188>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f107 0108 	add.w	r1, r7, #8
 800405a:	2200      	movs	r2, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe fad1 	bl	8002604 <xQueueReceive>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f af45 	bne.w	8003ef4 <prvProcessReceivedCommands+0x8>
        }
    }
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	3728      	adds	r7, #40	; 0x28
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	2000020c 	.word	0x2000020c

08004078 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800407e:	e048      	b.n	8004112 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004080:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <prvSwitchTimerLists+0xc0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <prvSwitchTimerLists+0xc0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3304      	adds	r3, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd fff7 	bl	800208c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02e      	beq.n	8004112 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d90e      	bls.n	80040e4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040d2:	4b19      	ldr	r3, [pc, #100]	; (8004138 <prvSwitchTimerLists+0xc0>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7fd ff9c 	bl	800201a <vListInsert>
 80040e2:	e016      	b.n	8004112 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040e4:	2300      	movs	r3, #0
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	2100      	movs	r1, #0
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff fd7c 	bl	8003bec <xTimerGenericCommand>
 80040f4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	603b      	str	r3, [r7, #0]
    }
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <prvSwitchTimerLists+0xc0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1b1      	bne.n	8004080 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <prvSwitchTimerLists+0xc0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <prvSwitchTimerLists+0xc4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a04      	ldr	r2, [pc, #16]	; (8004138 <prvSwitchTimerLists+0xc0>)
 8004128:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <prvSwitchTimerLists+0xc4>)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	6013      	str	r3, [r2, #0]
    }
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000204 	.word	0x20000204
 800413c:	20000208 	.word	0x20000208

08004140 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004144:	f000 f960 	bl	8004408 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <prvCheckForValidListAndQueue+0x54>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11d      	bne.n	800418c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004150:	4811      	ldr	r0, [pc, #68]	; (8004198 <prvCheckForValidListAndQueue+0x58>)
 8004152:	f7fd ff11 	bl	8001f78 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004156:	4811      	ldr	r0, [pc, #68]	; (800419c <prvCheckForValidListAndQueue+0x5c>)
 8004158:	f7fd ff0e 	bl	8001f78 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <prvCheckForValidListAndQueue+0x60>)
 800415e:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <prvCheckForValidListAndQueue+0x58>)
 8004160:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004162:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <prvCheckForValidListAndQueue+0x64>)
 8004164:	4a0d      	ldr	r2, [pc, #52]	; (800419c <prvCheckForValidListAndQueue+0x5c>)
 8004166:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004168:	2200      	movs	r2, #0
 800416a:	210c      	movs	r1, #12
 800416c:	200a      	movs	r0, #10
 800416e:	f7fe f81f 	bl	80021b0 <xQueueGenericCreate>
 8004172:	4603      	mov	r3, r0
 8004174:	4a07      	ldr	r2, [pc, #28]	; (8004194 <prvCheckForValidListAndQueue+0x54>)
 8004176:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <prvCheckForValidListAndQueue+0x54>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <prvCheckForValidListAndQueue+0x54>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4908      	ldr	r1, [pc, #32]	; (80041a8 <prvCheckForValidListAndQueue+0x68>)
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fc2c 	bl	80029e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800418c:	f000 f96c 	bl	8004468 <vPortExitCritical>
    }
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}
 8004194:	2000020c 	.word	0x2000020c
 8004198:	200001dc 	.word	0x200001dc
 800419c:	200001f0 	.word	0x200001f0
 80041a0:	20000204 	.word	0x20000204
 80041a4:	20000208 	.word	0x20000208
 80041a8:	08004b18 	.word	0x08004b18

080041ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3b04      	subs	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3b04      	subs	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b04      	subs	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041dc:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <pxPortInitialiseStack+0x64>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b14      	subs	r3, #20
 80041e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f06f 0202 	mvn.w	r2, #2
 80041fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3b20      	subs	r3, #32
 8004200:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	08004215 	.word	0x08004215

08004214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <prvTaskExitError+0x54>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004226:	d00a      	beq.n	800423e <prvTaskExitError+0x2a>
        __asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
    }
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <prvTaskExitError+0x28>
        __asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60bb      	str	r3, [r7, #8]
    }
 8004250:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004252:	bf00      	nop
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0fc      	beq.n	8004254 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	20000010 	.word	0x20000010
 800426c:	00000000 	.word	0x00000000

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004298:	4808      	ldr	r0, [pc, #32]	; (80042bc <prvPortStartFirstTask+0x24>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8814 	msr	CONTROL, r0
 80042aa:	b662      	cpsie	i
 80042ac:	b661      	cpsie	f
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	df00      	svc	0
 80042b8:	bf00      	nop
 80042ba:	0000      	.short	0x0000
 80042bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop

080042c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <xPortStartScheduler+0x120>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a46      	ldr	r2, [pc, #280]	; (80043e8 <xPortStartScheduler+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10a      	bne.n	80042ea <xPortStartScheduler+0x26>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	613b      	str	r3, [r7, #16]
    }
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ea:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <xPortStartScheduler+0x120>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a3f      	ldr	r2, [pc, #252]	; (80043ec <xPortStartScheduler+0x128>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10a      	bne.n	800430a <xPortStartScheduler+0x46>
        __asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60fb      	str	r3, [r7, #12]
    }
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800430a:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <xPortStartScheduler+0x12c>)
 800430c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <xPortStartScheduler+0x130>)
 8004330:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <xPortStartScheduler+0x134>)
 8004334:	2207      	movs	r2, #7
 8004336:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004338:	e009      	b.n	800434e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800433a:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <xPortStartScheduler+0x134>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3b01      	subs	r3, #1
 8004340:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <xPortStartScheduler+0x134>)
 8004342:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b80      	cmp	r3, #128	; 0x80
 8004358:	d0ef      	beq.n	800433a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800435a:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <xPortStartScheduler+0x134>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1c3 0307 	rsb	r3, r3, #7
 8004362:	2b04      	cmp	r3, #4
 8004364:	d00a      	beq.n	800437c <xPortStartScheduler+0xb8>
        __asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	60bb      	str	r3, [r7, #8]
    }
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800437c:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <xPortStartScheduler+0x134>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <xPortStartScheduler+0x134>)
 8004384:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <xPortStartScheduler+0x134>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800438e:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <xPortStartScheduler+0x134>)
 8004390:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <xPortStartScheduler+0x138>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a17      	ldr	r2, [pc, #92]	; (80043fc <xPortStartScheduler+0x138>)
 80043a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <xPortStartScheduler+0x138>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <xPortStartScheduler+0x138>)
 80043ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043b2:	f000 f8db 	bl	800456c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <xPortStartScheduler+0x13c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043bc:	f000 f8fa 	bl	80045b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <xPortStartScheduler+0x140>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0f      	ldr	r2, [pc, #60]	; (8004404 <xPortStartScheduler+0x140>)
 80043c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043cc:	f7ff ff64 	bl	8004298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043d0:	f7fe ff34 	bl	800323c <vTaskSwitchContext>
    prvTaskExitError();
 80043d4:	f7ff ff1e 	bl	8004214 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	e000ed00 	.word	0xe000ed00
 80043e8:	410fc271 	.word	0x410fc271
 80043ec:	410fc270 	.word	0x410fc270
 80043f0:	e000e400 	.word	0xe000e400
 80043f4:	20000218 	.word	0x20000218
 80043f8:	2000021c 	.word	0x2000021c
 80043fc:	e000ed20 	.word	0xe000ed20
 8004400:	20000010 	.word	0x20000010
 8004404:	e000ef34 	.word	0xe000ef34

08004408 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
        __asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	607b      	str	r3, [r7, #4]
    }
 8004420:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <vPortEnterCritical+0x58>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <vPortEnterCritical+0x58>)
 800442a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <vPortEnterCritical+0x58>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10f      	bne.n	8004454 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <vPortEnterCritical+0x5c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <vPortEnterCritical+0x4c>
        __asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	603b      	str	r3, [r7, #0]
    }
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <vPortEnterCritical+0x4a>
    }
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20000010 	.word	0x20000010
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <vPortExitCritical+0x50>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <vPortExitCritical+0x24>
        __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	607b      	str	r3, [r7, #4]
    }
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <vPortExitCritical+0x50>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3b01      	subs	r3, #1
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <vPortExitCritical+0x50>)
 8004494:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <vPortExitCritical+0x50>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <vPortExitCritical+0x42>
 800449e:	2300      	movs	r3, #0
 80044a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f383 8811 	msr	BASEPRI, r3
    }
 80044a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000010 	.word	0x20000010
 80044bc:	00000000 	.word	0x00000000

080044c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044c0:	f3ef 8009 	mrs	r0, PSP
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4b15      	ldr	r3, [pc, #84]	; (8004520 <pxCurrentTCBConst>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f01e 0f10 	tst.w	lr, #16
 80044d0:	bf08      	it	eq
 80044d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044e4:	f380 8811 	msr	BASEPRI, r0
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f7fe fea4 	bl	800323c <vTaskSwitchContext>
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	f380 8811 	msr	BASEPRI, r0
 80044fc:	bc09      	pop	{r0, r3}
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	6808      	ldr	r0, [r1, #0]
 8004502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004506:	f01e 0f10 	tst.w	lr, #16
 800450a:	bf08      	it	eq
 800450c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004510:	f380 8809 	msr	PSP, r0
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w

08004520 <pxCurrentTCBConst>:
 8004520:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
        __asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
    }
 8004540:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004542:	f7fe fdc3 	bl	80030cc <xTaskIncrementTick>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <SysTick_Handler+0x40>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f383 8811 	msr	BASEPRI, r3
    }
 800455e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <vPortSetupTimerInterrupt+0x38>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <vPortSetupTimerInterrupt+0x3c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <vPortSetupTimerInterrupt+0x40>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <vPortSetupTimerInterrupt+0x44>)
 800458a:	3b01      	subs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010
 80045a4:	e000e018 	.word	0xe000e018
 80045a8:	20000000 	.word	0x20000000
 80045ac:	10624dd3 	.word	0x10624dd3
 80045b0:	e000e014 	.word	0xe000e014

080045b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045c4 <vPortEnableVFP+0x10>
 80045b8:	6801      	ldr	r1, [r0, #0]
 80045ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045be:	6001      	str	r1, [r0, #0]
 80045c0:	4770      	bx	lr
 80045c2:	0000      	.short	0x0000
 80045c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop

080045cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045d2:	f3ef 8305 	mrs	r3, IPSR
 80045d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d914      	bls.n	8004608 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045de:	4a17      	ldr	r2, [pc, #92]	; (800463c <vPortValidateInterruptPriority+0x70>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <vPortValidateInterruptPriority+0x74>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	7afa      	ldrb	r2, [r7, #11]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20a      	bcs.n	8004608 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
    }
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <vPortValidateInterruptPriority+0x78>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <vPortValidateInterruptPriority+0x7c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d90a      	bls.n	800462e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	603b      	str	r3, [r7, #0]
    }
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <vPortValidateInterruptPriority+0x60>
    }
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000e3f0 	.word	0xe000e3f0
 8004640:	20000218 	.word	0x20000218
 8004644:	e000ed0c 	.word	0xe000ed0c
 8004648:	2000021c 	.word	0x2000021c

0800464c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004658:	f7fe fc7e 	bl	8002f58 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800465c:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <pvPortMalloc+0x1a8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004664:	f000 f934 	bl	80048d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004668:	4b63      	ldr	r3, [pc, #396]	; (80047f8 <pvPortMalloc+0x1ac>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 80a7 	bne.w	80047c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02d      	beq.n	80046d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800467c:	2208      	movs	r2, #8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d227      	bcs.n	80046d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004688:	2208      	movs	r2, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b00      	cmp	r3, #0
 8004698:	d021      	beq.n	80046de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f023 0307 	bic.w	r3, r3, #7
 80046a0:	3308      	adds	r3, #8
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d214      	bcs.n	80046d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	3308      	adds	r3, #8
 80046b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <pvPortMalloc+0x92>
        __asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	617b      	str	r3, [r7, #20]
    }
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d6:	e002      	b.n	80046de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	e000      	b.n	80046e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d06e      	beq.n	80047c4 <pvPortMalloc+0x178>
 80046e6:	4b45      	ldr	r3, [pc, #276]	; (80047fc <pvPortMalloc+0x1b0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d869      	bhi.n	80047c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046f0:	4b43      	ldr	r3, [pc, #268]	; (8004800 <pvPortMalloc+0x1b4>)
 80046f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046f4:	4b42      	ldr	r3, [pc, #264]	; (8004800 <pvPortMalloc+0x1b4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046fa:	e004      	b.n	8004706 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d903      	bls.n	8004718 <pvPortMalloc+0xcc>
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f1      	bne.n	80046fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <pvPortMalloc+0x1a8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	429a      	cmp	r2, r3
 8004720:	d050      	beq.n	80047c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2208      	movs	r2, #8
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	2308      	movs	r3, #8
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	429a      	cmp	r2, r3
 8004742:	d91f      	bls.n	8004784 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <pvPortMalloc+0x120>
        __asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	613b      	str	r3, [r7, #16]
    }
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800477e:	69b8      	ldr	r0, [r7, #24]
 8004780:	f000 f908 	bl	8004994 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <pvPortMalloc+0x1b0>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <pvPortMalloc+0x1b0>)
 8004790:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <pvPortMalloc+0x1b0>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <pvPortMalloc+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d203      	bcs.n	80047a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800479e:	4b17      	ldr	r3, [pc, #92]	; (80047fc <pvPortMalloc+0x1b0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a18      	ldr	r2, [pc, #96]	; (8004804 <pvPortMalloc+0x1b8>)
 80047a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <pvPortMalloc+0x1ac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <pvPortMalloc+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3301      	adds	r3, #1
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <pvPortMalloc+0x1bc>)
 80047c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047c4:	f7fe fbd6 	bl	8002f74 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <pvPortMalloc+0x19c>
        __asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60fb      	str	r3, [r7, #12]
    }
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80047e8:	69fb      	ldr	r3, [r7, #28]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3728      	adds	r7, #40	; 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20012e28 	.word	0x20012e28
 80047f8:	20012e3c 	.word	0x20012e3c
 80047fc:	20012e2c 	.word	0x20012e2c
 8004800:	20012e20 	.word	0x20012e20
 8004804:	20012e30 	.word	0x20012e30
 8004808:	20012e34 	.word	0x20012e34

0800480c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04d      	beq.n	80048ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800481e:	2308      	movs	r3, #8
 8004820:	425b      	negs	r3, r3
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4413      	add	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <vPortFree+0xb8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <vPortFree+0x44>
        __asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	60fb      	str	r3, [r7, #12]
    }
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <vPortFree+0x62>
        __asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60bb      	str	r3, [r7, #8]
    }
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <vPortFree+0xb8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01e      	beq.n	80048ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d11a      	bne.n	80048ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <vPortFree+0xb8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	43db      	mvns	r3, r3
 800488e:	401a      	ands	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004894:	f7fe fb60 	bl	8002f58 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <vPortFree+0xbc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4413      	add	r3, r2
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <vPortFree+0xbc>)
 80048a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048a6:	6938      	ldr	r0, [r7, #16]
 80048a8:	f000 f874 	bl	8004994 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <vPortFree+0xc0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a06      	ldr	r2, [pc, #24]	; (80048cc <vPortFree+0xc0>)
 80048b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048b6:	f7fe fb5d 	bl	8002f74 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20012e3c 	.word	0x20012e3c
 80048c8:	20012e2c 	.word	0x20012e2c
 80048cc:	20012e38 	.word	0x20012e38

080048d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80048da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <prvHeapInit+0xac>)
 80048de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00c      	beq.n	8004904 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3307      	adds	r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	4a1f      	ldr	r2, [pc, #124]	; (800497c <prvHeapInit+0xac>)
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004908:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <prvHeapInit+0xb0>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <prvHeapInit+0xb0>)
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4413      	add	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800491c:	2208      	movs	r2, #8
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <prvHeapInit+0xb4>)
 8004930:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <prvHeapInit+0xb4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <prvHeapInit+0xb4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <prvHeapInit+0xb4>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <prvHeapInit+0xb8>)
 800495e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a09      	ldr	r2, [pc, #36]	; (800498c <prvHeapInit+0xbc>)
 8004966:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <prvHeapInit+0xc0>)
 800496a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000220 	.word	0x20000220
 8004980:	20012e20 	.word	0x20012e20
 8004984:	20012e28 	.word	0x20012e28
 8004988:	20012e30 	.word	0x20012e30
 800498c:	20012e2c 	.word	0x20012e2c
 8004990:	20012e3c 	.word	0x20012e3c

08004994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <prvInsertBlockIntoFreeList+0xac>)
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e002      	b.n	80049a8 <prvInsertBlockIntoFreeList+0x14>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d8f7      	bhi.n	80049a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d108      	bne.n	80049d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d118      	bne.n	8004a1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <prvInsertBlockIntoFreeList+0xb0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d00d      	beq.n	8004a12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e008      	b.n	8004a24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <prvInsertBlockIntoFreeList+0xb0>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e003      	b.n	8004a24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d002      	beq.n	8004a32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20012e20 	.word	0x20012e20
 8004a44:	20012e28 	.word	0x20012e28

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4d0d      	ldr	r5, [pc, #52]	; (8004a80 <__libc_init_array+0x38>)
 8004a4c:	4c0d      	ldr	r4, [pc, #52]	; (8004a84 <__libc_init_array+0x3c>)
 8004a4e:	1b64      	subs	r4, r4, r5
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	2600      	movs	r6, #0
 8004a54:	42a6      	cmp	r6, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	4d0b      	ldr	r5, [pc, #44]	; (8004a88 <__libc_init_array+0x40>)
 8004a5a:	4c0c      	ldr	r4, [pc, #48]	; (8004a8c <__libc_init_array+0x44>)
 8004a5c:	f000 f82e 	bl	8004abc <_init>
 8004a60:	1b64      	subs	r4, r4, r5
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	2600      	movs	r6, #0
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a70:	4798      	blx	r3
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7a:	4798      	blx	r3
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08004b40 	.word	0x08004b40
 8004a84:	08004b40 	.word	0x08004b40
 8004a88:	08004b40 	.word	0x08004b40
 8004a8c:	08004b44 	.word	0x08004b44

08004a90 <memcpy>:
 8004a90:	440a      	add	r2, r1
 8004a92:	4291      	cmp	r1, r2
 8004a94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a98:	d100      	bne.n	8004a9c <memcpy+0xc>
 8004a9a:	4770      	bx	lr
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aa6:	4291      	cmp	r1, r2
 8004aa8:	d1f9      	bne.n	8004a9e <memcpy+0xe>
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <memset>:
 8004aac:	4402      	add	r2, r0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <memset+0xa>
 8004ab4:	4770      	bx	lr
 8004ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aba:	e7f9      	b.n	8004ab0 <memset+0x4>

08004abc <_init>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr

08004ac8 <_fini>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr
