
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007734  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a50  08007a50  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a58  08007a58  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a4  20000080  08007ae0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014524  08007ae0  00024524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148c9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309b  00000000  00000000  00034979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00038d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019126  00000000  00000000  00039f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001514e  00000000  00000000  00053036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a87f  00000000  00000000  00068184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102a03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005438  00000000  00000000  00102a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078bc 	.word	0x080078bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080078bc 	.word	0x080078bc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f3c 	.word	0x20012f3c
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fa4b 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f853 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8b9 	bl	80007a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL|=(1<<0);
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <main+0x94>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <main+0x94>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000642:	481e      	ldr	r0, [pc, #120]	; (80006bc <main+0x98>)
 8000644:	f004 fa24 	bl	8004a90 <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 8000648:	f004 f84c 	bl	80046e4 <SEGGER_SYSVIEW_Conf>

//  SEGGER_SYSVIEW_Start();


  status=xTaskCreate(task1, "task1", 100, "task=1", 2, &taskHandle1);
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2302      	movs	r3, #2
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <main+0x9c>)
 8000658:	2264      	movs	r2, #100	; 0x64
 800065a:	491a      	ldr	r1, [pc, #104]	; (80006c4 <main+0xa0>)
 800065c:	481a      	ldr	r0, [pc, #104]	; (80006c8 <main+0xa4>)
 800065e:	f002 f9c9 	bl	80029f4 <xTaskCreate>
 8000662:	6178      	str	r0, [r7, #20]
  configASSERT(status==pdPASS);
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d00a      	beq.n	8000680 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066e:	f383 8811 	msr	BASEPRI, r3
 8000672:	f3bf 8f6f 	isb	sy
 8000676:	f3bf 8f4f 	dsb	sy
 800067a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800067c:	bf00      	nop
 800067e:	e7fe      	b.n	800067e <main+0x5a>
  status=xTaskCreate(task2, "task2", 100, "task=2", 2, &taskHandle2);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	2302      	movs	r3, #2
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <main+0xa8>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	4910      	ldr	r1, [pc, #64]	; (80006d0 <main+0xac>)
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <main+0xb0>)
 8000690:	f002 f9b0 	bl	80029f4 <xTaskCreate>
 8000694:	6178      	str	r0, [r7, #20]
  configASSERT(status==pdPASS);
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d00a      	beq.n	80006b2 <main+0x8e>
        __asm volatile
 800069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a0:	f383 8811 	msr	BASEPRI, r3
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	f3bf 8f4f 	dsb	sy
 80006ac:	60fb      	str	r3, [r7, #12]
    }
 80006ae:	bf00      	nop
 80006b0:	e7fe      	b.n	80006b0 <main+0x8c>
  vTaskStartScheduler();
 80006b2:	f002 faf5 	bl	8002ca0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x92>
 80006b8:	e0001000 	.word	0xe0001000
 80006bc:	0007a120 	.word	0x0007a120
 80006c0:	080078d4 	.word	0x080078d4
 80006c4:	080078dc 	.word	0x080078dc
 80006c8:	08000831 	.word	0x08000831
 80006cc:	080078e4 	.word	0x080078e4
 80006d0:	080078ec 	.word	0x080078ec
 80006d4:	0800086d 	.word	0x0800086d

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fc72 	bl	8006fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <SystemClock_Config+0xc8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <SystemClock_Config+0xcc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800074c:	2354      	movs	r3, #84	; 0x54
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fc73 	bl	8001048 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f8b0 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fed5 	bl	8001538 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000794:	f000 f89a 	bl	80008cc <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_GPIO_Init+0x80>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_GPIO_Init+0x80>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_GPIO_Init+0x80>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_GPIO_Init+0x80>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <MX_GPIO_Init+0x80>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_GPIO_Init+0x80>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <MX_GPIO_Init+0x84>)
 80007fe:	f000 fc09 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000802:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x84>)
 800081c:	f000 fa76 	bl	8000d0c <HAL_GPIO_Init>

}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020c00 	.word	0x40020c00

08000830 <task1>:

/* USER CODE BEGIN 4 */
static void task1(void* param)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n",(char*)param);
		//snprintf(msg,10,"%s\n",(char*)param);
		sprintf(msg,"%s\n",(char*)param);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <task1+0x34>)
 8000840:	4618      	mov	r0, r3
 8000842:	f006 fbcd 	bl	8006fe0 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f006 fae0 	bl	8006e10 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <task1+0x38>)
 8000852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	f3bf 8f4f 	dsb	sy
 800085c:	f3bf 8f6f 	isb	sy
		sprintf(msg,"%s\n",(char*)param);
 8000860:	e7ea      	b.n	8000838 <task1+0x8>
 8000862:	bf00      	nop
 8000864:	080078f4 	.word	0x080078f4
 8000868:	e000ed04 	.word	0xe000ed04

0800086c <task2>:
	}
}
static void task2(void* param)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b09c      	sub	sp, #112	; 0x70
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
	//	printf("%s\n",(char*)param);
		//snprintf(msg,10,"%s\n",(char*)param);
		sprintf(msg,"%s\n",(char*)param);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4909      	ldr	r1, [pc, #36]	; (80008a0 <task2+0x34>)
 800087c:	4618      	mov	r0, r3
 800087e:	f006 fbaf 	bl	8006fe0 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4618      	mov	r0, r3
 8000888:	f006 fac2 	bl	8006e10 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <task2+0x38>)
 800088e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	f3bf 8f4f 	dsb	sy
 8000898:	f3bf 8f6f 	isb	sy
		sprintf(msg,"%s\n",(char*)param);
 800089c:	e7ea      	b.n	8000874 <task2+0x8>
 800089e:	bf00      	nop
 80008a0:	080078f4 	.word	0x080078f4
 80008a4:	e000ed04 	.word	0xe000ed04

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ba:	f000 f925 	bl	8000b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40014000 	.word	0x40014000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000916:	f003 fb2f 	bl	8003f78 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <HAL_InitTick+0xd0>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000940:	4a2d      	ldr	r2, [pc, #180]	; (80009f8 <HAL_InitTick+0xd0>)
 8000942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000946:	6453      	str	r3, [r2, #68]	; 0x44
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <HAL_InitTick+0xd0>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 020c 	add.w	r2, r7, #12
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f000 ffb6 	bl	80018d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000964:	f000 ffa0 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 8000968:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096c:	4a23      	ldr	r2, [pc, #140]	; (80009fc <HAL_InitTick+0xd4>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	0c9b      	lsrs	r3, r3, #18
 8000974:	3b01      	subs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <HAL_InitTick+0xd8>)
 800097a:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <HAL_InitTick+0xdc>)
 800097c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <HAL_InitTick+0xd8>)
 8000980:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000984:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000986:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <HAL_InitTick+0xd8>)
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_InitTick+0xd8>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_InitTick+0xd8>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_InitTick+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800099e:	4818      	ldr	r0, [pc, #96]	; (8000a00 <HAL_InitTick+0xd8>)
 80009a0:	f000 ffc8 	bl	8001934 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d11b      	bne.n	80009ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <HAL_InitTick+0xd8>)
 80009b4:	f001 f818 	bl	80019e8 <HAL_TIM_Base_Start_IT>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d111      	bne.n	80009ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80009c6:	2018      	movs	r0, #24
 80009c8:	f000 f992 	bl	8000cf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d808      	bhi.n	80009e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80009d2:	2200      	movs	r2, #0
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	2018      	movs	r0, #24
 80009d8:	f000 f96e 	bl	8000cb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_InitTick+0xe0>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e002      	b.n	80009ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	2000009c 	.word	0x2000009c
 8000a04:	40014000 	.word	0x40014000
 8000a08:	20000004 	.word	0x20000004

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000a3e:	f001 f835 	bl	8001aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000009c 	.word	0x2000009c

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f006 fa55 	bl	8006f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fdbf 	bl	8000624 <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ab4:	08007a60 	.word	0x08007a60
  ldr r2, =_sbss
 8000ab8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000abc:	20014524 	.word	0x20014524

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f8d8 	bl	8000ca2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f7ff ff18 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff feee 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	200000e4 	.word	0x200000e4

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200000e4 	.word	0x200000e4

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ff4c 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cca:	f7ff ff61 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000cce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6978      	ldr	r0, [r7, #20]
 8000cd6:	f7ff ffb1 	bl	8000c3c <NVIC_EncodePriority>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff80 	bl	8000be8 <__NVIC_SetPriority>
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff54 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	e159      	b.n	8000fdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f040 8148 	bne.w	8000fd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d005      	beq.n	8000d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d130      	bne.n	8000dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	f003 0201 	and.w	r2, r3, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d017      	beq.n	8000dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d123      	bne.n	8000e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0203 	and.w	r2, r3, #3
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 80a2 	beq.w	8000fd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a56      	ldr	r2, [pc, #344]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eae:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a49      	ldr	r2, [pc, #292]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x202>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a48      	ldr	r2, [pc, #288]	; (8001000 <HAL_GPIO_Init+0x2f4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x1fe>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a47      	ldr	r2, [pc, #284]	; (8001004 <HAL_GPIO_Init+0x2f8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <HAL_GPIO_Init+0x2fc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x1f6>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <HAL_GPIO_Init+0x300>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x1f2>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a24      	ldr	r2, [pc, #144]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa6:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f67f aea2 	bls.w	8000d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001030:	e003      	b.n	800103a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	619a      	str	r2, [r3, #24]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e267      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d075      	beq.n	8001152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001066:	4b88      	ldr	r3, [pc, #544]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b04      	cmp	r3, #4
 8001070:	d00c      	beq.n	800108c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001072:	4b85      	ldr	r3, [pc, #532]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107a:	2b08      	cmp	r3, #8
 800107c:	d112      	bne.n	80010a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107e:	4b82      	ldr	r3, [pc, #520]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800108a:	d10b      	bne.n	80010a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	4b7e      	ldr	r3, [pc, #504]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d05b      	beq.n	8001150 <HAL_RCC_OscConfig+0x108>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d157      	bne.n	8001150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e242      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d106      	bne.n	80010bc <HAL_RCC_OscConfig+0x74>
 80010ae:	4b76      	ldr	r3, [pc, #472]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a75      	ldr	r2, [pc, #468]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e01d      	b.n	80010f8 <HAL_RCC_OscConfig+0xb0>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x98>
 80010c6:	4b70      	ldr	r3, [pc, #448]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a6f      	ldr	r2, [pc, #444]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b6d      	ldr	r3, [pc, #436]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a6c      	ldr	r2, [pc, #432]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0xb0>
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a68      	ldr	r2, [pc, #416]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b66      	ldr	r3, [pc, #408]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a65      	ldr	r2, [pc, #404]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fd16 	bl	8000b30 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fd12 	bl	8000b30 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e207      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0xc0>
 8001126:	e014      	b.n	8001152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fd02 	bl	8000b30 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fcfe 	bl	8000b30 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1f3      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	4b51      	ldr	r3, [pc, #324]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0xe8>
 800114e:	e000      	b.n	8001152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d063      	beq.n	8001226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001172:	2b08      	cmp	r3, #8
 8001174:	d11c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001176:	4b44      	ldr	r3, [pc, #272]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d116      	bne.n	80011b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <HAL_RCC_OscConfig+0x152>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e1c7      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4937      	ldr	r1, [pc, #220]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	e03a      	b.n	8001226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d020      	beq.n	80011fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <HAL_RCC_OscConfig+0x244>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011be:	f7ff fcb7 	bl	8000b30 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fcb3 	bl	8000b30 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e1a8      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4925      	ldr	r1, [pc, #148]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
 80011f8:	e015      	b.n	8001226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x244>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fc96 	bl	8000b30 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001208:	f7ff fc92 	bl	8000b30 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e187      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d036      	beq.n	80012a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d016      	beq.n	8001268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_RCC_OscConfig+0x248>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001240:	f7ff fc76 	bl	8000b30 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001248:	f7ff fc72 	bl	8000b30 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e167      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_RCC_OscConfig+0x240>)
 800125c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0x200>
 8001266:	e01b      	b.n	80012a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_RCC_OscConfig+0x248>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fc5f 	bl	8000b30 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	e00e      	b.n	8001294 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001276:	f7ff fc5b 	bl	8000b30 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d907      	bls.n	8001294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e150      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
 8001288:	40023800 	.word	0x40023800
 800128c:	42470000 	.word	0x42470000
 8001290:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ea      	bne.n	8001276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8097 	beq.w	80013dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b2:	4b81      	ldr	r3, [pc, #516]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10f      	bne.n	80012de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b7d      	ldr	r3, [pc, #500]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a7c      	ldr	r2, [pc, #496]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b77      	ldr	r3, [pc, #476]	; (80014bc <HAL_RCC_OscConfig+0x474>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d118      	bne.n	800131c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ea:	4b74      	ldr	r3, [pc, #464]	; (80014bc <HAL_RCC_OscConfig+0x474>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a73      	ldr	r2, [pc, #460]	; (80014bc <HAL_RCC_OscConfig+0x474>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fc1b 	bl	8000b30 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fe:	f7ff fc17 	bl	8000b30 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e10c      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x474>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x2ea>
 8001324:	4b64      	ldr	r3, [pc, #400]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a63      	ldr	r2, [pc, #396]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	e01c      	b.n	800136c <HAL_RCC_OscConfig+0x324>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b05      	cmp	r3, #5
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x30c>
 800133a:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 800133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133e:	4a5e      	ldr	r2, [pc, #376]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6713      	str	r3, [r2, #112]	; 0x70
 8001346:	4b5c      	ldr	r3, [pc, #368]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0x324>
 8001354:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	4a57      	ldr	r2, [pc, #348]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	6713      	str	r3, [r2, #112]	; 0x70
 8001360:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d015      	beq.n	80013a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff fbdc 	bl	8000b30 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137a:	e00a      	b.n	8001392 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff fbd8 	bl	8000b30 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	; 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e0cb      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0ee      	beq.n	800137c <HAL_RCC_OscConfig+0x334>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fbc6 	bl	8000b30 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a6:	e00a      	b.n	80013be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a8:	f7ff fbc2 	bl	8000b30 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e0b5      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ee      	bne.n	80013a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d0:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a38      	ldr	r2, [pc, #224]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a1 	beq.w	8001528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d05c      	beq.n	80014ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d141      	bne.n	800147e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <HAL_RCC_OscConfig+0x478>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb96 	bl	8000b30 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fb92 	bl	8000b30 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e087      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	019b      	lsls	r3, r3, #6
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	3b01      	subs	r3, #1
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	491b      	ldr	r1, [pc, #108]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x478>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fb6b 	bl	8000b30 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff fb67 	bl	8000b30 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e05c      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x416>
 800147c:	e054      	b.n	8001528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_RCC_OscConfig+0x478>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb54 	bl	8000b30 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fb50 	bl	8000b30 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e045      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_RCC_OscConfig+0x470>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x444>
 80014aa:	e03d      	b.n	8001528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d107      	bne.n	80014c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e038      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000
 80014c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x4ec>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d028      	beq.n	8001524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d121      	bne.n	8001524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d11a      	bne.n	8001524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014f4:	4013      	ands	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d111      	bne.n	8001524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	3b01      	subs	r3, #1
 800150e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0cc      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d90c      	bls.n	8001574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0b8      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d020      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	494d      	ldr	r1, [pc, #308]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d044      	beq.n	8001658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d119      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e07f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d003      	beq.n	80015f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e06f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e067      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 0203 	bic.w	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4934      	ldr	r1, [pc, #208]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001628:	f7ff fa82 	bl	8000b30 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	e00a      	b.n	8001646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff fa7e 	bl	8000b30 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e04f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 020c 	and.w	r2, r3, #12
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	429a      	cmp	r2, r3
 8001656:	d1eb      	bne.n	8001630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d20c      	bcs.n	8001680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e032      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4916      	ldr	r1, [pc, #88]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016be:	f000 f821 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	490a      	ldr	r1, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	5ccb      	ldrb	r3, [r1, r3]
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f922 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00
 80016f4:	40023800 	.word	0x40023800
 80016f8:	080079dc 	.word	0x080079dc
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001708:	b090      	sub	sp, #64	; 0x40
 800170a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
 8001710:	2300      	movs	r3, #0
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_GetSysClockFreq+0x180>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d00d      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x40>
 8001728:	2b08      	cmp	r3, #8
 800172a:	f200 80a1 	bhi.w	8001870 <HAL_RCC_GetSysClockFreq+0x16c>
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x34>
 8001732:	2b04      	cmp	r3, #4
 8001734:	d003      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0x3a>
 8001736:	e09b      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_GetSysClockFreq+0x184>)
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800173c:	e09b      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800173e:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_GetSysClockFreq+0x188>)
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001742:	e098      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001744:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <HAL_RCC_GetSysClockFreq+0x180>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174e:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_RCC_GetSysClockFreq+0x180>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d028      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175a:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_RCC_GetSysClockFreq+0x180>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	2200      	movs	r2, #0
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	627a      	str	r2, [r7, #36]	; 0x24
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800176c:	2100      	movs	r1, #0
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_RCC_GetSysClockFreq+0x188>)
 8001770:	fb03 f201 	mul.w	r2, r3, r1
 8001774:	2300      	movs	r3, #0
 8001776:	fb00 f303 	mul.w	r3, r0, r3
 800177a:	4413      	add	r3, r2
 800177c:	4a43      	ldr	r2, [pc, #268]	; (800188c <HAL_RCC_GetSysClockFreq+0x188>)
 800177e:	fba0 1202 	umull	r1, r2, r0, r2
 8001782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001784:	460a      	mov	r2, r1
 8001786:	62ba      	str	r2, [r7, #40]	; 0x28
 8001788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178a:	4413      	add	r3, r2
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	2200      	movs	r2, #0
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	61fa      	str	r2, [r7, #28]
 8001796:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800179a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800179e:	f7fe fdbf 	bl	8000320 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4613      	mov	r3, r2
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017aa:	e053      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	2200      	movs	r2, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	617a      	str	r2, [r7, #20]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017be:	f04f 0b00 	mov.w	fp, #0
 80017c2:	4652      	mov	r2, sl
 80017c4:	465b      	mov	r3, fp
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	0159      	lsls	r1, r3, #5
 80017d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d4:	0150      	lsls	r0, r2, #5
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	ebb2 080a 	subs.w	r8, r2, sl
 80017de:	eb63 090b 	sbc.w	r9, r3, fp
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017f6:	ebb2 0408 	subs.w	r4, r2, r8
 80017fa:	eb63 0509 	sbc.w	r5, r3, r9
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	00eb      	lsls	r3, r5, #3
 8001808:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800180c:	00e2      	lsls	r2, r4, #3
 800180e:	4614      	mov	r4, r2
 8001810:	461d      	mov	r5, r3
 8001812:	eb14 030a 	adds.w	r3, r4, sl
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	eb45 030b 	adc.w	r3, r5, fp
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800182a:	4629      	mov	r1, r5
 800182c:	028b      	lsls	r3, r1, #10
 800182e:	4621      	mov	r1, r4
 8001830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001834:	4621      	mov	r1, r4
 8001836:	028a      	lsls	r2, r1, #10
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	2200      	movs	r2, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	60fa      	str	r2, [r7, #12]
 8001844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001848:	f7fe fd6a 	bl	8000320 <__aeabi_uldivmod>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4613      	mov	r3, r2
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	3301      	adds	r3, #1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800186e:	e002      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetSysClockFreq+0x184>)
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001878:	4618      	mov	r0, r3
 800187a:	3740      	adds	r7, #64	; 0x40
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	00f42400 	.word	0x00f42400
 800188c:	017d7840 	.word	0x017d7840

08001890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000000 	.word	0x20000000

080018a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018ac:	f7ff fff0 	bl	8001890 <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	0b5b      	lsrs	r3, r3, #13
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4903      	ldr	r1, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	080079ec 	.word	0x080079ec

080018d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	220f      	movs	r2, #15
 80018de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_GetClockConfig+0x5c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_RCC_GetClockConfig+0x60>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0207 	and.w	r2, r3, #7
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e041      	b.n	80019ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f839 	bl	80019d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3304      	adds	r3, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f000 f9ca 	bl	8001d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d001      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e044      	b.n	8001a8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d018      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x6c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2a:	d013      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x6c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_TIM_Base_Start_IT+0xb4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00e      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x6c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d009      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x6c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d004      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x6c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d010      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a76:	e007      	b.n	8001a88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40000800 	.word	0x40000800
 8001aa4:	40000c00 	.word	0x40000c00
 8001aa8:	40014000 	.word	0x40014000

08001aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d122      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d11b      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0202 	mvn.w	r2, #2
 8001ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8ee 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001af4:	e005      	b.n	8001b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8e0 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f8f1 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d122      	bne.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d11b      	bne.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0204 	mvn.w	r2, #4
 8001b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8c4 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001b48:	e005      	b.n	8001b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8b6 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8c7 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d122      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d11b      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0208 	mvn.w	r2, #8
 8001b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2204      	movs	r2, #4
 8001b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f89a 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f88c 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f89d 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0210 	mvn.w	r2, #16
 8001bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f870 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f862 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f873 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0201 	mvn.w	r2, #1
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fe3c 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	2b80      	cmp	r3, #128	; 0x80
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8e2 	bl	8001e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d10e      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c74:	2b40      	cmp	r3, #64	; 0x40
 8001c76:	d107      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f838 	bl	8001cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d107      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0220 	mvn.w	r2, #32
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8ac 	bl	8001e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a34      	ldr	r2, [pc, #208]	; (8001df0 <TIM_Base_SetConfig+0xe4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00f      	beq.n	8001d44 <TIM_Base_SetConfig+0x38>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2a:	d00b      	beq.n	8001d44 <TIM_Base_SetConfig+0x38>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <TIM_Base_SetConfig+0xe8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <TIM_Base_SetConfig+0x38>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <TIM_Base_SetConfig+0xec>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d003      	beq.n	8001d44 <TIM_Base_SetConfig+0x38>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <TIM_Base_SetConfig+0xf0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d108      	bne.n	8001d56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <TIM_Base_SetConfig+0xe4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01b      	beq.n	8001d96 <TIM_Base_SetConfig+0x8a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d017      	beq.n	8001d96 <TIM_Base_SetConfig+0x8a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <TIM_Base_SetConfig+0xe8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <TIM_Base_SetConfig+0x8a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <TIM_Base_SetConfig+0xec>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00f      	beq.n	8001d96 <TIM_Base_SetConfig+0x8a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <TIM_Base_SetConfig+0xf0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00b      	beq.n	8001d96 <TIM_Base_SetConfig+0x8a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <TIM_Base_SetConfig+0xf4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <TIM_Base_SetConfig+0x8a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <TIM_Base_SetConfig+0xf8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d003      	beq.n	8001d96 <TIM_Base_SetConfig+0x8a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <TIM_Base_SetConfig+0xfc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d108      	bne.n	8001da8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <TIM_Base_SetConfig+0xe4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d103      	bne.n	8001ddc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	615a      	str	r2, [r3, #20]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40014000 	.word	0x40014000
 8001e04:	40014400 	.word	0x40014400
 8001e08:	40014800 	.word	0x40014800

08001e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f103 0208 	add.w	r2, r3, #8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e4c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f103 0208 	add.w	r2, r3, #8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f103 0208 	add.w	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eec:	d103      	bne.n	8001ef6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e00c      	b.n	8001f10 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3308      	adds	r3, #8
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e002      	b.n	8001f04 <vListInsert+0x2e>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d2f6      	bcs.n	8001efe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6852      	ldr	r2, [r2, #4]
 8001f68:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d103      	bne.n	8001f7c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <xQueueGenericReset+0x2a>
        __asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	60bb      	str	r3, [r7, #8]
    }
 8001fc2:	bf00      	nop
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001fc6:	f002 f855 	bl	8004074 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	441a      	add	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	441a      	add	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	22ff      	movs	r2, #255	; 0xff
 800200a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00f      	beq.n	8002044 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3310      	adds	r3, #16
 8002028:	4618      	mov	r0, r3
 800202a:	f001 f8b3 	bl	8003194 <xTaskRemoveFromEventList>
 800202e:	e009      	b.n	8002044 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3310      	adds	r3, #16
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fefd 	bl	8001e34 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3324      	adds	r3, #36	; 0x24
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fef8 	bl	8001e34 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002044:	f002 f846 	bl	80040d4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002048:	2301      	movs	r3, #1
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002052:	b580      	push	{r7, lr}
 8002054:	b08c      	sub	sp, #48	; 0x30
 8002056:	af02      	add	r7, sp, #8
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	4613      	mov	r3, r2
 800205e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <xQueueGenericCreate+0x2a>
        __asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	61bb      	str	r3, [r7, #24]
    }
 8002078:	bf00      	nop
 800207a:	e7fe      	b.n	800207a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <xQueueGenericCreate+0x48>
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	429a      	cmp	r2, r3
 8002098:	d101      	bne.n	800209e <xQueueGenericCreate+0x4c>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <xQueueGenericCreate+0x4e>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <xQueueGenericCreate+0x68>
        __asm volatile
 80020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	617b      	str	r3, [r7, #20]
    }
 80020b6:	bf00      	nop
 80020b8:	e7fe      	b.n	80020b8 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80020c0:	d90a      	bls.n	80020d8 <xQueueGenericCreate+0x86>
        __asm volatile
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	613b      	str	r3, [r7, #16]
    }
 80020d4:	bf00      	nop
 80020d6:	e7fe      	b.n	80020d6 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3350      	adds	r3, #80	; 0x50
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 f8f5 	bl	80042cc <pvPortMalloc>
 80020e2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3350      	adds	r3, #80	; 0x50
 80020f2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f805 	bl	8002110 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002106:	6a3b      	ldr	r3, [r7, #32]
    }
 8002108:	4618      	mov	r0, r3
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e002      	b.n	8002132 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800213e:	2101      	movs	r1, #1
 8002140:	69b8      	ldr	r0, [r7, #24]
 8002142:	f7ff ff2b 	bl	8001f9c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	2073      	movs	r0, #115	; 0x73
 8002156:	f003 ffe1 	bl	800611c <SEGGER_SYSVIEW_RecordU32x3>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b090      	sub	sp, #64	; 0x40
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002172:	2300      	movs	r3, #0
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <xQueueGenericSend+0x32>
        __asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002192:	bf00      	nop
 8002194:	e7fe      	b.n	8002194 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d103      	bne.n	80021a4 <xQueueGenericSend+0x40>
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <xQueueGenericSend+0x44>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <xQueueGenericSend+0x46>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10a      	bne.n	80021c4 <xQueueGenericSend+0x60>
        __asm volatile
 80021ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80021c0:	bf00      	nop
 80021c2:	e7fe      	b.n	80021c2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d103      	bne.n	80021d2 <xQueueGenericSend+0x6e>
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <xQueueGenericSend+0x72>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <xQueueGenericSend+0x74>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <xQueueGenericSend+0x8e>
        __asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	623b      	str	r3, [r7, #32]
    }
 80021ee:	bf00      	nop
 80021f0:	e7fe      	b.n	80021f0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021f2:	f001 f969 	bl	80034c8 <xTaskGetSchedulerState>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <xQueueGenericSend+0x9e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <xQueueGenericSend+0xa2>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <xQueueGenericSend+0xa4>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <xQueueGenericSend+0xbe>
        __asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	61fb      	str	r3, [r7, #28]
    }
 800221e:	bf00      	nop
 8002220:	e7fe      	b.n	8002220 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002222:	f001 ff27 	bl	8004074 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <xQueueGenericSend+0xd4>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11f      	bne.n	8002278 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fcfc 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	460b      	mov	r3, r1
 800224a:	4601      	mov	r1, r0
 800224c:	205a      	movs	r0, #90	; 0x5a
 800224e:	f003 ffdb 	bl	8006208 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002258:	f000 fa56 	bl	8002708 <prvCopyDataToQueue>
 800225c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	3324      	adds	r3, #36	; 0x24
 800226a:	4618      	mov	r0, r3
 800226c:	f000 ff92 	bl	8003194 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002270:	f001 ff30 	bl	80040d4 <vPortExitCritical>
                return pdPASS;
 8002274:	2301      	movs	r3, #1
 8002276:	e07d      	b.n	8002374 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d110      	bne.n	80022a0 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800227e:	f001 ff29 	bl	80040d4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fcd7 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	460b      	mov	r3, r1
 8002294:	4601      	mov	r1, r0
 8002296:	205a      	movs	r0, #90	; 0x5a
 8002298:	f003 ffb6 	bl	8006208 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800229c:	2300      	movs	r3, #0
 800229e:	e069      	b.n	8002374 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 ffd8 	bl	8003260 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80022b4:	f001 ff0e 	bl	80040d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80022b8:	f000 fd54 	bl	8002d64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022bc:	f001 feda 	bl	8004074 <vPortEnterCritical>
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022c6:	b25b      	sxtb	r3, r3
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022cc:	d103      	bne.n	80022d6 <xQueueGenericSend+0x172>
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e2:	d103      	bne.n	80022ec <xQueueGenericSend+0x188>
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ec:	f001 fef2 	bl	80040d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022f0:	1d3a      	adds	r2, r7, #4
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 ffc7 	bl	800328c <xTaskCheckForTimeOut>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d124      	bne.n	800234e <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002306:	f000 faf7 	bl	80028f8 <prvIsQueueFull>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d018      	beq.n	8002342 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	3310      	adds	r3, #16
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fee9 	bl	80030f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800231e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002320:	f000 fa82 	bl	8002828 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002324:	f000 fd2c 	bl	8002d80 <xTaskResumeAll>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	f47f af79 	bne.w	8002222 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <xQueueGenericSend+0x218>)
 8002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	e76f      	b.n	8002222 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002344:	f000 fa70 	bl	8002828 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002348:	f000 fd1a 	bl	8002d80 <xTaskResumeAll>
 800234c:	e769      	b.n	8002222 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800234e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002350:	f000 fa6a 	bl	8002828 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002354:	f000 fd14 	bl	8002d80 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	4618      	mov	r0, r3
 800235c:	f004 fc6c 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	4601      	mov	r1, r0
 800236c:	205a      	movs	r0, #90	; 0x5a
 800236e:	f003 ff4b 	bl	8006208 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002372:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002374:	4618      	mov	r0, r3
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	e000ed04 	.word	0xe000ed04

08002380 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b090      	sub	sp, #64	; 0x40
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <xQueueGenericSendFromISR+0x3c>
 80023b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <xQueueGenericSendFromISR+0x40>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <xQueueGenericSendFromISR+0x42>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80023d8:	bf00      	nop
 80023da:	e7fe      	b.n	80023da <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d103      	bne.n	80023ea <xQueueGenericSendFromISR+0x6a>
 80023e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <xQueueGenericSendFromISR+0x6e>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <xQueueGenericSendFromISR+0x70>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	623b      	str	r3, [r7, #32]
    }
 8002406:	bf00      	nop
 8002408:	e7fe      	b.n	8002408 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800240a:	f001 ff1f 	bl	800424c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800240e:	f3ef 8211 	mrs	r2, BASEPRI
 8002412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	61fa      	str	r2, [r7, #28]
 8002424:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002426:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <xQueueGenericSendFromISR+0xbc>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d148      	bne.n	80024ce <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fbf2 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 8002454:	4601      	mov	r1, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	461a      	mov	r2, r3
 800245a:	2060      	movs	r0, #96	; 0x60
 800245c:	f003 fe04 	bl	8006068 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002466:	f000 f94f 	bl	8002708 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800246a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002472:	d112      	bne.n	800249a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d025      	beq.n	80024c8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	3324      	adds	r3, #36	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fe87 	bl	8003194 <xTaskRemoveFromEventList>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01d      	beq.n	80024c8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01a      	beq.n	80024c8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e016      	b.n	80024c8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800249a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800249e:	2b7f      	cmp	r3, #127	; 0x7f
 80024a0:	d10a      	bne.n	80024b8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	617b      	str	r3, [r7, #20]
    }
 80024b4:	bf00      	nop
 80024b6:	e7fe      	b.n	80024b6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024bc:	3301      	adds	r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	b25a      	sxtb	r2, r3
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80024c8:	2301      	movs	r3, #1
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80024cc:	e00b      	b.n	80024e6 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fbb1 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 80024d6:	4601      	mov	r1, r0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	461a      	mov	r2, r3
 80024dc:	2060      	movs	r0, #96	; 0x60
 80024de:	f003 fdc3 	bl	8006068 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80024f0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80024f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3740      	adds	r7, #64	; 0x40
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b08f      	sub	sp, #60	; 0x3c
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10a      	bne.n	800252c <xQueueReceive+0x30>
        __asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	623b      	str	r3, [r7, #32]
    }
 8002528:	bf00      	nop
 800252a:	e7fe      	b.n	800252a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <xQueueReceive+0x3e>
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <xQueueReceive+0x42>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <xQueueReceive+0x44>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <xQueueReceive+0x5e>
        __asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	61fb      	str	r3, [r7, #28]
    }
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800255a:	f000 ffb5 	bl	80034c8 <xTaskGetSchedulerState>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <xQueueReceive+0x6e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <xQueueReceive+0x72>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <xQueueReceive+0x74>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <xQueueReceive+0x8e>
        __asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	61bb      	str	r3, [r7, #24]
    }
 8002586:	bf00      	nop
 8002588:	e7fe      	b.n	8002588 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800258a:	f001 fd73 	bl	8004074 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	2b00      	cmp	r3, #0
 8002598:	d024      	beq.n	80025e4 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800259e:	f000 f91d 	bl	80027dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 fb47 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 80025aa:	4604      	mov	r4, r0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f004 fb43 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2101      	movs	r1, #1
 80025b8:	9100      	str	r1, [sp, #0]
 80025ba:	4621      	mov	r1, r4
 80025bc:	205c      	movs	r0, #92	; 0x5c
 80025be:	f003 fe23 	bl	8006208 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	3310      	adds	r3, #16
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fddc 	bl	8003194 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025dc:	f001 fd7a 	bl	80040d4 <vPortExitCritical>
                return pdPASS;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e08a      	b.n	80026fa <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d113      	bne.n	8002612 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025ea:	f001 fd73 	bl	80040d4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fb21 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 80025f6:	4604      	mov	r4, r0
 80025f8:	2000      	movs	r0, #0
 80025fa:	f004 fb1d 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 80025fe:	4602      	mov	r2, r0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2101      	movs	r1, #1
 8002604:	9100      	str	r1, [sp, #0]
 8002606:	4621      	mov	r1, r4
 8002608:	205c      	movs	r0, #92	; 0x5c
 800260a:	f003 fdfd 	bl	8006208 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800260e:	2300      	movs	r3, #0
 8002610:	e073      	b.n	80026fa <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fe1f 	bl	8003260 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002622:	2301      	movs	r3, #1
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002626:	f001 fd55 	bl	80040d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800262a:	f000 fb9b 	bl	8002d64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800262e:	f001 fd21 	bl	8004074 <vPortEnterCritical>
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002638:	b25b      	sxtb	r3, r3
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263e:	d103      	bne.n	8002648 <xQueueReceive+0x14c>
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800264e:	b25b      	sxtb	r3, r3
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002654:	d103      	bne.n	800265e <xQueueReceive+0x162>
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800265e:	f001 fd39 	bl	80040d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002662:	1d3a      	adds	r2, r7, #4
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fe0e 	bl	800328c <xTaskCheckForTimeOut>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d124      	bne.n	80026c0 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002678:	f000 f928 	bl	80028cc <prvIsQueueEmpty>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	3324      	adds	r3, #36	; 0x24
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fd30 	bl	80030f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002692:	f000 f8c9 	bl	8002828 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002696:	f000 fb73 	bl	8002d80 <xTaskResumeAll>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f47f af74 	bne.w	800258a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <xQueueReceive+0x208>)
 80026a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	e76a      	b.n	800258a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80026b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026b6:	f000 f8b7 	bl	8002828 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026ba:	f000 fb61 	bl	8002d80 <xTaskResumeAll>
 80026be:	e764      	b.n	800258a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026c2:	f000 f8b1 	bl	8002828 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026c6:	f000 fb5b 	bl	8002d80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026cc:	f000 f8fe 	bl	80028cc <prvIsQueueEmpty>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f43f af59 	beq.w	800258a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 faac 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 80026e0:	4604      	mov	r4, r0
 80026e2:	2000      	movs	r0, #0
 80026e4:	f004 faa8 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 80026e8:	4602      	mov	r2, r0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2101      	movs	r1, #1
 80026ee:	9100      	str	r1, [sp, #0]
 80026f0:	4621      	mov	r1, r4
 80026f2:	205c      	movs	r0, #92	; 0x5c
 80026f4:	f003 fd88 	bl	8006208 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80026f8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3734      	adds	r7, #52	; 0x34
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	e000ed04 	.word	0xe000ed04

08002708 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d14d      	bne.n	80027ca <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fee6 	bl	8003504 <xTaskPriorityDisinherit>
 8002738:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	e043      	b.n	80027ca <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d119      	bne.n	800277c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6858      	ldr	r0, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	461a      	mov	r2, r3
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	f004 fc2e 	bl	8006fb4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	441a      	add	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	429a      	cmp	r2, r3
 8002770:	d32b      	bcc.n	80027ca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	e026      	b.n	80027ca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68d8      	ldr	r0, [r3, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	461a      	mov	r2, r3
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	f004 fc14 	bl	8006fb4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	425b      	negs	r3, r3
 8002796:	441a      	add	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d207      	bcs.n	80027b8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	425b      	negs	r3, r3
 80027b2:	441a      	add	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d105      	bne.n	80027ca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80027d2:	697b      	ldr	r3, [r7, #20]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	441a      	add	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d303      	bcc.n	8002810 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68d9      	ldr	r1, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	461a      	mov	r2, r3
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f004 fbca 	bl	8006fb4 <memcpy>
    }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002830:	f001 fc20 	bl	8004074 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800283a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800283c:	e011      	b.n	8002862 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3324      	adds	r3, #36	; 0x24
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fca2 	bl	8003194 <xTaskRemoveFromEventList>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002856:	f000 fd7f 	bl	8003358 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	dce9      	bgt.n	800283e <prvUnlockQueue+0x16>
 800286a:	e000      	b.n	800286e <prvUnlockQueue+0x46>
                        break;
 800286c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002876:	f001 fc2d 	bl	80040d4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800287a:	f001 fbfb 	bl	8004074 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002884:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002886:	e011      	b.n	80028ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3310      	adds	r3, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fc7d 	bl	8003194 <xTaskRemoveFromEventList>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028a0:	f000 fd5a 	bl	8003358 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	dce9      	bgt.n	8002888 <prvUnlockQueue+0x60>
 80028b4:	e000      	b.n	80028b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80028c0:	f001 fc08 	bl	80040d4 <vPortExitCritical>
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028d4:	f001 fbce 	bl	8004074 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e001      	b.n	80028ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028ea:	f001 fbf3 	bl	80040d4 <vPortExitCritical>

    return xReturn;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002900:	f001 fbb8 	bl	8004074 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	429a      	cmp	r2, r3
 800290e:	d102      	bne.n	8002916 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e001      	b.n	800291a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800291a:	f001 fbdb 	bl	80040d4 <vPortExitCritical>

    return xReturn;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e01e      	b.n	8002976 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002938:	4a13      	ldr	r2, [pc, #76]	; (8002988 <vQueueAddToRegistry+0x60>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d115      	bne.n	8002970 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002944:	4910      	ldr	r1, [pc, #64]	; (8002988 <vQueueAddToRegistry+0x60>)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <vQueueAddToRegistry+0x60>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f004 f96b 	bl	8006c38 <SEGGER_SYSVIEW_ShrinkId>
 8002962:	4601      	mov	r1, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	2071      	movs	r0, #113	; 0x71
 800296a:	f003 fb7d 	bl	8006068 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800296e:	e006      	b.n	800297e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3301      	adds	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b07      	cmp	r3, #7
 800297a:	d9dd      	bls.n	8002938 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200000e8 	.word	0x200000e8

0800298c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800299c:	f001 fb6a 	bl	8004074 <vPortEnterCritical>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ac:	d103      	bne.n	80029b6 <vQueueWaitForMessageRestricted+0x2a>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c2:	d103      	bne.n	80029cc <vQueueWaitForMessageRestricted+0x40>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029cc:	f001 fb82 	bl	80040d4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3324      	adds	r3, #36	; 0x24
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fba9 	bl	8003138 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff1e 	bl	8002828 <prvUnlockQueue>
    }
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af04      	add	r7, sp, #16
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 fc5f 	bl	80042cc <pvPortMalloc>
 8002a0e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a16:	2058      	movs	r0, #88	; 0x58
 8002a18:	f001 fc58 	bl	80042cc <pvPortMalloc>
 8002a1c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	e005      	b.n	8002a38 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002a2c:	6978      	ldr	r0, [r7, #20]
 8002a2e:	f001 fd2d 	bl	800448c <vPortFree>
 8002a32:	e001      	b.n	8002a38 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d013      	beq.n	8002a66 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	2300      	movs	r3, #0
 8002a42:	9303      	str	r3, [sp, #12]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f80e 	bl	8002a76 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a5a:	69f8      	ldr	r0, [r7, #28]
 8002a5c:	f000 f8a2 	bl	8002ba4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a60:	2301      	movs	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e002      	b.n	8002a6c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
    }
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b088      	sub	sp, #32
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	21a5      	movs	r1, #165	; 0xa5
 8002a90:	f004 fa9e 	bl	8006fd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f023 0307 	bic.w	r3, r3, #7
 8002aac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	617b      	str	r3, [r7, #20]
    }
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01f      	beq.n	8002b14 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	e012      	b.n	8002b00 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	7819      	ldrb	r1, [r3, #0]
 8002ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3334      	adds	r3, #52	; 0x34
 8002aea:	460a      	mov	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d9e9      	bls.n	8002ada <prvInitialiseNewTask+0x64>
 8002b06:	e000      	b.n	8002b0a <prvInitialiseNewTask+0x94>
            {
                break;
 8002b08:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b12:	e003      	b.n	8002b1c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d901      	bls.n	8002b26 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b22:	2304      	movs	r3, #4
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b30:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f999 	bl	8001e74 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	3318      	adds	r3, #24
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f994 	bl	8001e74 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b50:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	f1c3 0205 	rsb	r2, r3, #5
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	3350      	adds	r3, #80	; 0x50
 8002b66:	2204      	movs	r2, #4
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 fa30 	bl	8006fd0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	3354      	adds	r3, #84	; 0x54
 8002b74:	2201      	movs	r2, #1
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fa29 	bl	8006fd0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	69b8      	ldr	r0, [r7, #24]
 8002b84:	f001 f8c8 	bl	8003d18 <pxPortInitialiseStack>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b98:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b9a:	bf00      	nop
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ba4:	b5b0      	push	{r4, r5, r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bac:	f001 fa62 	bl	8004074 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002bb0:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <prvAddNewTaskToReadyList+0xe4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	4a34      	ldr	r2, [pc, #208]	; (8002c88 <prvAddNewTaskToReadyList+0xe4>)
 8002bb8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <prvAddNewTaskToReadyList+0xe8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002bc2:	4a32      	ldr	r2, [pc, #200]	; (8002c8c <prvAddNewTaskToReadyList+0xe8>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bc8:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <prvAddNewTaskToReadyList+0xe4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d110      	bne.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002bd0:	f000 fbe0 	bl	8003394 <prvInitialiseTaskLists>
 8002bd4:	e00d      	b.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <prvAddNewTaskToReadyList+0xec>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <prvAddNewTaskToReadyList+0xe8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d802      	bhi.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <prvAddNewTaskToReadyList+0xe8>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <prvAddNewTaskToReadyList+0xf0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <prvAddNewTaskToReadyList+0xf0>)
 8002bfa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <prvAddNewTaskToReadyList+0xf0>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <prvAddNewTaskToReadyList+0x94>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 feed 	bl	80069ec <SEGGER_SYSVIEW_OnTaskCreate>
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	461d      	mov	r5, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461c      	mov	r4, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	1ae3      	subs	r3, r4, r3
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	462b      	mov	r3, r5
 8002c34:	f001 fdf8 	bl	8004828 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 ff5a 	bl	8006af4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <prvAddNewTaskToReadyList+0xf4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <prvAddNewTaskToReadyList+0xf4>)
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <prvAddNewTaskToReadyList+0xf8>)
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f7ff f910 	bl	8001e8e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c6e:	f001 fa31 	bl	80040d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <prvAddNewTaskToReadyList+0xec>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <prvAddNewTaskToReadyList+0xe8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bdb0      	pop	{r4, r5, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000200 	.word	0x20000200
 8002c8c:	20000128 	.word	0x20000128
 8002c90:	2000020c 	.word	0x2000020c
 8002c94:	2000021c 	.word	0x2000021c
 8002c98:	20000208 	.word	0x20000208
 8002c9c:	2000012c 	.word	0x2000012c

08002ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <vTaskStartScheduler+0xa4>)
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2282      	movs	r2, #130	; 0x82
 8002cb2:	4925      	ldr	r1, [pc, #148]	; (8002d48 <vTaskStartScheduler+0xa8>)
 8002cb4:	4825      	ldr	r0, [pc, #148]	; (8002d4c <vTaskStartScheduler+0xac>)
 8002cb6:	f7ff fe9d 	bl	80029f4 <xTaskCreate>
 8002cba:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002cc2:	f000 fd17 	bl	80036f4 <xTimerCreateTimerTask>
 8002cc6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d124      	bne.n	8002d18 <vTaskStartScheduler+0x78>
        __asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	60bb      	str	r3, [r7, #8]
    }
 8002ce0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <vTaskStartScheduler+0xb0>)
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <vTaskStartScheduler+0xb4>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <vTaskStartScheduler+0xb8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <vTaskStartScheduler+0xbc>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <vTaskStartScheduler+0xa4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d102      	bne.n	8002d08 <vTaskStartScheduler+0x68>
 8002d02:	f003 fe57 	bl	80069b4 <SEGGER_SYSVIEW_OnIdle>
 8002d06:	e004      	b.n	8002d12 <vTaskStartScheduler+0x72>
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <vTaskStartScheduler+0xbc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 feaf 	bl	8006a70 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d12:	f001 f88f 	bl	8003e34 <xPortStartScheduler>
 8002d16:	e00e      	b.n	8002d36 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1e:	d10a      	bne.n	8002d36 <vTaskStartScheduler+0x96>
        __asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	607b      	str	r3, [r7, #4]
    }
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <vTaskStartScheduler+0xc0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000224 	.word	0x20000224
 8002d48:	080078f8 	.word	0x080078f8
 8002d4c:	08003371 	.word	0x08003371
 8002d50:	20000220 	.word	0x20000220
 8002d54:	2000020c 	.word	0x2000020c
 8002d58:	20000204 	.word	0x20000204
 8002d5c:	20000128 	.word	0x20000128
 8002d60:	2000000c 	.word	0x2000000c

08002d64 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <vTaskSuspendAll+0x18>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <vTaskSuspendAll+0x18>)
 8002d70:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	20000228 	.word	0x20000228

08002d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <xTaskResumeAll+0x104>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <xTaskResumeAll+0x2c>
        __asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	603b      	str	r3, [r7, #0]
    }
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002dac:	f001 f962 	bl	8004074 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <xTaskResumeAll+0x104>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <xTaskResumeAll+0x104>)
 8002db8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dba:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <xTaskResumeAll+0x104>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d159      	bne.n	8002e76 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <xTaskResumeAll+0x108>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d055      	beq.n	8002e76 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dca:	e032      	b.n	8002e32 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <xTaskResumeAll+0x10c>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff f8b5 	bl	8001f48 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3304      	adds	r3, #4
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff f8b0 	bl	8001f48 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fe82 	bl	8006af4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	2201      	movs	r2, #1
 8002df6:	409a      	lsls	r2, r3
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <xTaskResumeAll+0x110>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <xTaskResumeAll+0x110>)
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <xTaskResumeAll+0x114>)
 8002e10:	441a      	add	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f7ff f838 	bl	8001e8e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <xTaskResumeAll+0x118>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <xTaskResumeAll+0x11c>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <xTaskResumeAll+0x10c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1c8      	bne.n	8002dcc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e40:	f000 fb26 	bl	8003490 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <xTaskResumeAll+0x120>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e50:	f000 f84a 	bl	8002ee8 <xTaskIncrementTick>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <xTaskResumeAll+0x11c>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f1      	bne.n	8002e50 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <xTaskResumeAll+0x120>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <xTaskResumeAll+0x11c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e76:	f001 f92d 	bl	80040d4 <vPortExitCritical>

    return xAlreadyYielded;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000228 	.word	0x20000228
 8002e88:	20000200 	.word	0x20000200
 8002e8c:	200001c0 	.word	0x200001c0
 8002e90:	20000208 	.word	0x20000208
 8002e94:	2000012c 	.word	0x2000012c
 8002e98:	20000128 	.word	0x20000128
 8002e9c:	20000214 	.word	0x20000214
 8002ea0:	20000210 	.word	0x20000210

08002ea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <xTaskGetTickCount+0x1c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002eb0:	687b      	ldr	r3, [r7, #4]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000204 	.word	0x20000204

08002ec4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eca:	f001 f9bf 	bl	800424c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <xTaskGetTickCountFromISR+0x20>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ed8:	683b      	ldr	r3, [r7, #0]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000204 	.word	0x20000204

08002ee8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <xTaskIncrementTick+0x110>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d173      	bne.n	8002fe2 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002efa:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <xTaskIncrementTick+0x114>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f02:	4a3e      	ldr	r2, [pc, #248]	; (8002ffc <xTaskIncrementTick+0x114>)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d120      	bne.n	8002f50 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <xTaskIncrementTick+0x118>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <xTaskIncrementTick+0x46>
        __asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	603b      	str	r3, [r7, #0]
    }
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xTaskIncrementTick+0x44>
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <xTaskIncrementTick+0x118>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	4b33      	ldr	r3, [pc, #204]	; (8003004 <xTaskIncrementTick+0x11c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a31      	ldr	r2, [pc, #196]	; (8003000 <xTaskIncrementTick+0x118>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4a31      	ldr	r2, [pc, #196]	; (8003004 <xTaskIncrementTick+0x11c>)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <xTaskIncrementTick+0x120>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <xTaskIncrementTick+0x120>)
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	f000 faa0 	bl	8003490 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <xTaskIncrementTick+0x124>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d348      	bcc.n	8002fec <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <xTaskIncrementTick+0x118>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <xTaskIncrementTick+0x124>)
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f6a:	601a      	str	r2, [r3, #0]
                    break;
 8002f6c:	e03e      	b.n	8002fec <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <xTaskIncrementTick+0x118>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d203      	bcs.n	8002f8e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f86:	4a21      	ldr	r2, [pc, #132]	; (800300c <xTaskIncrementTick+0x124>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f8c:	e02e      	b.n	8002fec <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3304      	adds	r3, #4
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe ffd8 	bl	8001f48 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe ffcf 	bl	8001f48 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 fda1 	bl	8006af4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <xTaskIncrementTick+0x128>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <xTaskIncrementTick+0x128>)
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4a10      	ldr	r2, [pc, #64]	; (8003014 <xTaskIncrementTick+0x12c>)
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fe ff57 	bl	8001e8e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe0:	e7bb      	b.n	8002f5a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <xTaskIncrementTick+0x130>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <xTaskIncrementTick+0x130>)
 8002fea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002fec:	697b      	ldr	r3, [r7, #20]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000228 	.word	0x20000228
 8002ffc:	20000204 	.word	0x20000204
 8003000:	200001b8 	.word	0x200001b8
 8003004:	200001bc 	.word	0x200001bc
 8003008:	20000218 	.word	0x20000218
 800300c:	20000220 	.word	0x20000220
 8003010:	20000208 	.word	0x20000208
 8003014:	2000012c 	.word	0x2000012c
 8003018:	20000210 	.word	0x20000210

0800301c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <vTaskSwitchContext+0xbc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800302a:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <vTaskSwitchContext+0xc0>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003030:	e04d      	b.n	80030ce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <vTaskSwitchContext+0xc0>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <vTaskSwitchContext+0xc4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	f1c3 031f 	rsb	r3, r3, #31
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	4925      	ldr	r1, [pc, #148]	; (80030e4 <vTaskSwitchContext+0xc8>)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	607b      	str	r3, [r7, #4]
    }
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <vTaskSwitchContext+0x5a>
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <vTaskSwitchContext+0xc8>)
 8003084:	4413      	add	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3308      	adds	r3, #8
 800309a:	429a      	cmp	r2, r3
 800309c:	d104      	bne.n	80030a8 <vTaskSwitchContext+0x8c>
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <vTaskSwitchContext+0xcc>)
 80030b0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <vTaskSwitchContext+0xcc>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <vTaskSwitchContext+0xd0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d102      	bne.n	80030c4 <vTaskSwitchContext+0xa8>
 80030be:	f003 fc79 	bl	80069b4 <SEGGER_SYSVIEW_OnIdle>
}
 80030c2:	e004      	b.n	80030ce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <vTaskSwitchContext+0xcc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fcd1 	bl	8006a70 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000228 	.word	0x20000228
 80030dc:	20000214 	.word	0x20000214
 80030e0:	20000208 	.word	0x20000208
 80030e4:	2000012c 	.word	0x2000012c
 80030e8:	20000128 	.word	0x20000128
 80030ec:	20000224 	.word	0x20000224

080030f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	60fb      	str	r3, [r7, #12]
    }
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <vTaskPlaceOnEventList+0x44>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3318      	adds	r3, #24
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe fed9 	bl	8001ed6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003124:	2101      	movs	r1, #1
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	f000 fa6c 	bl	8003604 <prvAddCurrentTaskToDelayedList>
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000128 	.word	0x20000128

08003138 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	617b      	str	r3, [r7, #20]
    }
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <vTaskPlaceOnEventListRestricted+0x58>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3318      	adds	r3, #24
 8003166:	4619      	mov	r1, r3
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7fe fe90 	bl	8001e8e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003178:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800317a:	2024      	movs	r0, #36	; 0x24
 800317c:	f002 ff1a 	bl	8005fb4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	68b8      	ldr	r0, [r7, #8]
 8003184:	f000 fa3e 	bl	8003604 <prvAddCurrentTaskToDelayedList>
    }
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000128 	.word	0x20000128

08003194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	60fb      	str	r3, [r7, #12]
    }
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	3318      	adds	r3, #24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe febf 	bl	8001f48 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <xTaskRemoveFromEventList+0xb4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d120      	bne.n	8003214 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe feb6 	bl	8001f48 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fc88 	bl	8006af4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	2201      	movs	r2, #1
 80031ea:	409a      	lsls	r2, r3
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <xTaskRemoveFromEventList+0xb8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <xTaskRemoveFromEventList+0xb8>)
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <xTaskRemoveFromEventList+0xbc>)
 8003204:	441a      	add	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	3304      	adds	r3, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f7fe fe3e 	bl	8001e8e <vListInsertEnd>
 8003212:	e005      	b.n	8003220 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3318      	adds	r3, #24
 8003218:	4619      	mov	r1, r3
 800321a:	480e      	ldr	r0, [pc, #56]	; (8003254 <xTaskRemoveFromEventList+0xc0>)
 800321c:	f7fe fe37 	bl	8001e8e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <xTaskRemoveFromEventList+0xc4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	429a      	cmp	r2, r3
 800322c:	d905      	bls.n	800323a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800322e:	2301      	movs	r3, #1
 8003230:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <xTaskRemoveFromEventList+0xc8>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e001      	b.n	800323e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800323e:	697b      	ldr	r3, [r7, #20]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000228 	.word	0x20000228
 800324c:	20000208 	.word	0x20000208
 8003250:	2000012c 	.word	0x2000012c
 8003254:	200001c0 	.word	0x200001c0
 8003258:	20000128 	.word	0x20000128
 800325c:	20000214 	.word	0x20000214

08003260 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <vTaskInternalSetTimeOutState+0x24>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <vTaskInternalSetTimeOutState+0x28>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	605a      	str	r2, [r3, #4]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	20000218 	.word	0x20000218
 8003288:	20000204 	.word	0x20000204

0800328c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	613b      	str	r3, [r7, #16]
    }
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	60fb      	str	r3, [r7, #12]
    }
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032ce:	f000 fed1 	bl	8004074 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <xTaskCheckForTimeOut+0xc4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ea:	d102      	bne.n	80032f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e026      	b.n	8003340 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <xTaskCheckForTimeOut+0xc8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d00a      	beq.n	8003314 <xTaskCheckForTimeOut+0x88>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d305      	bcc.n	8003314 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003308:	2301      	movs	r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e015      	b.n	8003340 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	429a      	cmp	r2, r3
 800331c:	d20b      	bcs.n	8003336 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad2      	subs	r2, r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff98 	bl	8003260 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	e004      	b.n	8003340 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003340:	f000 fec8 	bl	80040d4 <vPortExitCritical>

    return xReturn;
 8003344:	69fb      	ldr	r3, [r7, #28]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000204 	.word	0x20000204
 8003354:	20000218 	.word	0x20000218

08003358 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <vTaskMissedYield+0x14>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	20000214 	.word	0x20000214

08003370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003378:	f000 f84c 	bl	8003414 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <prvIdleTask+0x20>)
 800337e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800338c:	e7f4      	b.n	8003378 <prvIdleTask+0x8>
 800338e:	bf00      	nop
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	e00c      	b.n	80033ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <prvInitialiseTaskLists+0x60>)
 80033ac:	4413      	add	r3, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fd40 	bl	8001e34 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d9ef      	bls.n	80033a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <prvInitialiseTaskLists+0x64>)
 80033c2:	f7fe fd37 	bl	8001e34 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033c6:	480d      	ldr	r0, [pc, #52]	; (80033fc <prvInitialiseTaskLists+0x68>)
 80033c8:	f7fe fd34 	bl	8001e34 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <prvInitialiseTaskLists+0x6c>)
 80033ce:	f7fe fd31 	bl	8001e34 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80033d2:	480c      	ldr	r0, [pc, #48]	; (8003404 <prvInitialiseTaskLists+0x70>)
 80033d4:	f7fe fd2e 	bl	8001e34 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80033d8:	480b      	ldr	r0, [pc, #44]	; (8003408 <prvInitialiseTaskLists+0x74>)
 80033da:	f7fe fd2b 	bl	8001e34 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <prvInitialiseTaskLists+0x78>)
 80033e0:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <prvInitialiseTaskLists+0x64>)
 80033e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <prvInitialiseTaskLists+0x7c>)
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <prvInitialiseTaskLists+0x68>)
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000012c 	.word	0x2000012c
 80033f8:	20000190 	.word	0x20000190
 80033fc:	200001a4 	.word	0x200001a4
 8003400:	200001c0 	.word	0x200001c0
 8003404:	200001d4 	.word	0x200001d4
 8003408:	200001ec 	.word	0x200001ec
 800340c:	200001b8 	.word	0x200001b8
 8003410:	200001bc 	.word	0x200001bc

08003414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800341a:	e019      	b.n	8003450 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800341c:	f000 fe2a 	bl	8004074 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <prvCheckTasksWaitingTermination+0x50>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe fd8b 	bl	8001f48 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <prvCheckTasksWaitingTermination+0x54>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3b01      	subs	r3, #1
 8003438:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <prvCheckTasksWaitingTermination+0x54>)
 800343a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <prvCheckTasksWaitingTermination+0x58>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3b01      	subs	r3, #1
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <prvCheckTasksWaitingTermination+0x58>)
 8003444:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003446:	f000 fe45 	bl	80040d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f810 	bl	8003470 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <prvCheckTasksWaitingTermination+0x58>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e1      	bne.n	800341c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200001d4 	.word	0x200001d4
 8003468:	20000200 	.word	0x20000200
 800346c:	200001e8 	.word	0x200001e8

08003470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	4618      	mov	r0, r3
 800347e:	f001 f805 	bl	800448c <vPortFree>
                vPortFree( pxTCB );
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f001 f802 	bl	800448c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <prvResetNextTaskUnblockTime+0x30>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <prvResetNextTaskUnblockTime+0x34>)
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034a6:	e005      	b.n	80034b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <prvResetNextTaskUnblockTime+0x30>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <prvResetNextTaskUnblockTime+0x34>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	200001b8 	.word	0x200001b8
 80034c4:	20000220 	.word	0x20000220

080034c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <xTaskGetSchedulerState+0x34>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80034d6:	2301      	movs	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	e008      	b.n	80034ee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <xTaskGetSchedulerState+0x38>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034e4:	2302      	movs	r3, #2
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	e001      	b.n	80034ee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034ee:	687b      	ldr	r3, [r7, #4]
    }
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	2000020c 	.word	0x2000020c
 8003500:	20000228 	.word	0x20000228

08003504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d068      	beq.n	80035ec <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800351a:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <xTaskPriorityDisinherit+0xf4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d00a      	beq.n	800353a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	60fb      	str	r3, [r7, #12]
    }
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	60bb      	str	r3, [r7, #8]
    }
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	1e5a      	subs	r2, r3, #1
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	429a      	cmp	r2, r3
 800356c:	d03e      	beq.n	80035ec <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d13a      	bne.n	80035ec <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	3304      	adds	r3, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fce4 	bl	8001f48 <uxListRemove>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	2201      	movs	r2, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43da      	mvns	r2, r3
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <xTaskPriorityDisinherit+0xf8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4013      	ands	r3, r2
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <xTaskPriorityDisinherit+0xf8>)
 800359a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4619      	mov	r1, r3
 80035a0:	204a      	movs	r0, #74	; 0x4a
 80035a2:	f002 fd25 	bl	8005ff0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f1c3 0205 	rsb	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	2201      	movs	r2, #1
 80035c0:	409a      	lsls	r2, r3
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <xTaskPriorityDisinherit+0xf8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <xTaskPriorityDisinherit+0xf8>)
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4a09      	ldr	r2, [pc, #36]	; (8003600 <xTaskPriorityDisinherit+0xfc>)
 80035da:	441a      	add	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f7fe fc53 	bl	8001e8e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80035ec:	697b      	ldr	r3, [r7, #20]
    }
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000128 	.word	0x20000128
 80035fc:	20000208 	.word	0x20000208
 8003600:	2000012c 	.word	0x2000012c

08003604 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800360e:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3304      	adds	r3, #4
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fc94 	bl	8001f48 <uxListRemove>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003626:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4013      	ands	r3, r2
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800363c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003644:	d110      	bne.n	8003668 <prvAddCurrentTaskToDelayedList+0x64>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	211b      	movs	r1, #27
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fa90 	bl	8006b78 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003658:	4b20      	ldr	r3, [pc, #128]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3304      	adds	r3, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4820      	ldr	r0, [pc, #128]	; (80036e4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003662:	f7fe fc14 	bl	8001e8e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003666:	e032      	b.n	80036ce <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	429a      	cmp	r2, r3
 800367e:	d20f      	bcs.n	80036a0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2104      	movs	r1, #4
 8003686:	4618      	mov	r0, r3
 8003688:	f003 fa76 	bl	8006b78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f7fe fc1c 	bl	8001ed6 <vListInsert>
}
 800369e:	e016      	b.n	80036ce <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80036a0:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2104      	movs	r1, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 fa66 	bl	8006b78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f7fe fc0c 	bl	8001ed6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d202      	bcs.n	80036ce <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6013      	str	r3, [r2, #0]
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000204 	.word	0x20000204
 80036dc:	20000128 	.word	0x20000128
 80036e0:	20000208 	.word	0x20000208
 80036e4:	200001ec 	.word	0x200001ec
 80036e8:	200001bc 	.word	0x200001bc
 80036ec:	200001b8 	.word	0x200001b8
 80036f0:	20000220 	.word	0x20000220

080036f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80036fe:	f000 fad5 	bl	8003cac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <xTimerCreateTimerTask+0x54>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <xTimerCreateTimerTask+0x58>)
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2302      	movs	r3, #2
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2300      	movs	r3, #0
 8003714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003718:	490d      	ldr	r1, [pc, #52]	; (8003750 <xTimerCreateTimerTask+0x5c>)
 800371a:	480e      	ldr	r0, [pc, #56]	; (8003754 <xTimerCreateTimerTask+0x60>)
 800371c:	f7ff f96a 	bl	80029f4 <xTaskCreate>
 8003720:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	603b      	str	r3, [r7, #0]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800373e:	687b      	ldr	r3, [r7, #4]
    }
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	2000025c 	.word	0x2000025c
 800374c:	20000260 	.word	0x20000260
 8003750:	08007900 	.word	0x08007900
 8003754:	0800388d 	.word	0x0800388d

08003758 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	623b      	str	r3, [r7, #32]
    }
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003786:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <xTimerGenericCommand+0x98>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02a      	beq.n	80037e4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b05      	cmp	r3, #5
 800379e:	dc18      	bgt.n	80037d2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037a0:	f7ff fe92 	bl	80034c8 <xTaskGetSchedulerState>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d109      	bne.n	80037be <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <xTimerGenericCommand+0x98>)
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	f107 0114 	add.w	r1, r7, #20
 80037b2:	2300      	movs	r3, #0
 80037b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b6:	f7fe fcd5 	bl	8002164 <xQueueGenericSend>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24
 80037bc:	e012      	b.n	80037e4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <xTimerGenericCommand+0x98>)
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	f107 0114 	add.w	r1, r7, #20
 80037c6:	2300      	movs	r3, #0
 80037c8:	2200      	movs	r2, #0
 80037ca:	f7fe fccb 	bl	8002164 <xQueueGenericSend>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24
 80037d0:	e008      	b.n	80037e4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <xTimerGenericCommand+0x98>)
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	f107 0114 	add.w	r1, r7, #20
 80037da:	2300      	movs	r3, #0
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	f7fe fdcf 	bl	8002380 <xQueueGenericSendFromISR>
 80037e2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037e6:	4618      	mov	r0, r3
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000025c 	.word	0x2000025c

080037f4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <prvProcessExpiredTimer+0x94>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3304      	adds	r3, #4
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fb9b 	bl	8001f48 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d022      	beq.n	8003866 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	18d1      	adds	r1, r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	6978      	ldr	r0, [r7, #20]
 800382e:	f000 f8d1 	bl	80039d4 <prvInsertTimerInActiveList>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01f      	beq.n	8003878 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003838:	2300      	movs	r3, #0
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2300      	movs	r3, #0
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	2100      	movs	r1, #0
 8003842:	6978      	ldr	r0, [r7, #20]
 8003844:	f7ff ff88 	bl	8003758 <xTimerGenericCommand>
 8003848:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d113      	bne.n	8003878 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	60fb      	str	r3, [r7, #12]
    }
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	6978      	ldr	r0, [r7, #20]
 800387e:	4798      	blx	r3
    }
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000254 	.word	0x20000254

0800388c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003894:	f107 0308 	add.w	r3, r7, #8
 8003898:	4618      	mov	r0, r3
 800389a:	f000 f857 	bl	800394c <prvGetNextExpireTime>
 800389e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4619      	mov	r1, r3
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f803 	bl	80038b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80038aa:	f000 f8d5 	bl	8003a58 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038ae:	e7f1      	b.n	8003894 <prvTimerTask+0x8>

080038b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80038ba:	f7ff fa53 	bl	8002d64 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038be:	f107 0308 	add.w	r3, r7, #8
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f866 	bl	8003994 <prvSampleTimeNow>
 80038c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d130      	bne.n	8003932 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <prvProcessTimerOrBlockTask+0x3c>
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d806      	bhi.n	80038ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80038de:	f7ff fa4f 	bl	8002d80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038e2:	68f9      	ldr	r1, [r7, #12]
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff85 	bl	80037f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80038ea:	e024      	b.n	8003936 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <prvProcessTimerOrBlockTask+0x90>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <prvProcessTimerOrBlockTask+0x50>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <prvProcessTimerOrBlockTask+0x52>
 8003900:	2300      	movs	r3, #0
 8003902:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <prvProcessTimerOrBlockTask+0x94>)
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	f7ff f83b 	bl	800298c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003916:	f7ff fa33 	bl	8002d80 <xTaskResumeAll>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <prvProcessTimerOrBlockTask+0x98>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
    }
 8003930:	e001      	b.n	8003936 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003932:	f7ff fa25 	bl	8002d80 <xTaskResumeAll>
    }
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000258 	.word	0x20000258
 8003944:	2000025c 	.word	0x2000025c
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <prvGetNextExpireTime+0x44>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <prvGetNextExpireTime+0x16>
 800395e:	2201      	movs	r2, #1
 8003960:	e000      	b.n	8003964 <prvGetNextExpireTime+0x18>
 8003962:	2200      	movs	r2, #0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d105      	bne.n	800397c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <prvGetNextExpireTime+0x44>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e001      	b.n	8003980 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003980:	68fb      	ldr	r3, [r7, #12]
    }
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000254 	.word	0x20000254

08003994 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800399c:	f7ff fa82 	bl	8002ea4 <xTaskGetTickCount>
 80039a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <prvSampleTimeNow+0x3c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d205      	bcs.n	80039b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80039ac:	f000 f91a 	bl	8003be4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e002      	b.n	80039be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80039be:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <prvSampleTimeNow+0x3c>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80039c4:	68fb      	ldr	r3, [r7, #12]
    }
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000264 	.word	0x20000264

080039d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d812      	bhi.n	8003a20 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	1ad2      	subs	r2, r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e01b      	b.n	8003a46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <prvInsertTimerInActiveList+0x7c>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7fe fa5c 	bl	8001ed6 <vListInsert>
 8003a1e:	e012      	b.n	8003a46 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d206      	bcs.n	8003a36 <prvInsertTimerInActiveList+0x62>
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e007      	b.n	8003a46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvInsertTimerInActiveList+0x80>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7fe fa48 	bl	8001ed6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a46:	697b      	ldr	r3, [r7, #20]
    }
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000258 	.word	0x20000258
 8003a54:	20000254 	.word	0x20000254

08003a58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	; 0x30
 8003a5c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a5e:	e0ae      	b.n	8003bbe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f2c0 80aa 	blt.w	8003bbc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fa65 	bl	8001f48 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff87 	bl	8003994 <prvSampleTimeNow>
 8003a86:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b09      	cmp	r3, #9
 8003a8c:	f200 8097 	bhi.w	8003bbe <prvProcessReceivedCommands+0x166>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <prvProcessReceivedCommands+0x40>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003ac1 	.word	0x08003ac1
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003ac1 	.word	0x08003ac1
 8003aa4:	08003b35 	.word	0x08003b35
 8003aa8:	08003b49 	.word	0x08003b49
 8003aac:	08003b93 	.word	0x08003b93
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ac1 	.word	0x08003ac1
 8003ab8:	08003b35 	.word	0x08003b35
 8003abc:	08003b49 	.word	0x08003b49
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	18d1      	adds	r1, r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ae0:	f7ff ff78 	bl	80039d4 <prvInsertTimerInActiveList>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d069      	beq.n	8003bbe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003af0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05e      	beq.n	8003bbe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	441a      	add	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b12:	f7ff fe21 	bl	8003758 <xTimerGenericCommand>
 8003b16:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d14f      	bne.n	8003bbe <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	61bb      	str	r3, [r7, #24]
    }
 8003b30:	bf00      	nop
 8003b32:	e7fe      	b.n	8003b32 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b46:	e03a      	b.n	8003bbe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	617b      	str	r3, [r7, #20]
    }
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	18d1      	adds	r1, r2, r3
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b8c:	f7ff ff22 	bl	80039d4 <prvInsertTimerInActiveList>
                        break;
 8003b90:	e015      	b.n	8003bbe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ba2:	f000 fc73 	bl	800448c <vPortFree>
 8003ba6:	e00a      	b.n	8003bbe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003bba:	e000      	b.n	8003bbe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003bbc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <prvProcessReceivedCommands+0x188>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f107 0108 	add.w	r1, r7, #8
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fc97 	bl	80024fc <xQueueReceive>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f af45 	bne.w	8003a60 <prvProcessReceivedCommands+0x8>
        }
    }
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2000025c 	.word	0x2000025c

08003be4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bea:	e048      	b.n	8003c7e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <prvSwitchTimerLists+0xc0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <prvSwitchTimerLists+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe f99f 	bl	8001f48 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02e      	beq.n	8003c7e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d90e      	bls.n	8003c50 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <prvSwitchTimerLists+0xc0>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe f944 	bl	8001ed6 <vListInsert>
 8003c4e:	e016      	b.n	8003c7e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c50:	2300      	movs	r3, #0
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff fd7c 	bl	8003758 <xTimerGenericCommand>
 8003c60:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	603b      	str	r3, [r7, #0]
    }
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <prvSwitchTimerLists+0xc0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1b1      	bne.n	8003bec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <prvSwitchTimerLists+0xc0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <prvSwitchTimerLists+0xc4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <prvSwitchTimerLists+0xc0>)
 8003c94:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <prvSwitchTimerLists+0xc4>)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	6013      	str	r3, [r2, #0]
    }
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000254 	.word	0x20000254
 8003ca8:	20000258 	.word	0x20000258

08003cac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003cb0:	f000 f9e0 	bl	8004074 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003cb4:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <prvCheckForValidListAndQueue+0x54>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11d      	bne.n	8003cf8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003cbc:	4811      	ldr	r0, [pc, #68]	; (8003d04 <prvCheckForValidListAndQueue+0x58>)
 8003cbe:	f7fe f8b9 	bl	8001e34 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003cc2:	4811      	ldr	r0, [pc, #68]	; (8003d08 <prvCheckForValidListAndQueue+0x5c>)
 8003cc4:	f7fe f8b6 	bl	8001e34 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <prvCheckForValidListAndQueue+0x60>)
 8003cca:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <prvCheckForValidListAndQueue+0x58>)
 8003ccc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <prvCheckForValidListAndQueue+0x64>)
 8003cd0:	4a0d      	ldr	r2, [pc, #52]	; (8003d08 <prvCheckForValidListAndQueue+0x5c>)
 8003cd2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	210c      	movs	r1, #12
 8003cd8:	200a      	movs	r0, #10
 8003cda:	f7fe f9ba 	bl	8002052 <xQueueGenericCreate>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <prvCheckForValidListAndQueue+0x54>)
 8003ce2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <prvCheckForValidListAndQueue+0x54>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <prvCheckForValidListAndQueue+0x54>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4908      	ldr	r1, [pc, #32]	; (8003d14 <prvCheckForValidListAndQueue+0x68>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fe18 	bl	8002928 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cf8:	f000 f9ec 	bl	80040d4 <vPortExitCritical>
    }
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	2000025c 	.word	0x2000025c
 8003d04:	2000022c 	.word	0x2000022c
 8003d08:	20000240 	.word	0x20000240
 8003d0c:	20000254 	.word	0x20000254
 8003d10:	20000258 	.word	0x20000258
 8003d14:	08007908 	.word	0x08007908

08003d18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b04      	subs	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3b04      	subs	r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b04      	subs	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d48:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <pxPortInitialiseStack+0x64>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b14      	subs	r3, #20
 8003d52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b04      	subs	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f06f 0202 	mvn.w	r2, #2
 8003d66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b20      	subs	r3, #32
 8003d6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	08003d81 	.word	0x08003d81

08003d80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <prvTaskExitError+0x54>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d92:	d00a      	beq.n	8003daa <prvTaskExitError+0x2a>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60fb      	str	r3, [r7, #12]
    }
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <prvTaskExitError+0x28>
        __asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60bb      	str	r3, [r7, #8]
    }
 8003dbc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003dbe:	bf00      	nop
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0fc      	beq.n	8003dc0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	20000010 	.word	0x20000010
	...

08003de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <pxCurrentTCBConst2>)
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	6808      	ldr	r0, [r1, #0]
 8003de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	f380 8809 	msr	PSP, r0
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8811 	msr	BASEPRI, r0
 8003dfa:	4770      	bx	lr
 8003dfc:	f3af 8000 	nop.w

08003e00 <pxCurrentTCBConst2>:
 8003e00:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop

08003e08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <prvPortStartFirstTask+0x24>)
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	6800      	ldr	r0, [r0, #0]
 8003e0e:	f380 8808 	msr	MSP, r0
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8814 	msr	CONTROL, r0
 8003e1a:	b662      	cpsie	i
 8003e1c:	b661      	cpsie	f
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	df00      	svc	0
 8003e28:	bf00      	nop
 8003e2a:	0000      	.short	0x0000
 8003e2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop

08003e34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <xPortStartScheduler+0x120>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a46      	ldr	r2, [pc, #280]	; (8003f58 <xPortStartScheduler+0x124>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10a      	bne.n	8003e5a <xPortStartScheduler+0x26>
        __asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	613b      	str	r3, [r7, #16]
    }
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <xPortStartScheduler+0x120>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a3f      	ldr	r2, [pc, #252]	; (8003f5c <xPortStartScheduler+0x128>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10a      	bne.n	8003e7a <xPortStartScheduler+0x46>
        __asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60fb      	str	r3, [r7, #12]
    }
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e7a:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <xPortStartScheduler+0x12c>)
 8003e7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <xPortStartScheduler+0x130>)
 8003ea0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ea2:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <xPortStartScheduler+0x134>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ea8:	e009      	b.n	8003ebe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <xPortStartScheduler+0x134>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <xPortStartScheduler+0x134>)
 8003eb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b80      	cmp	r3, #128	; 0x80
 8003ec8:	d0ef      	beq.n	8003eaa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <xPortStartScheduler+0x134>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1c3 0307 	rsb	r3, r3, #7
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d00a      	beq.n	8003eec <xPortStartScheduler+0xb8>
        __asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	60bb      	str	r3, [r7, #8]
    }
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <xPortStartScheduler+0x134>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <xPortStartScheduler+0x134>)
 8003ef4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <xPortStartScheduler+0x134>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003efe:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <xPortStartScheduler+0x134>)
 8003f00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <xPortStartScheduler+0x138>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <xPortStartScheduler+0x138>)
 8003f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <xPortStartScheduler+0x138>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <xPortStartScheduler+0x138>)
 8003f1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f22:	f000 f963 	bl	80041ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <xPortStartScheduler+0x13c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f2c:	f000 f982 	bl	8004234 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <xPortStartScheduler+0x140>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <xPortStartScheduler+0x140>)
 8003f36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f3c:	f7ff ff64 	bl	8003e08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f40:	f7ff f86c 	bl	800301c <vTaskSwitchContext>
    prvTaskExitError();
 8003f44:	f7ff ff1c 	bl	8003d80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000ed00 	.word	0xe000ed00
 8003f58:	410fc271 	.word	0x410fc271
 8003f5c:	410fc270 	.word	0x410fc270
 8003f60:	e000e400 	.word	0xe000e400
 8003f64:	20000268 	.word	0x20000268
 8003f68:	2000026c 	.word	0x2000026c
 8003f6c:	e000ed20 	.word	0xe000ed20
 8003f70:	20000010 	.word	0x20000010
 8003f74:	e000ef34 	.word	0xe000ef34

08003f78 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <vInitPrioGroupValue+0xe4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a37      	ldr	r2, [pc, #220]	; (8004060 <vInitPrioGroupValue+0xe8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10a      	bne.n	8003f9e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	613b      	str	r3, [r7, #16]
    }
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f9e:	4b2f      	ldr	r3, [pc, #188]	; (800405c <vInitPrioGroupValue+0xe4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a30      	ldr	r2, [pc, #192]	; (8004064 <vInitPrioGroupValue+0xec>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10a      	bne.n	8003fbe <vInitPrioGroupValue+0x46>
        __asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
    }
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <vInitPrioGroupValue+0xf0>)
 8003fc0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4b22      	ldr	r3, [pc, #136]	; (800406c <vInitPrioGroupValue+0xf4>)
 8003fe4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fe6:	4b22      	ldr	r3, [pc, #136]	; (8004070 <vInitPrioGroupValue+0xf8>)
 8003fe8:	2207      	movs	r2, #7
 8003fea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fec:	e009      	b.n	8004002 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <vInitPrioGroupValue+0xf8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <vInitPrioGroupValue+0xf8>)
 8003ff6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d0ef      	beq.n	8003fee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800400e:	4b18      	ldr	r3, [pc, #96]	; (8004070 <vInitPrioGroupValue+0xf8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1c3 0307 	rsb	r3, r3, #7
 8004016:	2b04      	cmp	r3, #4
 8004018:	d00a      	beq.n	8004030 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	60bb      	str	r3, [r7, #8]
    }
 800402c:	bf00      	nop
 800402e:	e7fe      	b.n	800402e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <vInitPrioGroupValue+0xf8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	4a0e      	ldr	r2, [pc, #56]	; (8004070 <vInitPrioGroupValue+0xf8>)
 8004038:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <vInitPrioGroupValue+0xf8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <vInitPrioGroupValue+0xf8>)
 8004044:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000ed00 	.word	0xe000ed00
 8004060:	410fc271 	.word	0x410fc271
 8004064:	410fc270 	.word	0x410fc270
 8004068:	e000e400 	.word	0xe000e400
 800406c:	20000268 	.word	0x20000268
 8004070:	2000026c 	.word	0x2000026c

08004074 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
        __asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	607b      	str	r3, [r7, #4]
    }
 800408c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800408e:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <vPortEnterCritical+0x58>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <vPortEnterCritical+0x58>)
 8004096:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <vPortEnterCritical+0x58>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d10f      	bne.n	80040c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <vPortEnterCritical+0x5c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	603b      	str	r3, [r7, #0]
    }
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <vPortEnterCritical+0x4a>
    }
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20000010 	.word	0x20000010
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <vPortExitCritical+0x50>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <vPortExitCritical+0x24>
        __asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	607b      	str	r3, [r7, #4]
    }
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <vPortExitCritical+0x50>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <vPortExitCritical+0x50>)
 8004100:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <vPortExitCritical+0x50>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d105      	bne.n	8004116 <vPortExitCritical+0x42>
 800410a:	2300      	movs	r3, #0
 800410c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f383 8811 	msr	BASEPRI, r3
    }
 8004114:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000010 	.word	0x20000010
	...

08004130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004130:	f3ef 8009 	mrs	r0, PSP
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	4b15      	ldr	r3, [pc, #84]	; (8004190 <pxCurrentTCBConst>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	f01e 0f10 	tst.w	lr, #16
 8004140:	bf08      	it	eq
 8004142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	6010      	str	r0, [r2, #0]
 800414c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004154:	f380 8811 	msr	BASEPRI, r0
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f7fe ff5c 	bl	800301c <vTaskSwitchContext>
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f380 8811 	msr	BASEPRI, r0
 800416c:	bc09      	pop	{r0, r3}
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	6808      	ldr	r0, [r1, #0]
 8004172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004176:	f01e 0f10 	tst.w	lr, #16
 800417a:	bf08      	it	eq
 800417c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004180:	f380 8809 	msr	PSP, r0
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	f3af 8000 	nop.w

08004190 <pxCurrentTCBConst>:
 8004190:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
        __asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	607b      	str	r3, [r7, #4]
    }
 80041b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80041b2:	f002 fb85 	bl	80068c0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041b6:	f7fe fe97 	bl	8002ee8 <xTaskIncrementTick>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d006      	beq.n	80041ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80041c0:	f002 fbdc 	bl	800697c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <SysTick_Handler+0x50>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e001      	b.n	80041d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80041ce:	f002 fbb9 	bl	8006944 <SEGGER_SYSVIEW_RecordExitISR>
 80041d2:	2300      	movs	r3, #0
 80041d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f383 8811 	msr	BASEPRI, r3
    }
 80041dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <vPortSetupTimerInterrupt+0x34>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <vPortSetupTimerInterrupt+0x38>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <vPortSetupTimerInterrupt+0x3c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0a      	ldr	r2, [pc, #40]	; (800422c <vPortSetupTimerInterrupt+0x40>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	4a09      	ldr	r2, [pc, #36]	; (8004230 <vPortSetupTimerInterrupt+0x44>)
 800420a:	3b01      	subs	r3, #1
 800420c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <vPortSetupTimerInterrupt+0x34>)
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000e010 	.word	0xe000e010
 8004224:	e000e018 	.word	0xe000e018
 8004228:	20000000 	.word	0x20000000
 800422c:	10624dd3 	.word	0x10624dd3
 8004230:	e000e014 	.word	0xe000e014

08004234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004244 <vPortEnableVFP+0x10>
 8004238:	6801      	ldr	r1, [r0, #0]
 800423a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800423e:	6001      	str	r1, [r0, #0]
 8004240:	4770      	bx	lr
 8004242:	0000      	.short	0x0000
 8004244:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop

0800424c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004252:	f3ef 8305 	mrs	r3, IPSR
 8004256:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b0f      	cmp	r3, #15
 800425c:	d914      	bls.n	8004288 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <vPortValidateInterruptPriority+0x70>)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <vPortValidateInterruptPriority+0x74>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	7afa      	ldrb	r2, [r7, #11]
 800426e:	429a      	cmp	r2, r3
 8004270:	d20a      	bcs.n	8004288 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	607b      	str	r3, [r7, #4]
    }
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <vPortValidateInterruptPriority+0x78>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <vPortValidateInterruptPriority+0x7c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d90a      	bls.n	80042ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	603b      	str	r3, [r7, #0]
    }
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <vPortValidateInterruptPriority+0x60>
    }
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e3f0 	.word	0xe000e3f0
 80042c0:	20000268 	.word	0x20000268
 80042c4:	e000ed0c 	.word	0xe000ed0c
 80042c8:	2000026c 	.word	0x2000026c

080042cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80042d8:	f7fe fd44 	bl	8002d64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042dc:	4b65      	ldr	r3, [pc, #404]	; (8004474 <pvPortMalloc+0x1a8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042e4:	f000 f934 	bl	8004550 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042e8:	4b63      	ldr	r3, [pc, #396]	; (8004478 <pvPortMalloc+0x1ac>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 80a7 	bne.w	8004444 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02d      	beq.n	8004358 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80042fc:	2208      	movs	r2, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d227      	bcs.n	8004358 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004308:	2208      	movs	r2, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	2b00      	cmp	r3, #0
 8004318:	d021      	beq.n	800435e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f023 0307 	bic.w	r3, r3, #7
 8004320:	3308      	adds	r3, #8
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d214      	bcs.n	8004352 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	3308      	adds	r3, #8
 8004330:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <pvPortMalloc+0x92>
        __asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	617b      	str	r3, [r7, #20]
    }
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004356:	e002      	b.n	800435e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	607b      	str	r3, [r7, #4]
 800435c:	e000      	b.n	8004360 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800435e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d06e      	beq.n	8004444 <pvPortMalloc+0x178>
 8004366:	4b45      	ldr	r3, [pc, #276]	; (800447c <pvPortMalloc+0x1b0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d869      	bhi.n	8004444 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004370:	4b43      	ldr	r3, [pc, #268]	; (8004480 <pvPortMalloc+0x1b4>)
 8004372:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004374:	4b42      	ldr	r3, [pc, #264]	; (8004480 <pvPortMalloc+0x1b4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800437a:	e004      	b.n	8004386 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d903      	bls.n	8004398 <pvPortMalloc+0xcc>
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f1      	bne.n	800437c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004398:	4b36      	ldr	r3, [pc, #216]	; (8004474 <pvPortMalloc+0x1a8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	429a      	cmp	r2, r3
 80043a0:	d050      	beq.n	8004444 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2208      	movs	r2, #8
 80043a8:	4413      	add	r3, r2
 80043aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	2308      	movs	r3, #8
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d91f      	bls.n	8004404 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <pvPortMalloc+0x120>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	613b      	str	r3, [r7, #16]
    }
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043fe:	69b8      	ldr	r0, [r7, #24]
 8004400:	f000 f908 	bl	8004614 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <pvPortMalloc+0x1b0>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	4a1b      	ldr	r2, [pc, #108]	; (800447c <pvPortMalloc+0x1b0>)
 8004410:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <pvPortMalloc+0x1b0>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <pvPortMalloc+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d203      	bcs.n	8004426 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800441e:	4b17      	ldr	r3, [pc, #92]	; (800447c <pvPortMalloc+0x1b0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <pvPortMalloc+0x1b8>)
 8004424:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <pvPortMalloc+0x1ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	431a      	orrs	r2, r3
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <pvPortMalloc+0x1bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	4a11      	ldr	r2, [pc, #68]	; (8004488 <pvPortMalloc+0x1bc>)
 8004442:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004444:	f7fe fc9c 	bl	8002d80 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <pvPortMalloc+0x19c>
        __asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60fb      	str	r3, [r7, #12]
    }
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <pvPortMalloc+0x19a>
    return pvReturn;
 8004468:	69fb      	ldr	r3, [r7, #28]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3728      	adds	r7, #40	; 0x28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20012e78 	.word	0x20012e78
 8004478:	20012e8c 	.word	0x20012e8c
 800447c:	20012e7c 	.word	0x20012e7c
 8004480:	20012e70 	.word	0x20012e70
 8004484:	20012e80 	.word	0x20012e80
 8004488:	20012e84 	.word	0x20012e84

0800448c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d04d      	beq.n	800453a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800449e:	2308      	movs	r3, #8
 80044a0:	425b      	negs	r3, r3
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4413      	add	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <vPortFree+0xb8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <vPortFree+0x44>
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60fb      	str	r3, [r7, #12]
    }
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <vPortFree+0x62>
        __asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60bb      	str	r3, [r7, #8]
    }
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <vPortFree+0xb8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01e      	beq.n	800453a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d11a      	bne.n	800453a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <vPortFree+0xb8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004514:	f7fe fc26 	bl	8002d64 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <vPortFree+0xbc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4413      	add	r3, r2
 8004522:	4a09      	ldr	r2, [pc, #36]	; (8004548 <vPortFree+0xbc>)
 8004524:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004526:	6938      	ldr	r0, [r7, #16]
 8004528:	f000 f874 	bl	8004614 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <vPortFree+0xc0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	4a06      	ldr	r2, [pc, #24]	; (800454c <vPortFree+0xc0>)
 8004534:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004536:	f7fe fc23 	bl	8002d80 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20012e8c 	.word	0x20012e8c
 8004548:	20012e7c 	.word	0x20012e7c
 800454c:	20012e88 	.word	0x20012e88

08004550 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004556:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800455a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800455c:	4b27      	ldr	r3, [pc, #156]	; (80045fc <prvHeapInit+0xac>)
 800455e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3307      	adds	r3, #7
 800456e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <prvHeapInit+0xac>)
 8004580:	4413      	add	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <prvHeapInit+0xb0>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <prvHeapInit+0xb0>)
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4413      	add	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800459c:	2208      	movs	r2, #8
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0307 	bic.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <prvHeapInit+0xb4>)
 80045b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <prvHeapInit+0xb4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <prvHeapInit+0xb4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	1ad2      	subs	r2, r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <prvHeapInit+0xb4>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <prvHeapInit+0xb8>)
 80045de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a09      	ldr	r2, [pc, #36]	; (800460c <prvHeapInit+0xbc>)
 80045e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <prvHeapInit+0xc0>)
 80045ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000270 	.word	0x20000270
 8004600:	20012e70 	.word	0x20012e70
 8004604:	20012e78 	.word	0x20012e78
 8004608:	20012e80 	.word	0x20012e80
 800460c:	20012e7c 	.word	0x20012e7c
 8004610:	20012e8c 	.word	0x20012e8c

08004614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800461c:	4b28      	ldr	r3, [pc, #160]	; (80046c0 <prvInsertBlockIntoFreeList+0xac>)
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e002      	b.n	8004628 <prvInsertBlockIntoFreeList+0x14>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	d8f7      	bhi.n	8004622 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	4413      	add	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d108      	bne.n	8004656 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	441a      	add	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d118      	bne.n	800469c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d00d      	beq.n	8004692 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	441a      	add	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e008      	b.n	80046a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e003      	b.n	80046a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d002      	beq.n	80046b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20012e70 	.word	0x20012e70
 80046c4:	20012e78 	.word	0x20012e78

080046c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046cc:	4803      	ldr	r0, [pc, #12]	; (80046dc <_cbSendSystemDesc+0x14>)
 80046ce:	f002 f8a1 	bl	8006814 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046d2:	4803      	ldr	r0, [pc, #12]	; (80046e0 <_cbSendSystemDesc+0x18>)
 80046d4:	f002 f89e 	bl	8006814 <SEGGER_SYSVIEW_SendSysDesc>
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	08007910 	.word	0x08007910
 80046e0:	08007954 	.word	0x08007954

080046e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <SEGGER_SYSVIEW_Conf+0x20>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <SEGGER_SYSVIEW_Conf+0x20>)
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <SEGGER_SYSVIEW_Conf+0x24>)
 80046f2:	4a06      	ldr	r2, [pc, #24]	; (800470c <SEGGER_SYSVIEW_Conf+0x28>)
 80046f4:	f001 fc0a 	bl	8005f0c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80046f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80046fc:	f001 fc4a 	bl	8005f94 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004700:	bf00      	nop
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20000000 	.word	0x20000000
 8004708:	080046c9 	.word	0x080046c9
 800470c:	080079f4 	.word	0x080079f4

08004710 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004712:	b085      	sub	sp, #20
 8004714:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
 800471a:	e033      	b.n	8004784 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800471c:	491e      	ldr	r1, [pc, #120]	; (8004798 <_cbSendTaskList+0x88>)
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	491a      	ldr	r1, [pc, #104]	; (8004798 <_cbSendTaskList+0x88>)
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3304      	adds	r3, #4
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	4c16      	ldr	r4, [pc, #88]	; (8004798 <_cbSendTaskList+0x88>)
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4423      	add	r3, r4
 800474c:	3308      	adds	r3, #8
 800474e:	681c      	ldr	r4, [r3, #0]
 8004750:	4d11      	ldr	r5, [pc, #68]	; (8004798 <_cbSendTaskList+0x88>)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	442b      	add	r3, r5
 800475e:	330c      	adds	r3, #12
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	4e0d      	ldr	r6, [pc, #52]	; (8004798 <_cbSendTaskList+0x88>)
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4433      	add	r3, r6
 8004770:	3310      	adds	r3, #16
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	462b      	mov	r3, r5
 8004778:	4622      	mov	r2, r4
 800477a:	f000 f8bd 	bl	80048f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3301      	adds	r3, #1
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <_cbSendTaskList+0x8c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d3c6      	bcc.n	800471c <_cbSendTaskList+0xc>
  }
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004798:	20012e90 	.word	0x20012e90
 800479c:	20012f30 	.word	0x20012f30

080047a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80047a8:	f7fe fb8c 	bl	8002ec4 <xTaskGetTickCountFromISR>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2200      	movs	r2, #0
 80047b0:	469a      	mov	sl, r3
 80047b2:	4693      	mov	fp, r2
 80047b4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80047b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	f04f 0a00 	mov.w	sl, #0
 80047c4:	f04f 0b00 	mov.w	fp, #0
 80047c8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047cc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047d0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047d4:	4652      	mov	r2, sl
 80047d6:	465b      	mov	r3, fp
 80047d8:	1a14      	subs	r4, r2, r0
 80047da:	eb63 0501 	sbc.w	r5, r3, r1
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	00ab      	lsls	r3, r5, #2
 80047e8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80047ec:	00a2      	lsls	r2, r4, #2
 80047ee:	4614      	mov	r4, r2
 80047f0:	461d      	mov	r5, r3
 80047f2:	eb14 0800 	adds.w	r8, r4, r0
 80047f6:	eb45 0901 	adc.w	r9, r5, r1
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480e:	4690      	mov	r8, r2
 8004810:	4699      	mov	r9, r3
 8004812:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004816:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004828 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004836:	2205      	movs	r2, #5
 8004838:	492b      	ldr	r1, [pc, #172]	; (80048e8 <SYSVIEW_AddTask+0xc0>)
 800483a:	68b8      	ldr	r0, [r7, #8]
 800483c:	f002 fbaa 	bl	8006f94 <memcmp>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04b      	beq.n	80048de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004846:	4b29      	ldr	r3, [pc, #164]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d903      	bls.n	8004856 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800484e:	4828      	ldr	r0, [pc, #160]	; (80048f0 <SYSVIEW_AddTask+0xc8>)
 8004850:	f002 faf2 	bl	8006e38 <SEGGER_SYSVIEW_Warn>
    return;
 8004854:	e044      	b.n	80048e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004856:	4b25      	ldr	r3, [pc, #148]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4926      	ldr	r1, [pc, #152]	; (80048f4 <SYSVIEW_AddTask+0xcc>)
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4921      	ldr	r1, [pc, #132]	; (80048f4 <SYSVIEW_AddTask+0xcc>)
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	3304      	adds	r3, #4
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	491b      	ldr	r1, [pc, #108]	; (80048f4 <SYSVIEW_AddTask+0xcc>)
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3308      	adds	r3, #8
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4916      	ldr	r1, [pc, #88]	; (80048f4 <SYSVIEW_AddTask+0xcc>)
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	330c      	adds	r3, #12
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4910      	ldr	r1, [pc, #64]	; (80048f4 <SYSVIEW_AddTask+0xcc>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3310      	adds	r3, #16
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <SYSVIEW_AddTask+0xc4>)
 80048ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f80e 	bl	80048f8 <SYSVIEW_SendTaskInfo>
 80048dc:	e000      	b.n	80048e0 <SYSVIEW_AddTask+0xb8>
    return;
 80048de:	bf00      	nop

}
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	08007964 	.word	0x08007964
 80048ec:	20012f30 	.word	0x20012f30
 80048f0:	0800796c 	.word	0x0800796c
 80048f4:	20012e90 	.word	0x20012e90

080048f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004906:	f107 0314 	add.w	r3, r7, #20
 800490a:	2214      	movs	r2, #20
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f002 fb5e 	bl	8006fd0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004928:	f107 0314 	add.w	r3, r7, #20
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fe79 	bl	8006624 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004932:	bf00      	nop
 8004934:	3728      	adds	r7, #40	; 0x28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <__NVIC_EnableIRQ>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	; (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_SetPriority>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db0a      	blt.n	80049a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	490c      	ldr	r1, [pc, #48]	; (80049c4 <__NVIC_SetPriority+0x4c>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	440b      	add	r3, r1
 800499c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049a0:	e00a      	b.n	80049b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4908      	ldr	r1, [pc, #32]	; (80049c8 <__NVIC_SetPriority+0x50>)
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	3b04      	subs	r3, #4
 80049b0:	0112      	lsls	r2, r2, #4
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	440b      	add	r3, r1
 80049b6:	761a      	strb	r2, [r3, #24]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000e100 	.word	0xe000e100
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80049d2:	f002 fa8d 	bl	8006ef0 <SEGGER_SYSVIEW_IsStarted>
 80049d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80049de:	f001 fca5 	bl	800632c <SEGGER_SYSVIEW_Start>
  }
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <_cbOnUARTRx+0x3c>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d806      	bhi.n	8004a0c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80049fe:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <_cbOnUARTRx+0x3c>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <_cbOnUARTRx+0x3c>)
 8004a08:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004a0a:	e009      	b.n	8004a20 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004a0c:	f7ff ffde 	bl	80049cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_cbOnUARTRx+0x3c>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4618      	mov	r0, r3
 8004a16:	1dfb      	adds	r3, r7, #7
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f000 fb9a 	bl	8005154 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004a20:	bf00      	nop
}
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000014 	.word	0x20000014

08004a2c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004a34:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <_cbOnUARTTx+0x5c>)
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d80f      	bhi.n	8004a5c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <_cbOnUARTTx+0x5c>)
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <_cbOnUARTTx+0x60>)
 8004a44:	5c9a      	ldrb	r2, [r3, r2]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <_cbOnUARTTx+0x5c>)
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <_cbOnUARTTx+0x5c>)
 8004a54:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004a5a:	e00f      	b.n	8004a7c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <_cbOnUARTTx+0x5c>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fa19 	bl	8004e9c <SEGGER_RTT_ReadUpBufferNoLock>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da02      	bge.n	8004a7a <_cbOnUARTTx+0x4e>
    r = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e000      	b.n	8004a7c <_cbOnUARTTx+0x50>
  }
Done:
 8004a7a:	bf00      	nop
  return r;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000014 	.word	0x20000014
 8004a8c:	080079fc 	.word	0x080079fc

08004a90 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004a98:	4a04      	ldr	r2, [pc, #16]	; (8004aac <SEGGER_UART_init+0x1c>)
 8004a9a:	4905      	ldr	r1, [pc, #20]	; (8004ab0 <SEGGER_UART_init+0x20>)
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f863 	bl	8004b68 <HIF_UART_Init>
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	080049ed 	.word	0x080049ed
 8004ab0:	08004a2d 	.word	0x08004a2d

08004ab4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004aba:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <USART2_IRQHandler+0x80>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004aca:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <USART2_IRQHandler+0x84>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 030b 	and.w	r3, r3, #11
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d108      	bne.n	8004aee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004adc:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <USART2_IRQHandler+0x88>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004ae4:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <USART2_IRQHandler+0x88>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	79fa      	ldrb	r2, [r7, #7]
 8004aea:	4610      	mov	r0, r2
 8004aec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01a      	beq.n	8004b2e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <USART2_IRQHandler+0x8c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <USART2_IRQHandler+0x8c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	1dfa      	adds	r2, r7, #7
 8004b06:	4610      	mov	r0, r2
 8004b08:	4798      	blx	r3
 8004b0a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <USART2_IRQHandler+0x90>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <USART2_IRQHandler+0x90>)
 8004b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e006      	b.n	8004b2e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004b20:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <USART2_IRQHandler+0x80>)
 8004b22:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004b24:	79fa      	ldrb	r2, [r7, #7]
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <USART2_IRQHandler+0x84>)
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e000      	b.n	8004b2e <USART2_IRQHandler+0x7a>
      return;
 8004b2c:	bf00      	nop
    }
  }
}
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40004400 	.word	0x40004400
 8004b38:	40004404 	.word	0x40004404
 8004b3c:	20012f34 	.word	0x20012f34
 8004b40:	20012f38 	.word	0x20012f38
 8004b44:	4000440c 	.word	0x4000440c

08004b48 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	4000440c 	.word	0x4000440c

08004b68 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b74:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <HIF_UART_Init+0xc8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2d      	ldr	r2, [pc, #180]	; (8004c30 <HIF_UART_Init+0xc8>)
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004b80:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <HIF_UART_Init+0xcc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2b      	ldr	r2, [pc, #172]	; (8004c34 <HIF_UART_Init+0xcc>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004b8c:	4b2a      	ldr	r3, [pc, #168]	; (8004c38 <HIF_UART_Init+0xd0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b98:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004ba0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004ba2:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <HIF_UART_Init+0xd0>)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HIF_UART_Init+0xd4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004bbc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004bbe:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <HIF_UART_Init+0xd4>)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HIF_UART_Init+0xd8>)
 8004bc6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004bca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HIF_UART_Init+0xdc>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004bd2:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HIF_UART_Init+0xe0>)
 8004bd4:	2280      	movs	r2, #128	; 0x80
 8004bd6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004bde:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <HIF_UART_Init+0xe4>)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d302      	bcc.n	8004bfe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004bf8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004bfc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	4a11      	ldr	r2, [pc, #68]	; (8004c50 <HIF_UART_Init+0xe8>)
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004c0e:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <HIF_UART_Init+0xec>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004c14:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <HIF_UART_Init+0xf0>)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004c1a:	2106      	movs	r1, #6
 8004c1c:	2026      	movs	r0, #38	; 0x26
 8004c1e:	f7ff feab 	bl	8004978 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004c22:	2026      	movs	r0, #38	; 0x26
 8004c24:	f7ff fe8a 	bl	800493c <__NVIC_EnableIRQ>
}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023840 	.word	0x40023840
 8004c34:	40023830 	.word	0x40023830
 8004c38:	40020020 	.word	0x40020020
 8004c3c:	40020000 	.word	0x40020000
 8004c40:	4000440c 	.word	0x4000440c
 8004c44:	40004410 	.word	0x40004410
 8004c48:	40004414 	.word	0x40004414
 8004c4c:	0501bd00 	.word	0x0501bd00
 8004c50:	40004408 	.word	0x40004408
 8004c54:	20012f34 	.word	0x20012f34
 8004c58:	20012f38 	.word	0x20012f38

08004c5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <_DoInit+0x98>)
 8004c64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2203      	movs	r2, #3
 8004c70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <_DoInit+0x9c>)
 8004c76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a20      	ldr	r2, [pc, #128]	; (8004cfc <_DoInit+0xa0>)
 8004c7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <_DoInit+0x9c>)
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <_DoInit+0xa4>)
 8004ca2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3307      	adds	r3, #7
 8004cc0:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <_DoInit+0xa8>)
 8004cc2:	6810      	ldr	r0, [r2, #0]
 8004cc4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cc6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <_DoInit+0xac>)
 8004cce:	6810      	ldr	r0, [r2, #0]
 8004cd0:	6018      	str	r0, [r3, #0]
 8004cd2:	8891      	ldrh	r1, [r2, #4]
 8004cd4:	7992      	ldrb	r2, [r2, #6]
 8004cd6:	8099      	strh	r1, [r3, #4]
 8004cd8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cda:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ce4:	f3bf 8f5f 	dmb	sy
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20012f3c 	.word	0x20012f3c
 8004cf8:	080079bc 	.word	0x080079bc
 8004cfc:	20012fe4 	.word	0x20012fe4
 8004d00:	200133e4 	.word	0x200133e4
 8004d04:	080079c8 	.word	0x080079c8
 8004d08:	080079cc 	.word	0x080079cc

08004d0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d905      	bls.n	8004d3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3a:	e007      	b.n	8004d4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	1acb      	subs	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	4293      	cmp	r3, r2
 8004d58:	bf28      	it	cs
 8004d5a:	4613      	movcs	r3, r2
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bf28      	it	cs
 8004d66:	4613      	movcs	r3, r2
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f002 f91b 	bl	8006fb4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d7e:	6a3a      	ldr	r2, [r7, #32]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	4413      	add	r3, r2
 8004d84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	4413      	add	r3, r2
 8004d8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	4413      	add	r3, r2
 8004d9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d101      	bne.n	8004dac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1b2      	bne.n	8004d22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3728      	adds	r7, #40	; 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b088      	sub	sp, #32
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d911      	bls.n	8004e0e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	6938      	ldr	r0, [r7, #16]
 8004dfa:	f002 f8db 	bl	8006fb4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dfe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	441a      	add	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e0c:	e01f      	b.n	8004e4e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	6938      	ldr	r0, [r7, #16]
 8004e22:	f002 f8c7 	bl	8006fb4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	4413      	add	r3, r2
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6938      	ldr	r0, [r7, #16]
 8004e40:	f002 f8b8 	bl	8006fb4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	60da      	str	r2, [r3, #12]
}
 8004e4e:	bf00      	nop
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e56:	b480      	push	{r7}
 8004e58:	b087      	sub	sp, #28
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d808      	bhi.n	8004e84 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e004      	b.n	8004e8e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e8e:	697b      	ldr	r3, [r7, #20]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	; 0x30
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004ea8:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004eb6:	f7ff fed1 	bl	8004c5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4a37      	ldr	r2, [pc, #220]	; (8004fa4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ec8:	4413      	add	r3, r2
 8004eca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004edc:	2300      	movs	r3, #0
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d92b      	bls.n	8004f40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bf28      	it	cs
 8004efa:	4613      	movcs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	4413      	add	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	6939      	ldr	r1, [r7, #16]
 8004f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0e:	f002 f851 	bl	8006fb4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	4413      	add	r3, r2
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d101      	bne.n	8004f40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bf28      	it	cs
 8004f50:	4613      	movcs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d019      	beq.n	8004f8e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	4413      	add	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	6939      	ldr	r1, [r7, #16]
 8004f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6a:	f002 f823 	bl	8006fb4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	4413      	add	r3, r2
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20012f3c 	.word	0x20012f3c

08004fa8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fb4:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fc2:	f7ff fe4b 	bl	8004c5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	3360      	adds	r3, #96	; 0x60
 8004fd2:	4a37      	ldr	r2, [pc, #220]	; (80050b0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fd4:	4413      	add	r3, r2
 8004fd6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d92b      	bls.n	800504c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4293      	cmp	r3, r2
 8005004:	bf28      	it	cs
 8005006:	4613      	movcs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	4413      	add	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	6939      	ldr	r1, [r7, #16]
 8005018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800501a:	f001 ffcb 	bl	8006fb4 <memcpy>
    NumBytesRead += NumBytesRem;
 800501e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4413      	add	r3, r2
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	429a      	cmp	r2, r3
 8005046:	d101      	bne.n	800504c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005048:	2300      	movs	r3, #0
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4293      	cmp	r3, r2
 800505a:	bf28      	it	cs
 800505c:	4613      	movcs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d019      	beq.n	800509a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	4413      	add	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	6939      	ldr	r1, [r7, #16]
 8005074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005076:	f001 ff9d 	bl	8006fb4 <memcpy>
    NumBytesRead += NumBytesRem;
 800507a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3730      	adds	r7, #48	; 0x30
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20012f3c 	.word	0x20012f3c

080050b4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	3360      	adds	r3, #96	; 0x60
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80050d2:	4413      	add	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d029      	beq.n	8005132 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d82e      	bhi.n	8005140 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d013      	beq.n	8005112 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80050ea:	e029      	b.n	8005140 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050ec:	6978      	ldr	r0, [r7, #20]
 80050ee:	f7ff feb2 	bl	8004e56 <_GetAvailWriteSpace>
 80050f2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d202      	bcs.n	8005102 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005100:	e021      	b.n	8005146 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	6978      	ldr	r0, [r7, #20]
 800510c:	f7ff fe5b 	bl	8004dc6 <_WriteNoCheck>
    break;
 8005110:	e019      	b.n	8005146 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f7ff fe9f 	bl	8004e56 <_GetAvailWriteSpace>
 8005118:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4293      	cmp	r3, r2
 8005120:	bf28      	it	cs
 8005122:	4613      	movcs	r3, r2
 8005124:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	69b9      	ldr	r1, [r7, #24]
 800512a:	6978      	ldr	r0, [r7, #20]
 800512c:	f7ff fe4b 	bl	8004dc6 <_WriteNoCheck>
    break;
 8005130:	e009      	b.n	8005146 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	6978      	ldr	r0, [r7, #20]
 8005138:	f7ff fde8 	bl	8004d0c <_WriteBlocking>
 800513c:	61f8      	str	r0, [r7, #28]
    break;
 800513e:	e002      	b.n	8005146 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
    break;
 8005144:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005146:	69fb      	ldr	r3, [r7, #28]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20012f3c 	.word	0x20012f3c

08005154 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005160:	4b0e      	ldr	r3, [pc, #56]	; (800519c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800516e:	f7ff fd75 	bl	8004c5c <_DoInit>
  SEGGER_RTT_LOCK();
 8005172:	f3ef 8311 	mrs	r3, BASEPRI
 8005176:	f04f 0120 	mov.w	r1, #32
 800517a:	f381 8811 	msr	BASEPRI, r1
 800517e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff ff95 	bl	80050b4 <SEGGER_RTT_WriteDownBufferNoLock>
 800518a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005192:	697b      	ldr	r3, [r7, #20]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20012f3c 	.word	0x20012f3c

080051a0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051ae:	4b3d      	ldr	r3, [pc, #244]	; (80052a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80051bc:	f7ff fd4e 	bl	8004c5c <_DoInit>
  SEGGER_RTT_LOCK();
 80051c0:	f3ef 8311 	mrs	r3, BASEPRI
 80051c4:	f04f 0120 	mov.w	r1, #32
 80051c8:	f381 8811 	msr	BASEPRI, r1
 80051cc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051ce:	4b35      	ldr	r3, [pc, #212]	; (80052a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051d0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051d6:	6939      	ldr	r1, [r7, #16]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	440b      	add	r3, r1
 80051e6:	3304      	adds	r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3301      	adds	r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	dbeb      	blt.n	80051d6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80051fe:	e000      	b.n	8005202 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005200:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	429a      	cmp	r2, r3
 800520a:	da3f      	bge.n	800528c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800520c:	6939      	ldr	r1, [r7, #16]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	440b      	add	r3, r1
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005220:	6939      	ldr	r1, [r7, #16]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	4613      	mov	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	3304      	adds	r3, #4
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005236:	6939      	ldr	r1, [r7, #16]
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	4613      	mov	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	440b      	add	r3, r1
 8005244:	3320      	adds	r3, #32
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800524a:	6939      	ldr	r1, [r7, #16]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	440b      	add	r3, r1
 8005258:	3328      	adds	r3, #40	; 0x28
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800525e:	6939      	ldr	r1, [r7, #16]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	4613      	mov	r3, r2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4413      	add	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	440b      	add	r3, r1
 800526c:	3324      	adds	r3, #36	; 0x24
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005272:	6939      	ldr	r1, [r7, #16]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	332c      	adds	r3, #44	; 0x2c
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005286:	f3bf 8f5f 	dmb	sy
 800528a:	e002      	b.n	8005292 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800528c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005290:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005298:	69fb      	ldr	r3, [r7, #28]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20012f3c 	.word	0x20012f3c

080052a8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052b6:	4b33      	ldr	r3, [pc, #204]	; (8005384 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052c4:	f7ff fcca 	bl	8004c5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052c8:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052ca:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	461a      	mov	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d24d      	bcs.n	8005374 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80052d8:	f3ef 8311 	mrs	r3, BASEPRI
 80052dc:	f04f 0120 	mov.w	r1, #32
 80052e0:	f381 8811 	msr	BASEPRI, r1
 80052e4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d031      	beq.n	8005350 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	440b      	add	r3, r1
 80052fa:	3360      	adds	r3, #96	; 0x60
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4613      	mov	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4413      	add	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	440b      	add	r3, r1
 800530e:	3364      	adds	r3, #100	; 0x64
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005314:	6979      	ldr	r1, [r7, #20]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	440b      	add	r3, r1
 8005322:	3368      	adds	r3, #104	; 0x68
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005328:	6979      	ldr	r1, [r7, #20]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	440b      	add	r3, r1
 8005336:	3370      	adds	r3, #112	; 0x70
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800533c:	6979      	ldr	r1, [r7, #20]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4613      	mov	r3, r2
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	4413      	add	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	440b      	add	r3, r1
 800534a:	336c      	adds	r3, #108	; 0x6c
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005350:	6979      	ldr	r1, [r7, #20]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	3374      	adds	r3, #116	; 0x74
 8005360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005362:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005364:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e002      	b.n	800537a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005378:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800537a:	69fb      	ldr	r3, [r7, #28]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20012f3c 	.word	0x20012f3c

08005388 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005398:	e002      	b.n	80053a0 <_EncodeStr+0x18>
    Len++;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3301      	adds	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f6      	bne.n	800539a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d901      	bls.n	80053b8 <_EncodeStr+0x30>
    Len = Limit;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2bfe      	cmp	r3, #254	; 0xfe
 80053bc:	d806      	bhi.n	80053cc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	60fa      	str	r2, [r7, #12]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e011      	b.n	80053f0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	60fa      	str	r2, [r7, #12]
 80053d2:	22ff      	movs	r2, #255	; 0xff
 80053d4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	60fa      	str	r2, [r7, #12]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	0a19      	lsrs	r1, r3, #8
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	60fa      	str	r2, [r7, #12]
 80053ec:	b2ca      	uxtb	r2, r1
 80053ee:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053f4:	e00a      	b.n	800540c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	1c53      	adds	r3, r2, #1
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	60f9      	str	r1, [r7, #12]
 8005402:	7812      	ldrb	r2, [r2, #0]
 8005404:	701a      	strb	r2, [r3, #0]
    n++;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	429a      	cmp	r2, r3
 8005412:	d3f0      	bcc.n	80053f6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005414:	68fb      	ldr	r3, [r7, #12]
}
 8005416:	4618      	mov	r0, r3
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <_HandleIncomingPacket+0xe0>)
 8005444:	7e1b      	ldrb	r3, [r3, #24]
 8005446:	4618      	mov	r0, r3
 8005448:	1cfb      	adds	r3, r7, #3
 800544a:	2201      	movs	r2, #1
 800544c:	4619      	mov	r1, r3
 800544e:	f7ff fdab 	bl	8004fa8 <SEGGER_RTT_ReadNoLock>
 8005452:	4603      	mov	r3, r0
 8005454:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dd54      	ble.n	8005506 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d032      	beq.n	80054c8 <_HandleIncomingPacket+0x8c>
 8005462:	2b80      	cmp	r3, #128	; 0x80
 8005464:	dc42      	bgt.n	80054ec <_HandleIncomingPacket+0xb0>
 8005466:	2b07      	cmp	r3, #7
 8005468:	dc16      	bgt.n	8005498 <_HandleIncomingPacket+0x5c>
 800546a:	2b00      	cmp	r3, #0
 800546c:	dd3e      	ble.n	80054ec <_HandleIncomingPacket+0xb0>
 800546e:	3b01      	subs	r3, #1
 8005470:	2b06      	cmp	r3, #6
 8005472:	d83b      	bhi.n	80054ec <_HandleIncomingPacket+0xb0>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <_HandleIncomingPacket+0x40>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	0800549f 	.word	0x0800549f
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054ab 	.word	0x080054ab
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054b7 	.word	0x080054b7
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054c3 	.word	0x080054c3
 8005498:	2b7f      	cmp	r3, #127	; 0x7f
 800549a:	d036      	beq.n	800550a <_HandleIncomingPacket+0xce>
 800549c:	e026      	b.n	80054ec <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800549e:	f000 ff45 	bl	800632c <SEGGER_SYSVIEW_Start>
      break;
 80054a2:	e037      	b.n	8005514 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80054a4:	f000 fffe 	bl	80064a4 <SEGGER_SYSVIEW_Stop>
      break;
 80054a8:	e034      	b.n	8005514 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80054aa:	f001 f9d7 	bl	800685c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80054ae:	e031      	b.n	8005514 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80054b0:	f001 f99c 	bl	80067ec <SEGGER_SYSVIEW_SendTaskList>
      break;
 80054b4:	e02e      	b.n	8005514 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80054b6:	f001 f81b 	bl	80064f0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80054ba:	e02b      	b.n	8005514 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80054bc:	f001 fc6a 	bl	8006d94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80054c0:	e028      	b.n	8005514 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80054c2:	f001 fc49 	bl	8006d58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80054c6:	e025      	b.n	8005514 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <_HandleIncomingPacket+0xe0>)
 80054ca:	7e1b      	ldrb	r3, [r3, #24]
 80054cc:	4618      	mov	r0, r3
 80054ce:	1cfb      	adds	r3, r7, #3
 80054d0:	2201      	movs	r2, #1
 80054d2:	4619      	mov	r1, r3
 80054d4:	f7ff fd68 	bl	8004fa8 <SEGGER_RTT_ReadNoLock>
 80054d8:	4603      	mov	r3, r0
 80054da:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	dd15      	ble.n	800550e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fbb7 	bl	8006c58 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054ea:	e010      	b.n	800550e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	b25b      	sxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da0e      	bge.n	8005512 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <_HandleIncomingPacket+0xe0>)
 80054f6:	7e1b      	ldrb	r3, [r3, #24]
 80054f8:	4618      	mov	r0, r3
 80054fa:	1cfb      	adds	r3, r7, #3
 80054fc:	2201      	movs	r2, #1
 80054fe:	4619      	mov	r1, r3
 8005500:	f7ff fd52 	bl	8004fa8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005504:	e005      	b.n	8005512 <_HandleIncomingPacket+0xd6>
    }
  }
 8005506:	bf00      	nop
 8005508:	e004      	b.n	8005514 <_HandleIncomingPacket+0xd8>
      break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <_HandleIncomingPacket+0xd8>
      break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <_HandleIncomingPacket+0xd8>
      break;
 8005512:	bf00      	nop
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	200143fc 	.word	0x200143fc

08005520 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005526:	2301      	movs	r3, #1
 8005528:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	3301      	adds	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005534:	4b32      	ldr	r3, [pc, #200]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	62bb      	str	r3, [r7, #40]	; 0x28
 800553a:	e00b      	b.n	8005554 <_TrySendOverflowPacket+0x34>
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	09db      	lsrs	r3, r3, #7
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	2b7f      	cmp	r3, #127	; 0x7f
 8005558:	d8f0      	bhi.n	800553c <_TrySendOverflowPacket+0x1c>
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800556a:	4b26      	ldr	r3, [pc, #152]	; (8005604 <_TrySendOverflowPacket+0xe4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005570:	4b23      	ldr	r3, [pc, #140]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	e00b      	b.n	800559c <_TrySendOverflowPacket+0x7c>
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	6279      	str	r1, [r7, #36]	; 0x24
 800558e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	09db      	lsrs	r3, r3, #7
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	2b7f      	cmp	r3, #127	; 0x7f
 80055a0:	d8f0      	bhi.n	8005584 <_TrySendOverflowPacket+0x64>
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	627a      	str	r2, [r7, #36]	; 0x24
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	4618      	mov	r0, r3
 80055b8:	1d3b      	adds	r3, r7, #4
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fa fe0c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055c8:	4603      	mov	r3, r0
 80055ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80055cc:	f7ff fabc 	bl	8004b48 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055d6:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80055dc:	4b08      	ldr	r3, [pc, #32]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	e004      	b.n	80055f4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	3301      	adds	r3, #1
 80055f0:	4a03      	ldr	r2, [pc, #12]	; (8005600 <_TrySendOverflowPacket+0xe0>)
 80055f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055f4:	693b      	ldr	r3, [r7, #16]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3730      	adds	r7, #48	; 0x30
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	200143fc 	.word	0x200143fc
 8005604:	e0001004 	.word	0xe0001004

08005608 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005614:	4b6d      	ldr	r3, [pc, #436]	; (80057cc <_SendPacket+0x1c4>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d010      	beq.n	800563e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800561c:	4b6b      	ldr	r3, [pc, #428]	; (80057cc <_SendPacket+0x1c4>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80a5 	beq.w	8005770 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005626:	4b69      	ldr	r3, [pc, #420]	; (80057cc <_SendPacket+0x1c4>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d109      	bne.n	8005642 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800562e:	f7ff ff77 	bl	8005520 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005632:	4b66      	ldr	r3, [pc, #408]	; (80057cc <_SendPacket+0x1c4>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	f040 809c 	bne.w	8005774 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800563c:	e001      	b.n	8005642 <_SendPacket+0x3a>
    goto Send;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <_SendPacket+0x3c>
Send:
 8005642:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b1f      	cmp	r3, #31
 8005648:	d809      	bhi.n	800565e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800564a:	4b60      	ldr	r3, [pc, #384]	; (80057cc <_SendPacket+0x1c4>)
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 808d 	bne.w	8005778 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b17      	cmp	r3, #23
 8005662:	d807      	bhi.n	8005674 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3b01      	subs	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e03d      	b.n	80056f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b7f      	cmp	r3, #127	; 0x7f
 8005680:	d912      	bls.n	80056a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	09da      	lsrs	r2, r3, #7
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b01      	subs	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	3a01      	subs	r2, #1
 800569a:	60fa      	str	r2, [r7, #12]
 800569c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e006      	b.n	80056b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b7f      	cmp	r3, #127	; 0x7f
 80056ba:	d912      	bls.n	80056e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	09da      	lsrs	r2, r3, #7
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	3a01      	subs	r2, #1
 80056d4:	60fa      	str	r2, [r7, #12]
 80056d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	e006      	b.n	80056f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056f0:	4b37      	ldr	r3, [pc, #220]	; (80057d0 <_SendPacket+0x1c8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056f6:	4b35      	ldr	r3, [pc, #212]	; (80057cc <_SendPacket+0x1c4>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	e00b      	b.n	8005722 <_SendPacket+0x11a>
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1c59      	adds	r1, r3, #1
 8005712:	6279      	str	r1, [r7, #36]	; 0x24
 8005714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	09db      	lsrs	r3, r3, #7
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	2b7f      	cmp	r3, #127	; 0x7f
 8005726:	d8f0      	bhi.n	800570a <_SendPacket+0x102>
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	627a      	str	r2, [r7, #36]	; 0x24
 800572e:	6a3a      	ldr	r2, [r7, #32]
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005738:	4b24      	ldr	r3, [pc, #144]	; (80057cc <_SendPacket+0x1c4>)
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	4618      	mov	r0, r3
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	461a      	mov	r2, r3
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	f7fa fd4a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800574c:	4603      	mov	r3, r0
 800574e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005750:	f7ff f9fa 	bl	8004b48 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <_SendPacket+0x1c4>)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	60d3      	str	r3, [r2, #12]
 8005760:	e00b      	b.n	800577a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005762:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <_SendPacket+0x1c4>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	3301      	adds	r3, #1
 8005768:	b2da      	uxtb	r2, r3
 800576a:	4b18      	ldr	r3, [pc, #96]	; (80057cc <_SendPacket+0x1c4>)
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e004      	b.n	800577a <_SendPacket+0x172>
    goto SendDone;
 8005770:	bf00      	nop
 8005772:	e002      	b.n	800577a <_SendPacket+0x172>
      goto SendDone;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <_SendPacket+0x172>
      goto SendDone;
 8005778:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800577a:	4b14      	ldr	r3, [pc, #80]	; (80057cc <_SendPacket+0x1c4>)
 800577c:	7e1b      	ldrb	r3, [r3, #24]
 800577e:	4619      	mov	r1, r3
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <_SendPacket+0x1cc>)
 8005782:	460b      	mov	r3, r1
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	440b      	add	r3, r1
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4413      	add	r3, r2
 800578c:	336c      	adds	r3, #108	; 0x6c
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <_SendPacket+0x1c4>)
 8005792:	7e1b      	ldrb	r3, [r3, #24]
 8005794:	4618      	mov	r0, r3
 8005796:	490f      	ldr	r1, [pc, #60]	; (80057d4 <_SendPacket+0x1cc>)
 8005798:	4603      	mov	r3, r0
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4403      	add	r3, r0
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3370      	adds	r3, #112	; 0x70
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d00b      	beq.n	80057c2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057aa:	4b08      	ldr	r3, [pc, #32]	; (80057cc <_SendPacket+0x1c4>)
 80057ac:	789b      	ldrb	r3, [r3, #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <_SendPacket+0x1c4>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057b8:	f7ff fe40 	bl	800543c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057bc:	4b03      	ldr	r3, [pc, #12]	; (80057cc <_SendPacket+0x1c4>)
 80057be:	2200      	movs	r2, #0
 80057c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057c2:	bf00      	nop
 80057c4:	3728      	adds	r7, #40	; 0x28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	200143fc 	.word	0x200143fc
 80057d0:	e0001004 	.word	0xe0001004
 80057d4:	20012f3c 	.word	0x20012f3c

080057d8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3301      	adds	r3, #1
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d80a      	bhi.n	8005808 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6051      	str	r1, [r2, #4]
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b80      	cmp	r3, #128	; 0x80
 800580e:	d15a      	bne.n	80058c6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	e00b      	b.n	800584a <_StoreChar+0x72>
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	1c59      	adds	r1, r3, #1
 800583a:	6279      	str	r1, [r7, #36]	; 0x24
 800583c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	09db      	lsrs	r3, r3, #7
 8005848:	623b      	str	r3, [r7, #32]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	2b7f      	cmp	r3, #127	; 0x7f
 800584e:	d8f0      	bhi.n	8005832 <_StoreChar+0x5a>
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	627a      	str	r2, [r7, #36]	; 0x24
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e00b      	b.n	8005882 <_StoreChar+0xaa>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	61f9      	str	r1, [r7, #28]
 8005874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b7f      	cmp	r3, #127	; 0x7f
 8005886:	d8f0      	bhi.n	800586a <_StoreChar+0x92>
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	61fa      	str	r2, [r7, #28]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	221a      	movs	r2, #26
 800589e:	6939      	ldr	r1, [r7, #16]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff feb1 	bl	8005608 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fdb9 	bl	8005422 <_PreparePacket>
 80058b0:	4602      	mov	r2, r0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	611a      	str	r2, [r3, #16]
  }
}
 80058c6:	bf00      	nop
 80058c8:	3728      	adds	r7, #40	; 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80058e2:	2301      	movs	r3, #1
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80058e6:	2301      	movs	r3, #1
 80058e8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058ea:	e007      	b.n	80058fc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	623b      	str	r3, [r7, #32]
    Width++;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3301      	adds	r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	d2f3      	bcs.n	80058ec <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	d901      	bls.n	8005910 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d11f      	bne.n	800595a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01c      	beq.n	800595a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <_PrintUnsigned+0x66>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <_PrintUnsigned+0x66>
        c = '0';
 8005930:	2330      	movs	r3, #48	; 0x30
 8005932:	76fb      	strb	r3, [r7, #27]
 8005934:	e001      	b.n	800593a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005936:	2320      	movs	r3, #32
 8005938:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800593a:	e007      	b.n	800594c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	3b01      	subs	r3, #1
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005942:	7efb      	ldrb	r3, [r7, #27]
 8005944:	4619      	mov	r1, r3
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff ff46 	bl	80057d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <_PrintUnsigned+0x8a>
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	429a      	cmp	r2, r3
 8005958:	d3f0      	bcc.n	800593c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d903      	bls.n	8005968 <_PrintUnsigned+0x98>
      NumDigits--;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	3b01      	subs	r3, #1
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	e009      	b.n	800597c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d200      	bcs.n	800597c <_PrintUnsigned+0xac>
        break;
 800597a:	e005      	b.n	8005988 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005986:	e7e8      	b.n	800595a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059a0:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <_PrintUnsigned+0x128>)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4413      	add	r3, r2
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff ff14 	bl	80057d8 <_StoreChar>
    Digit /= Base;
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e3      	bne.n	8005988 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d011      	beq.n	80059ee <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00e      	beq.n	80059ee <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059d0:	e006      	b.n	80059e0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	3b01      	subs	r3, #1
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80059d8:	2120      	movs	r1, #32
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff fefc 	bl	80057d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <_PrintUnsigned+0x11e>
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3f1      	bcc.n	80059d2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80059ee:	bf00      	nop
 80059f0:	3728      	adds	r7, #40	; 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	08007a0c 	.word	0x08007a0c

080059fc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfb8      	it	lt
 8005a10:	425b      	neglt	r3, r3
 8005a12:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a18:	e007      	b.n	8005a2a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a22:	613b      	str	r3, [r7, #16]
    Width++;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3301      	adds	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	daf3      	bge.n	8005a1a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d901      	bls.n	8005a3e <_PrintInt+0x42>
    Width = NumDigits;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <_PrintInt+0x5e>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	db04      	blt.n	8005a54 <_PrintInt+0x58>
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <_PrintInt+0x5e>
    FieldWidth--;
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <_PrintInt+0x6e>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <_PrintInt+0x9c>
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d111      	bne.n	8005a98 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a7a:	e006      	b.n	8005a8a <_PrintInt+0x8e>
        FieldWidth--;
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a82:	2120      	movs	r1, #32
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff fea7 	bl	80057d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <_PrintInt+0x9c>
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d3f1      	bcc.n	8005a7c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	da07      	bge.n	8005aae <_PrintInt+0xb2>
    v = -v;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005aa4:	212d      	movs	r1, #45	; 0x2d
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fe96 	bl	80057d8 <_StoreChar>
 8005aac:	e008      	b.n	8005ac0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005ab8:	212b      	movs	r1, #43	; 0x2b
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff fe8c 	bl	80057d8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d019      	beq.n	8005afe <_PrintInt+0x102>
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d114      	bne.n	8005afe <_PrintInt+0x102>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d111      	bne.n	8005afe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ae0:	e006      	b.n	8005af0 <_PrintInt+0xf4>
        FieldWidth--;
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005ae8:	2130      	movs	r1, #48	; 0x30
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fe74 	bl	80057d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <_PrintInt+0x102>
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3f1      	bcc.n	8005ae2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff fedf 	bl	80058d0 <_PrintUnsigned>
}
 8005b12:	bf00      	nop
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b098      	sub	sp, #96	; 0x60
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b28:	f3ef 8311 	mrs	r3, BASEPRI
 8005b2c:	f04f 0120 	mov.w	r1, #32
 8005b30:	f381 8811 	msr	BASEPRI, r1
 8005b34:	633b      	str	r3, [r7, #48]	; 0x30
 8005b36:	48b7      	ldr	r0, [pc, #732]	; (8005e14 <_VPrintTarget+0x2f8>)
 8005b38:	f7ff fc73 	bl	8005422 <_PreparePacket>
 8005b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b3e:	4bb5      	ldr	r3, [pc, #724]	; (8005e14 <_VPrintTarget+0x2f8>)
 8005b40:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8183 	beq.w	8005e72 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b70:	2b25      	cmp	r3, #37	; 0x25
 8005b72:	f040 8170 	bne.w	8005e56 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b76:	2300      	movs	r3, #0
 8005b78:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b8a:	3b23      	subs	r3, #35	; 0x23
 8005b8c:	2b0d      	cmp	r3, #13
 8005b8e:	d83f      	bhi.n	8005c10 <_VPrintTarget+0xf4>
 8005b90:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <_VPrintTarget+0x7c>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005c11 	.word	0x08005c11
 8005ba0:	08005c11 	.word	0x08005c11
 8005ba4:	08005c11 	.word	0x08005c11
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005c11 	.word	0x08005c11
 8005bb0:	08005c11 	.word	0x08005c11
 8005bb4:	08005c11 	.word	0x08005c11
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005c11 	.word	0x08005c11
 8005bc8:	08005c11 	.word	0x08005c11
 8005bcc:	08005be1 	.word	0x08005be1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e01a      	b.n	8005c16 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be2:	f043 0302 	orr.w	r3, r3, #2
 8005be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e012      	b.n	8005c16 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf2:	f043 0304 	orr.w	r3, r3, #4
 8005bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e00a      	b.n	8005c16 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c02:	f043 0308 	orr.w	r3, r3, #8
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	e002      	b.n	8005c16 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c10:	2300      	movs	r3, #0
 8005c12:	653b      	str	r3, [r7, #80]	; 0x50
 8005c14:	bf00      	nop
        }
      } while (v);
 8005c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1b0      	bne.n	8005b7e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c2e:	d912      	bls.n	8005c56 <_VPrintTarget+0x13a>
 8005c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c34:	2b39      	cmp	r3, #57	; 0x39
 8005c36:	d80e      	bhi.n	8005c56 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c4e:	4413      	add	r3, r2
 8005c50:	3b30      	subs	r3, #48	; 0x30
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c54:	e7e4      	b.n	8005c20 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c56:	2300      	movs	r3, #0
 8005c58:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c66:	2b2e      	cmp	r3, #46	; 0x2e
 8005c68:	d11d      	bne.n	8005ca6 <_VPrintTarget+0x18a>
        sFormat++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c7e:	d912      	bls.n	8005ca6 <_VPrintTarget+0x18a>
 8005c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c84:	2b39      	cmp	r3, #57	; 0x39
 8005c86:	d80e      	bhi.n	8005ca6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3b30      	subs	r3, #48	; 0x30
 8005ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005ca4:	e7e4      	b.n	8005c70 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005cae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cb2:	2b6c      	cmp	r3, #108	; 0x6c
 8005cb4:	d003      	beq.n	8005cbe <_VPrintTarget+0x1a2>
 8005cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cba:	2b68      	cmp	r3, #104	; 0x68
 8005cbc:	d107      	bne.n	8005cce <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005ccc:	e7ef      	b.n	8005cae <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005cce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd2:	2b25      	cmp	r3, #37	; 0x25
 8005cd4:	f000 80b3 	beq.w	8005e3e <_VPrintTarget+0x322>
 8005cd8:	2b25      	cmp	r3, #37	; 0x25
 8005cda:	f2c0 80b7 	blt.w	8005e4c <_VPrintTarget+0x330>
 8005cde:	2b78      	cmp	r3, #120	; 0x78
 8005ce0:	f300 80b4 	bgt.w	8005e4c <_VPrintTarget+0x330>
 8005ce4:	2b58      	cmp	r3, #88	; 0x58
 8005ce6:	f2c0 80b1 	blt.w	8005e4c <_VPrintTarget+0x330>
 8005cea:	3b58      	subs	r3, #88	; 0x58
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	f200 80ad 	bhi.w	8005e4c <_VPrintTarget+0x330>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <_VPrintTarget+0x1dc>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005def 	.word	0x08005def
 8005cfc:	08005e4d 	.word	0x08005e4d
 8005d00:	08005e4d 	.word	0x08005e4d
 8005d04:	08005e4d 	.word	0x08005e4d
 8005d08:	08005e4d 	.word	0x08005e4d
 8005d0c:	08005e4d 	.word	0x08005e4d
 8005d10:	08005e4d 	.word	0x08005e4d
 8005d14:	08005e4d 	.word	0x08005e4d
 8005d18:	08005e4d 	.word	0x08005e4d
 8005d1c:	08005e4d 	.word	0x08005e4d
 8005d20:	08005e4d 	.word	0x08005e4d
 8005d24:	08005d7d 	.word	0x08005d7d
 8005d28:	08005da3 	.word	0x08005da3
 8005d2c:	08005e4d 	.word	0x08005e4d
 8005d30:	08005e4d 	.word	0x08005e4d
 8005d34:	08005e4d 	.word	0x08005e4d
 8005d38:	08005e4d 	.word	0x08005e4d
 8005d3c:	08005e4d 	.word	0x08005e4d
 8005d40:	08005e4d 	.word	0x08005e4d
 8005d44:	08005e4d 	.word	0x08005e4d
 8005d48:	08005e4d 	.word	0x08005e4d
 8005d4c:	08005e4d 	.word	0x08005e4d
 8005d50:	08005e4d 	.word	0x08005e4d
 8005d54:	08005e4d 	.word	0x08005e4d
 8005d58:	08005e19 	.word	0x08005e19
 8005d5c:	08005e4d 	.word	0x08005e4d
 8005d60:	08005e4d 	.word	0x08005e4d
 8005d64:	08005e4d 	.word	0x08005e4d
 8005d68:	08005e4d 	.word	0x08005e4d
 8005d6c:	08005dc9 	.word	0x08005dc9
 8005d70:	08005e4d 	.word	0x08005e4d
 8005d74:	08005e4d 	.word	0x08005e4d
 8005d78:	08005def 	.word	0x08005def
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	1d19      	adds	r1, r3, #4
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d90:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d94:	f107 0314 	add.w	r3, r7, #20
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fd1c 	bl	80057d8 <_StoreChar>
        break;
 8005da0:	e055      	b.n	8005e4e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	1d19      	adds	r1, r3, #4
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6011      	str	r1, [r2, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005db0:	f107 0014 	add.w	r0, r7, #20
 8005db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dc2:	f7ff fe1b 	bl	80059fc <_PrintInt>
        break;
 8005dc6:	e042      	b.n	8005e4e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	1d19      	adds	r1, r3, #4
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6011      	str	r1, [r2, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005dd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dd8:	f107 0014 	add.w	r0, r7, #20
 8005ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de6:	220a      	movs	r2, #10
 8005de8:	f7ff fd72 	bl	80058d0 <_PrintUnsigned>
        break;
 8005dec:	e02f      	b.n	8005e4e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	1d19      	adds	r1, r3, #4
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6011      	str	r1, [r2, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dfe:	f107 0014 	add.w	r0, r7, #20
 8005e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	f7ff fd5f 	bl	80058d0 <_PrintUnsigned>
        break;
 8005e12:	e01c      	b.n	8005e4e <_VPrintTarget+0x332>
 8005e14:	2001442c 	.word	0x2001442c
      case 'p':
        v = va_arg(*pParamList, int);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	1d19      	adds	r1, r3, #4
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e28:	f107 0014 	add.w	r0, r7, #20
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	2308      	movs	r3, #8
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2308      	movs	r3, #8
 8005e36:	2210      	movs	r2, #16
 8005e38:	f7ff fd4a 	bl	80058d0 <_PrintUnsigned>
        break;
 8005e3c:	e007      	b.n	8005e4e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e3e:	f107 0314 	add.w	r3, r7, #20
 8005e42:	2125      	movs	r1, #37	; 0x25
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fcc7 	bl	80057d8 <_StoreChar>
        break;
 8005e4a:	e000      	b.n	8005e4e <_VPrintTarget+0x332>
      default:
        break;
 8005e4c:	bf00      	nop
      }
      sFormat++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e007      	b.n	8005e66 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e5a:	f107 0314 	add.w	r3, r7, #20
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fcb9 	bl	80057d8 <_StoreChar>
    }
  } while (*sFormat);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f47f ae72 	bne.w	8005b54 <_VPrintTarget+0x38>
 8005e70:	e000      	b.n	8005e74 <_VPrintTarget+0x358>
      break;
 8005e72:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d041      	beq.n	8005efe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	643b      	str	r3, [r7, #64]	; 0x40
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8a:	e00b      	b.n	8005ea4 <_VPrintTarget+0x388>
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	6439      	str	r1, [r7, #64]	; 0x40
 8005e96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	09db      	lsrs	r3, r3, #7
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea8:	d8f0      	bhi.n	8005e8c <_VPrintTarget+0x370>
 8005eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	643a      	str	r2, [r7, #64]	; 0x40
 8005eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec2:	e00b      	b.n	8005edc <_VPrintTarget+0x3c0>
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	1c59      	adds	r1, r3, #1
 8005ecc:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	09db      	lsrs	r3, r3, #7
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee0:	d8f0      	bhi.n	8005ec4 <_VPrintTarget+0x3a8>
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	69b9      	ldr	r1, [r7, #24]
 8005ef6:	221a      	movs	r2, #26
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff fb85 	bl	8005608 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f04:	bf00      	nop
 8005f06:	3758      	adds	r7, #88	; 0x58
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f20:	4917      	ldr	r1, [pc, #92]	; (8005f80 <SEGGER_SYSVIEW_Init+0x74>)
 8005f22:	4818      	ldr	r0, [pc, #96]	; (8005f84 <SEGGER_SYSVIEW_Init+0x78>)
 8005f24:	f7ff f93c 	bl	80051a0 <SEGGER_RTT_AllocUpBuffer>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f2e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f32:	785a      	ldrb	r2, [r3, #1]
 8005f34:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f36:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f38:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f3a:	7e1b      	ldrb	r3, [r3, #24]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	2308      	movs	r3, #8
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <SEGGER_SYSVIEW_Init+0x80>)
 8005f46:	490f      	ldr	r1, [pc, #60]	; (8005f84 <SEGGER_SYSVIEW_Init+0x78>)
 8005f48:	f7ff f9ae 	bl	80052a8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f52:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <SEGGER_SYSVIEW_Init+0x84>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a0c      	ldr	r2, [pc, #48]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f58:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f5a:	4a0b      	ldr	r2, [pc, #44]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f60:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f66:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f6c:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f72:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	200133f4 	.word	0x200133f4
 8005f84:	080079d4 	.word	0x080079d4
 8005f88:	200143fc 	.word	0x200143fc
 8005f8c:	200143f4 	.word	0x200143f4
 8005f90:	e0001004 	.word	0xe0001004

08005f94 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6113      	str	r3, [r2, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	200143fc 	.word	0x200143fc

08005fb4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc0:	f04f 0120 	mov.w	r1, #32
 8005fc4:	f381 8811 	msr	BASEPRI, r1
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	4808      	ldr	r0, [pc, #32]	; (8005fec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005fcc:	f7ff fa29 	bl	8005422 <_PreparePacket>
 8005fd0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	f7ff fb16 	bl	8005608 <_SendPacket>
  RECORD_END();
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f383 8811 	msr	BASEPRI, r3
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	2001442c 	.word	0x2001442c

08005ff0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffe:	f04f 0120 	mov.w	r1, #32
 8006002:	f381 8811 	msr	BASEPRI, r1
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	4816      	ldr	r0, [pc, #88]	; (8006064 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800600a:	f7ff fa0a 	bl	8005422 <_PreparePacket>
 800600e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	e00b      	b.n	8006036 <SEGGER_SYSVIEW_RecordU32+0x46>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	61f9      	str	r1, [r7, #28]
 8006028:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	09db      	lsrs	r3, r3, #7
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b7f      	cmp	r3, #127	; 0x7f
 800603a:	d8f0      	bhi.n	800601e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	61fa      	str	r2, [r7, #28]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68f9      	ldr	r1, [r7, #12]
 8006050:	6938      	ldr	r0, [r7, #16]
 8006052:	f7ff fad9 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f383 8811 	msr	BASEPRI, r3
}
 800605c:	bf00      	nop
 800605e:	3720      	adds	r7, #32
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	2001442c 	.word	0x2001442c

08006068 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b08c      	sub	sp, #48	; 0x30
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006074:	f3ef 8311 	mrs	r3, BASEPRI
 8006078:	f04f 0120 	mov.w	r1, #32
 800607c:	f381 8811 	msr	BASEPRI, r1
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	4825      	ldr	r0, [pc, #148]	; (8006118 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006084:	f7ff f9cd 	bl	8005422 <_PreparePacket>
 8006088:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
 8006096:	e00b      	b.n	80060b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	b2da      	uxtb	r2, r3
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	1c59      	adds	r1, r3, #1
 80060a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	09db      	lsrs	r3, r3, #7
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	2b7f      	cmp	r3, #127	; 0x7f
 80060b4:	d8f0      	bhi.n	8006098 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	623b      	str	r3, [r7, #32]
 80060ce:	e00b      	b.n	80060e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	6279      	str	r1, [r7, #36]	; 0x24
 80060da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	09db      	lsrs	r3, r3, #7
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	2b7f      	cmp	r3, #127	; 0x7f
 80060ec:	d8f0      	bhi.n	80060d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	627a      	str	r2, [r7, #36]	; 0x24
 80060f4:	6a3a      	ldr	r2, [r7, #32]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69b8      	ldr	r0, [r7, #24]
 8006104:	f7ff fa80 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
 8006110:	3730      	adds	r7, #48	; 0x30
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	2001442c 	.word	0x2001442c

0800611c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	; 0x38
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800612a:	f3ef 8311 	mrs	r3, BASEPRI
 800612e:	f04f 0120 	mov.w	r1, #32
 8006132:	f381 8811 	msr	BASEPRI, r1
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	4832      	ldr	r0, [pc, #200]	; (8006204 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800613a:	f7ff f972 	bl	8005422 <_PreparePacket>
 800613e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	633b      	str	r3, [r7, #48]	; 0x30
 800614c:	e00b      	b.n	8006166 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	b2da      	uxtb	r2, r3
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	1c59      	adds	r1, r3, #1
 8006156:	6379      	str	r1, [r7, #52]	; 0x34
 8006158:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	09db      	lsrs	r3, r3, #7
 8006164:	633b      	str	r3, [r7, #48]	; 0x30
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	2b7f      	cmp	r3, #127	; 0x7f
 800616a:	d8f0      	bhi.n	800614e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	637a      	str	r2, [r7, #52]	; 0x34
 8006172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
 8006184:	e00b      	b.n	800619e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	b2da      	uxtb	r2, r3
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	09db      	lsrs	r3, r3, #7
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	2b7f      	cmp	r3, #127	; 0x7f
 80061a2:	d8f0      	bhi.n	8006186 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	623b      	str	r3, [r7, #32]
 80061bc:	e00b      	b.n	80061d6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	1c59      	adds	r1, r3, #1
 80061c6:	6279      	str	r1, [r7, #36]	; 0x24
 80061c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	2b7f      	cmp	r3, #127	; 0x7f
 80061da:	d8f0      	bhi.n	80061be <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	627a      	str	r2, [r7, #36]	; 0x24
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	6979      	ldr	r1, [r7, #20]
 80061f0:	69b8      	ldr	r0, [r7, #24]
 80061f2:	f7ff fa09 	bl	8005608 <_SendPacket>
  RECORD_END();
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f383 8811 	msr	BASEPRI, r3
}
 80061fc:	bf00      	nop
 80061fe:	3738      	adds	r7, #56	; 0x38
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	2001442c 	.word	0x2001442c

08006208 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b090      	sub	sp, #64	; 0x40
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006216:	f3ef 8311 	mrs	r3, BASEPRI
 800621a:	f04f 0120 	mov.w	r1, #32
 800621e:	f381 8811 	msr	BASEPRI, r1
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	4840      	ldr	r0, [pc, #256]	; (8006328 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006226:	f7ff f8fc 	bl	8005422 <_PreparePacket>
 800622a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	63bb      	str	r3, [r7, #56]	; 0x38
 8006238:	e00b      	b.n	8006252 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	b2da      	uxtb	r2, r3
 800623e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006240:	1c59      	adds	r1, r3, #1
 8006242:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	09db      	lsrs	r3, r3, #7
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	2b7f      	cmp	r3, #127	; 0x7f
 8006256:	d8f0      	bhi.n	800623a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800625e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	637b      	str	r3, [r7, #52]	; 0x34
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	633b      	str	r3, [r7, #48]	; 0x30
 8006270:	e00b      	b.n	800628a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	b2da      	uxtb	r2, r3
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	1c59      	adds	r1, r3, #1
 800627a:	6379      	str	r1, [r7, #52]	; 0x34
 800627c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	09db      	lsrs	r3, r3, #7
 8006288:	633b      	str	r3, [r7, #48]	; 0x30
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	2b7f      	cmp	r3, #127	; 0x7f
 800628e:	d8f0      	bhi.n	8006272 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	637a      	str	r2, [r7, #52]	; 0x34
 8006296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a8:	e00b      	b.n	80062c2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	2b7f      	cmp	r3, #127	; 0x7f
 80062c6:	d8f0      	bhi.n	80062aa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
 80062dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	e00b      	b.n	80062fa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	6279      	str	r1, [r7, #36]	; 0x24
 80062ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	2b7f      	cmp	r3, #127	; 0x7f
 80062fe:	d8f0      	bhi.n	80062e2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	627a      	str	r2, [r7, #36]	; 0x24
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	6979      	ldr	r1, [r7, #20]
 8006314:	69b8      	ldr	r0, [r7, #24]
 8006316:	f7ff f977 	bl	8005608 <_SendPacket>
  RECORD_END();
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f383 8811 	msr	BASEPRI, r3
}
 8006320:	bf00      	nop
 8006322:	3740      	adds	r7, #64	; 0x40
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	2001442c 	.word	0x2001442c

0800632c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b08c      	sub	sp, #48	; 0x30
 8006330:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006332:	4b59      	ldr	r3, [pc, #356]	; (8006498 <SEGGER_SYSVIEW_Start+0x16c>)
 8006334:	2201      	movs	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006338:	f3ef 8311 	mrs	r3, BASEPRI
 800633c:	f04f 0120 	mov.w	r1, #32
 8006340:	f381 8811 	msr	BASEPRI, r1
 8006344:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <SEGGER_SYSVIEW_Start+0x16c>)
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	220a      	movs	r2, #10
 800634c:	4953      	ldr	r1, [pc, #332]	; (800649c <SEGGER_SYSVIEW_Start+0x170>)
 800634e:	4618      	mov	r0, r3
 8006350:	f7f9 ff46 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800635a:	f7fe fbf5 	bl	8004b48 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800635e:	200a      	movs	r0, #10
 8006360:	f7ff fe28 	bl	8005fb4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006364:	f3ef 8311 	mrs	r3, BASEPRI
 8006368:	f04f 0120 	mov.w	r1, #32
 800636c:	f381 8811 	msr	BASEPRI, r1
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	484b      	ldr	r0, [pc, #300]	; (80064a0 <SEGGER_SYSVIEW_Start+0x174>)
 8006374:	f7ff f855 	bl	8005422 <_PreparePacket>
 8006378:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006382:	4b45      	ldr	r3, [pc, #276]	; (8006498 <SEGGER_SYSVIEW_Start+0x16c>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
 8006388:	e00b      	b.n	80063a2 <SEGGER_SYSVIEW_Start+0x76>
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	1c59      	adds	r1, r3, #1
 8006392:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	09db      	lsrs	r3, r3, #7
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	2b7f      	cmp	r3, #127	; 0x7f
 80063a6:	d8f0      	bhi.n	800638a <SEGGER_SYSVIEW_Start+0x5e>
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
 80063bc:	4b36      	ldr	r3, [pc, #216]	; (8006498 <SEGGER_SYSVIEW_Start+0x16c>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	623b      	str	r3, [r7, #32]
 80063c2:	e00b      	b.n	80063dc <SEGGER_SYSVIEW_Start+0xb0>
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	6279      	str	r1, [r7, #36]	; 0x24
 80063ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	09db      	lsrs	r3, r3, #7
 80063da:	623b      	str	r3, [r7, #32]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b7f      	cmp	r3, #127	; 0x7f
 80063e0:	d8f0      	bhi.n	80063c4 <SEGGER_SYSVIEW_Start+0x98>
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	627a      	str	r2, [r7, #36]	; 0x24
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	4b28      	ldr	r3, [pc, #160]	; (8006498 <SEGGER_SYSVIEW_Start+0x16c>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e00b      	b.n	8006416 <SEGGER_SYSVIEW_Start+0xea>
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	61f9      	str	r1, [r7, #28]
 8006408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	09db      	lsrs	r3, r3, #7
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b7f      	cmp	r3, #127	; 0x7f
 800641a:	d8f0      	bhi.n	80063fe <SEGGER_SYSVIEW_Start+0xd2>
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	61fa      	str	r2, [r7, #28]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	e00b      	b.n	800644e <SEGGER_SYSVIEW_Start+0x122>
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	b2da      	uxtb	r2, r3
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	1c59      	adds	r1, r3, #1
 800643e:	6179      	str	r1, [r7, #20]
 8006440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	09db      	lsrs	r3, r3, #7
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b7f      	cmp	r3, #127	; 0x7f
 8006452:	d8f0      	bhi.n	8006436 <SEGGER_SYSVIEW_Start+0x10a>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	617a      	str	r2, [r7, #20]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006464:	2218      	movs	r2, #24
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff f8cd 	bl	8005608 <_SendPacket>
      RECORD_END();
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <SEGGER_SYSVIEW_Start+0x16c>)
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <SEGGER_SYSVIEW_Start+0x16c>)
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006482:	f000 f9eb 	bl	800685c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006486:	f000 f9b1 	bl	80067ec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800648a:	f000 fc83 	bl	8006d94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800648e:	bf00      	nop
 8006490:	3730      	adds	r7, #48	; 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	200143fc 	.word	0x200143fc
 800649c:	08007a00 	.word	0x08007a00
 80064a0:	2001442c 	.word	0x2001442c

080064a4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064aa:	f3ef 8311 	mrs	r3, BASEPRI
 80064ae:	f04f 0120 	mov.w	r1, #32
 80064b2:	f381 8811 	msr	BASEPRI, r1
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	480b      	ldr	r0, [pc, #44]	; (80064e8 <SEGGER_SYSVIEW_Stop+0x44>)
 80064ba:	f7fe ffb2 	bl	8005422 <_PreparePacket>
 80064be:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <SEGGER_SYSVIEW_Stop+0x48>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064c8:	220b      	movs	r2, #11
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6838      	ldr	r0, [r7, #0]
 80064ce:	f7ff f89b 	bl	8005608 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <SEGGER_SYSVIEW_Stop+0x48>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f383 8811 	msr	BASEPRI, r3
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	2001442c 	.word	0x2001442c
 80064ec:	200143fc 	.word	0x200143fc

080064f0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064f6:	f3ef 8311 	mrs	r3, BASEPRI
 80064fa:	f04f 0120 	mov.w	r1, #32
 80064fe:	f381 8811 	msr	BASEPRI, r1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	4845      	ldr	r0, [pc, #276]	; (800661c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006506:	f7fe ff8c 	bl	8005422 <_PreparePacket>
 800650a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006514:	4b42      	ldr	r3, [pc, #264]	; (8006620 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
 800651a:	e00b      	b.n	8006534 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	b2da      	uxtb	r2, r3
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006526:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	09db      	lsrs	r3, r3, #7
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	2b7f      	cmp	r3, #127	; 0x7f
 8006538:	d8f0      	bhi.n	800651c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
 800654e:	4b34      	ldr	r3, [pc, #208]	; (8006620 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	e00b      	b.n	800656e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	6279      	str	r1, [r7, #36]	; 0x24
 8006560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b7f      	cmp	r3, #127	; 0x7f
 8006572:	d8f0      	bhi.n	8006556 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	627a      	str	r2, [r7, #36]	; 0x24
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	4b25      	ldr	r3, [pc, #148]	; (8006620 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	61f9      	str	r1, [r7, #28]
 800659a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b7f      	cmp	r3, #127	; 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	61fa      	str	r2, [r7, #28]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e00b      	b.n	80065e0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	6179      	str	r1, [r7, #20]
 80065d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	09db      	lsrs	r3, r3, #7
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b7f      	cmp	r3, #127	; 0x7f
 80065e4:	d8f0      	bhi.n	80065c8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	617a      	str	r2, [r7, #20]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065f6:	2218      	movs	r2, #24
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	68b8      	ldr	r0, [r7, #8]
 80065fc:	f7ff f804 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800660e:	4b04      	ldr	r3, [pc, #16]	; (8006620 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	4798      	blx	r3
  }
}
 8006614:	bf00      	nop
 8006616:	3730      	adds	r7, #48	; 0x30
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	2001442c 	.word	0x2001442c
 8006620:	200143fc 	.word	0x200143fc

08006624 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b092      	sub	sp, #72	; 0x48
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800662c:	f3ef 8311 	mrs	r3, BASEPRI
 8006630:	f04f 0120 	mov.w	r1, #32
 8006634:	f381 8811 	msr	BASEPRI, r1
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	486a      	ldr	r0, [pc, #424]	; (80067e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800663c:	f7fe fef1 	bl	8005422 <_PreparePacket>
 8006640:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	647b      	str	r3, [r7, #68]	; 0x44
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b66      	ldr	r3, [pc, #408]	; (80067e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	643b      	str	r3, [r7, #64]	; 0x40
 8006656:	e00b      	b.n	8006670 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665a:	b2da      	uxtb	r2, r3
 800665c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	6479      	str	r1, [r7, #68]	; 0x44
 8006662:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800666c:	09db      	lsrs	r3, r3, #7
 800666e:	643b      	str	r3, [r7, #64]	; 0x40
 8006670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006672:	2b7f      	cmp	r3, #127	; 0x7f
 8006674:	d8f0      	bhi.n	8006658 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	647a      	str	r2, [r7, #68]	; 0x44
 800667c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006684:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006690:	e00b      	b.n	80066aa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	b2da      	uxtb	r2, r3
 8006696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006698:	1c59      	adds	r1, r3, #1
 800669a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800669c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	09db      	lsrs	r3, r3, #7
 80066a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2b7f      	cmp	r3, #127	; 0x7f
 80066ae:	d8f0      	bhi.n	8006692 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	4619      	mov	r1, r3
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7fe fe5d 	bl	8005388 <_EncodeStr>
 80066ce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80066d0:	2209      	movs	r2, #9
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6938      	ldr	r0, [r7, #16]
 80066d6:	f7fe ff97 	bl	8005608 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30
 80066ee:	e00b      	b.n	8006708 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f6:	1c59      	adds	r1, r3, #1
 80066f8:	6379      	str	r1, [r7, #52]	; 0x34
 80066fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	09db      	lsrs	r3, r3, #7
 8006706:	633b      	str	r3, [r7, #48]	; 0x30
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	2b7f      	cmp	r3, #127	; 0x7f
 800670c:	d8f0      	bhi.n	80066f0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800670e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	637a      	str	r2, [r7, #52]	; 0x34
 8006714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
 8006728:	e00b      	b.n	8006742 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	b2da      	uxtb	r2, r3
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	1c59      	adds	r1, r3, #1
 8006732:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	09db      	lsrs	r3, r3, #7
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2b7f      	cmp	r3, #127	; 0x7f
 8006746:	d8f0      	bhi.n	800672a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800674e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	e00b      	b.n	800677c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	1c59      	adds	r1, r3, #1
 800676c:	6279      	str	r1, [r7, #36]	; 0x24
 800676e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	09db      	lsrs	r3, r3, #7
 800677a:	623b      	str	r3, [r7, #32]
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	2b7f      	cmp	r3, #127	; 0x7f
 8006780:	d8f0      	bhi.n	8006764 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	627a      	str	r2, [r7, #36]	; 0x24
 8006788:	6a3a      	ldr	r2, [r7, #32]
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	2300      	movs	r3, #0
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e00b      	b.n	80067b4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	1c59      	adds	r1, r3, #1
 80067a4:	61f9      	str	r1, [r7, #28]
 80067a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	09db      	lsrs	r3, r3, #7
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b7f      	cmp	r3, #127	; 0x7f
 80067b8:	d8f0      	bhi.n	800679c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	61fa      	str	r2, [r7, #28]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067ca:	2215      	movs	r2, #21
 80067cc:	68f9      	ldr	r1, [r7, #12]
 80067ce:	6938      	ldr	r0, [r7, #16]
 80067d0:	f7fe ff1a 	bl	8005608 <_SendPacket>
  RECORD_END();
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f383 8811 	msr	BASEPRI, r3
}
 80067da:	bf00      	nop
 80067dc:	3748      	adds	r7, #72	; 0x48
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	2001442c 	.word	0x2001442c
 80067e8:	200143fc 	.word	0x200143fc

080067ec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006802:	4b03      	ldr	r3, [pc, #12]	; (8006810 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4798      	blx	r3
  }
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	200143fc 	.word	0x200143fc

08006814 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800681c:	f3ef 8311 	mrs	r3, BASEPRI
 8006820:	f04f 0120 	mov.w	r1, #32
 8006824:	f381 8811 	msr	BASEPRI, r1
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	480b      	ldr	r0, [pc, #44]	; (8006858 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800682c:	f7fe fdf9 	bl	8005422 <_PreparePacket>
 8006830:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	6938      	ldr	r0, [r7, #16]
 8006838:	f7fe fda6 	bl	8005388 <_EncodeStr>
 800683c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800683e:	220e      	movs	r2, #14
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	6938      	ldr	r0, [r7, #16]
 8006844:	f7fe fee0 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f383 8811 	msr	BASEPRI, r3
}
 800684e:	bf00      	nop
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	2001442c 	.word	0x2001442c

0800685c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01a      	beq.n	80068a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800686a:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d015      	beq.n	80068a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006874:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4798      	blx	r3
 800687c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006880:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	000a      	movs	r2, r1
 8006890:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006892:	4613      	mov	r3, r2
 8006894:	461a      	mov	r2, r3
 8006896:	4621      	mov	r1, r4
 8006898:	200d      	movs	r0, #13
 800689a:	f7ff fbe5 	bl	8006068 <SEGGER_SYSVIEW_RecordU32x2>
 800689e:	e006      	b.n	80068ae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4619      	mov	r1, r3
 80068a6:	200c      	movs	r0, #12
 80068a8:	f7ff fba2 	bl	8005ff0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd90      	pop	{r4, r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200143fc 	.word	0x200143fc
 80068bc:	e0001004 	.word	0xe0001004

080068c0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068c6:	f3ef 8311 	mrs	r3, BASEPRI
 80068ca:	f04f 0120 	mov.w	r1, #32
 80068ce:	f381 8811 	msr	BASEPRI, r1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	4819      	ldr	r0, [pc, #100]	; (800693c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068d6:	f7fe fda4 	bl	8005422 <_PreparePacket>
 80068da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068e0:	4b17      	ldr	r3, [pc, #92]	; (8006940 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e00b      	b.n	800690c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	1c59      	adds	r1, r3, #1
 80068fc:	6179      	str	r1, [r7, #20]
 80068fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	09db      	lsrs	r3, r3, #7
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b7f      	cmp	r3, #127	; 0x7f
 8006910:	d8f0      	bhi.n	80068f4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	617a      	str	r2, [r7, #20]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006922:	2202      	movs	r2, #2
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	68b8      	ldr	r0, [r7, #8]
 8006928:	f7fe fe6e 	bl	8005608 <_SendPacket>
  RECORD_END();
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f383 8811 	msr	BASEPRI, r3
}
 8006932:	bf00      	nop
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	2001442c 	.word	0x2001442c
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800694a:	f3ef 8311 	mrs	r3, BASEPRI
 800694e:	f04f 0120 	mov.w	r1, #32
 8006952:	f381 8811 	msr	BASEPRI, r1
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	4807      	ldr	r0, [pc, #28]	; (8006978 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800695a:	f7fe fd62 	bl	8005422 <_PreparePacket>
 800695e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006960:	2203      	movs	r2, #3
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7fe fe4f 	bl	8005608 <_SendPacket>
  RECORD_END();
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f383 8811 	msr	BASEPRI, r3
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	2001442c 	.word	0x2001442c

0800697c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006982:	f3ef 8311 	mrs	r3, BASEPRI
 8006986:	f04f 0120 	mov.w	r1, #32
 800698a:	f381 8811 	msr	BASEPRI, r1
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	4807      	ldr	r0, [pc, #28]	; (80069b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006992:	f7fe fd46 	bl	8005422 <_PreparePacket>
 8006996:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006998:	2212      	movs	r2, #18
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6838      	ldr	r0, [r7, #0]
 800699e:	f7fe fe33 	bl	8005608 <_SendPacket>
  RECORD_END();
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f383 8811 	msr	BASEPRI, r3
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	2001442c 	.word	0x2001442c

080069b4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069ba:	f3ef 8311 	mrs	r3, BASEPRI
 80069be:	f04f 0120 	mov.w	r1, #32
 80069c2:	f381 8811 	msr	BASEPRI, r1
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	4807      	ldr	r0, [pc, #28]	; (80069e8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069ca:	f7fe fd2a 	bl	8005422 <_PreparePacket>
 80069ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80069d0:	2211      	movs	r2, #17
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6838      	ldr	r0, [r7, #0]
 80069d6:	f7fe fe17 	bl	8005608 <_SendPacket>
  RECORD_END();
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f383 8811 	msr	BASEPRI, r3
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	2001442c 	.word	0x2001442c

080069ec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069f4:	f3ef 8311 	mrs	r3, BASEPRI
 80069f8:	f04f 0120 	mov.w	r1, #32
 80069fc:	f381 8811 	msr	BASEPRI, r1
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	4819      	ldr	r0, [pc, #100]	; (8006a68 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a04:	f7fe fd0d 	bl	8005422 <_PreparePacket>
 8006a08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a0e:	4b17      	ldr	r3, [pc, #92]	; (8006a6c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e00b      	b.n	8006a3a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	61f9      	str	r1, [r7, #28]
 8006a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	09db      	lsrs	r3, r3, #7
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3e:	d8f0      	bhi.n	8006a22 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	61fa      	str	r2, [r7, #28]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a50:	2208      	movs	r2, #8
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	6938      	ldr	r0, [r7, #16]
 8006a56:	f7fe fdd7 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f383 8811 	msr	BASEPRI, r3
}
 8006a60:	bf00      	nop
 8006a62:	3720      	adds	r7, #32
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	2001442c 	.word	0x2001442c
 8006a6c:	200143fc 	.word	0x200143fc

08006a70 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a78:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7c:	f04f 0120 	mov.w	r1, #32
 8006a80:	f381 8811 	msr	BASEPRI, r1
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	4819      	ldr	r0, [pc, #100]	; (8006aec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a88:	f7fe fccb 	bl	8005422 <_PreparePacket>
 8006a8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	e00b      	b.n	8006abe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	1c59      	adds	r1, r3, #1
 8006aae:	61f9      	str	r1, [r7, #28]
 8006ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	09db      	lsrs	r3, r3, #7
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac2:	d8f0      	bhi.n	8006aa6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	61fa      	str	r2, [r7, #28]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	6938      	ldr	r0, [r7, #16]
 8006ada:	f7fe fd95 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f383 8811 	msr	BASEPRI, r3
}
 8006ae4:	bf00      	nop
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	2001442c 	.word	0x2001442c
 8006af0:	200143fc 	.word	0x200143fc

08006af4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006afc:	f3ef 8311 	mrs	r3, BASEPRI
 8006b00:	f04f 0120 	mov.w	r1, #32
 8006b04:	f381 8811 	msr	BASEPRI, r1
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	4819      	ldr	r0, [pc, #100]	; (8006b70 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b0c:	f7fe fc89 	bl	8005422 <_PreparePacket>
 8006b10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b16:	4b17      	ldr	r3, [pc, #92]	; (8006b74 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	e00b      	b.n	8006b42 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	1c59      	adds	r1, r3, #1
 8006b32:	61f9      	str	r1, [r7, #28]
 8006b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	09db      	lsrs	r3, r3, #7
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b7f      	cmp	r3, #127	; 0x7f
 8006b46:	d8f0      	bhi.n	8006b2a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	61fa      	str	r2, [r7, #28]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b58:	2206      	movs	r2, #6
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	6938      	ldr	r0, [r7, #16]
 8006b5e:	f7fe fd53 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f383 8811 	msr	BASEPRI, r3
}
 8006b68:	bf00      	nop
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	2001442c 	.word	0x2001442c
 8006b74:	200143fc 	.word	0x200143fc

08006b78 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08a      	sub	sp, #40	; 0x28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b82:	f3ef 8311 	mrs	r3, BASEPRI
 8006b86:	f04f 0120 	mov.w	r1, #32
 8006b8a:	f381 8811 	msr	BASEPRI, r1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	4827      	ldr	r0, [pc, #156]	; (8006c30 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006b92:	f7fe fc46 	bl	8005422 <_PreparePacket>
 8006b96:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b9c:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	e00b      	b.n	8006bc8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	6279      	str	r1, [r7, #36]	; 0x24
 8006bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	09db      	lsrs	r3, r3, #7
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	2b7f      	cmp	r3, #127	; 0x7f
 8006bcc:	d8f0      	bhi.n	8006bb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd4:	6a3a      	ldr	r2, [r7, #32]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e00b      	b.n	8006c00 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	61f9      	str	r1, [r7, #28]
 8006bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	09db      	lsrs	r3, r3, #7
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b7f      	cmp	r3, #127	; 0x7f
 8006c04:	d8f0      	bhi.n	8006be8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	61fa      	str	r2, [r7, #28]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c16:	2207      	movs	r2, #7
 8006c18:	68f9      	ldr	r1, [r7, #12]
 8006c1a:	6938      	ldr	r0, [r7, #16]
 8006c1c:	f7fe fcf4 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f383 8811 	msr	BASEPRI, r3
}
 8006c26:	bf00      	nop
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	2001442c 	.word	0x2001442c
 8006c34:	200143fc 	.word	0x200143fc

08006c38 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	1ad3      	subs	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	200143fc 	.word	0x200143fc

08006c58 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	; 0x30
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c62:	4b3b      	ldr	r3, [pc, #236]	; (8006d50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d06d      	beq.n	8006d46 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c6a:	4b39      	ldr	r3, [pc, #228]	; (8006d50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c70:	2300      	movs	r3, #0
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c74:	e008      	b.n	8006c88 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	3301      	adds	r3, #1
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d3f2      	bcc.n	8006c76 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c90:	e000      	b.n	8006c94 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c92:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d055      	beq.n	8006d46 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c9e:	f04f 0120 	mov.w	r1, #32
 8006ca2:	f381 8811 	msr	BASEPRI, r1
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	482a      	ldr	r0, [pc, #168]	; (8006d54 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006caa:	f7fe fbba 	bl	8005422 <_PreparePacket>
 8006cae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	e00b      	b.n	8006cd6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	6279      	str	r1, [r7, #36]	; 0x24
 8006cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	09db      	lsrs	r3, r3, #7
 8006cd4:	623b      	str	r3, [r7, #32]
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cda:	d8f0      	bhi.n	8006cbe <SEGGER_SYSVIEW_SendModule+0x66>
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	e00b      	b.n	8006d10 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	61f9      	str	r1, [r7, #28]
 8006d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	09db      	lsrs	r3, r3, #7
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b7f      	cmp	r3, #127	; 0x7f
 8006d14:	d8f0      	bhi.n	8006cf8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	61fa      	str	r2, [r7, #28]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2280      	movs	r2, #128	; 0x80
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7fe fb2a 	bl	8005388 <_EncodeStr>
 8006d34:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d36:	2216      	movs	r2, #22
 8006d38:	68f9      	ldr	r1, [r7, #12]
 8006d3a:	6938      	ldr	r0, [r7, #16]
 8006d3c:	f7fe fc64 	bl	8005608 <_SendPacket>
      RECORD_END();
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d46:	bf00      	nop
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20014424 	.word	0x20014424
 8006d54:	2001442c 	.word	0x2001442c

08006d58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d5e:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00f      	beq.n	8006d86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f2      	bne.n	8006d6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20014424 	.word	0x20014424

08006d94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d9e:	f04f 0120 	mov.w	r1, #32
 8006da2:	f381 8811 	msr	BASEPRI, r1
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	4817      	ldr	r0, [pc, #92]	; (8006e08 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006daa:	f7fe fb3a 	bl	8005422 <_PreparePacket>
 8006dae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	e00b      	b.n	8006dd8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	1c59      	adds	r1, r3, #1
 8006dc8:	6179      	str	r1, [r7, #20]
 8006dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	09db      	lsrs	r3, r3, #7
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b7f      	cmp	r3, #127	; 0x7f
 8006ddc:	d8f0      	bhi.n	8006dc0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	617a      	str	r2, [r7, #20]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006dee:	221b      	movs	r2, #27
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	68b8      	ldr	r0, [r7, #8]
 8006df4:	f7fe fc08 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f383 8811 	msr	BASEPRI, r3
}
 8006dfe:	bf00      	nop
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	2001442c 	.word	0x2001442c
 8006e0c:	20014428 	.word	0x20014428

08006e10 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e10:	b40f      	push	{r0, r1, r2, r3}
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e18:	f107 0314 	add.w	r3, r7, #20
 8006e1c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	461a      	mov	r2, r3
 8006e22:	2100      	movs	r1, #0
 8006e24:	6938      	ldr	r0, [r7, #16]
 8006e26:	f7fe fe79 	bl	8005b1c <_VPrintTarget>
  va_end(ParamList);
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e34:	b004      	add	sp, #16
 8006e36:	4770      	bx	lr

08006e38 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	; 0x28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e40:	f3ef 8311 	mrs	r3, BASEPRI
 8006e44:	f04f 0120 	mov.w	r1, #32
 8006e48:	f381 8811 	msr	BASEPRI, r1
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	4827      	ldr	r0, [pc, #156]	; (8006eec <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e50:	f7fe fae7 	bl	8005422 <_PreparePacket>
 8006e54:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e56:	2280      	movs	r2, #128	; 0x80
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f7fe fa94 	bl	8005388 <_EncodeStr>
 8006e60:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
 8006e66:	2301      	movs	r3, #1
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	e00b      	b.n	8006e84 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	1c59      	adds	r1, r3, #1
 8006e74:	6279      	str	r1, [r7, #36]	; 0x24
 8006e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	09db      	lsrs	r3, r3, #7
 8006e82:	623b      	str	r3, [r7, #32]
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	2b7f      	cmp	r3, #127	; 0x7f
 8006e88:	d8f0      	bhi.n	8006e6c <SEGGER_SYSVIEW_Warn+0x34>
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e90:	6a3a      	ldr	r2, [r7, #32]
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	e00b      	b.n	8006ebc <SEGGER_SYSVIEW_Warn+0x84>
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	1c59      	adds	r1, r3, #1
 8006eac:	61f9      	str	r1, [r7, #28]
 8006eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	09db      	lsrs	r3, r3, #7
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec0:	d8f0      	bhi.n	8006ea4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	61fa      	str	r2, [r7, #28]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ed2:	221a      	movs	r2, #26
 8006ed4:	68f9      	ldr	r1, [r7, #12]
 8006ed6:	6938      	ldr	r0, [r7, #16]
 8006ed8:	f7fe fb96 	bl	8005608 <_SendPacket>
  RECORD_END();
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f383 8811 	msr	BASEPRI, r3
}
 8006ee2:	bf00      	nop
 8006ee4:	3728      	adds	r7, #40	; 0x28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	2001442c 	.word	0x2001442c

08006ef0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ef4:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ef6:	7e1b      	ldrb	r3, [r3, #24]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4a13      	ldr	r2, [pc, #76]	; (8006f48 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006efc:	460b      	mov	r3, r1
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	440b      	add	r3, r1
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	4413      	add	r3, r2
 8006f06:	336c      	adds	r3, #108	; 0x6c
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f0c:	7e1b      	ldrb	r3, [r3, #24]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	490d      	ldr	r1, [pc, #52]	; (8006f48 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f12:	4603      	mov	r3, r0
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	4403      	add	r3, r0
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	440b      	add	r3, r1
 8006f1c:	3370      	adds	r3, #112	; 0x70
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d00b      	beq.n	8006f3c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f24:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f26:	789b      	ldrb	r3, [r3, #2]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f32:	f7fe fa83 	bl	800543c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f3c:	4b01      	ldr	r3, [pc, #4]	; (8006f44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200143fc 	.word	0x200143fc
 8006f48:	20012f3c 	.word	0x20012f3c

08006f4c <__libc_init_array>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4d0d      	ldr	r5, [pc, #52]	; (8006f84 <__libc_init_array+0x38>)
 8006f50:	4c0d      	ldr	r4, [pc, #52]	; (8006f88 <__libc_init_array+0x3c>)
 8006f52:	1b64      	subs	r4, r4, r5
 8006f54:	10a4      	asrs	r4, r4, #2
 8006f56:	2600      	movs	r6, #0
 8006f58:	42a6      	cmp	r6, r4
 8006f5a:	d109      	bne.n	8006f70 <__libc_init_array+0x24>
 8006f5c:	4d0b      	ldr	r5, [pc, #44]	; (8006f8c <__libc_init_array+0x40>)
 8006f5e:	4c0c      	ldr	r4, [pc, #48]	; (8006f90 <__libc_init_array+0x44>)
 8006f60:	f000 fcac 	bl	80078bc <_init>
 8006f64:	1b64      	subs	r4, r4, r5
 8006f66:	10a4      	asrs	r4, r4, #2
 8006f68:	2600      	movs	r6, #0
 8006f6a:	42a6      	cmp	r6, r4
 8006f6c:	d105      	bne.n	8006f7a <__libc_init_array+0x2e>
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f74:	4798      	blx	r3
 8006f76:	3601      	adds	r6, #1
 8006f78:	e7ee      	b.n	8006f58 <__libc_init_array+0xc>
 8006f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7e:	4798      	blx	r3
 8006f80:	3601      	adds	r6, #1
 8006f82:	e7f2      	b.n	8006f6a <__libc_init_array+0x1e>
 8006f84:	08007a58 	.word	0x08007a58
 8006f88:	08007a58 	.word	0x08007a58
 8006f8c:	08007a58 	.word	0x08007a58
 8006f90:	08007a5c 	.word	0x08007a5c

08006f94 <memcmp>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	3901      	subs	r1, #1
 8006f98:	4402      	add	r2, r0
 8006f9a:	4290      	cmp	r0, r2
 8006f9c:	d101      	bne.n	8006fa2 <memcmp+0xe>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e005      	b.n	8006fae <memcmp+0x1a>
 8006fa2:	7803      	ldrb	r3, [r0, #0]
 8006fa4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fa8:	42a3      	cmp	r3, r4
 8006faa:	d001      	beq.n	8006fb0 <memcmp+0x1c>
 8006fac:	1b18      	subs	r0, r3, r4
 8006fae:	bd10      	pop	{r4, pc}
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	e7f2      	b.n	8006f9a <memcmp+0x6>

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <memset>:
 8006fd0:	4402      	add	r2, r0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d100      	bne.n	8006fda <memset+0xa>
 8006fd8:	4770      	bx	lr
 8006fda:	f803 1b01 	strb.w	r1, [r3], #1
 8006fde:	e7f9      	b.n	8006fd4 <memset+0x4>

08006fe0 <siprintf>:
 8006fe0:	b40e      	push	{r1, r2, r3}
 8006fe2:	b500      	push	{lr}
 8006fe4:	b09c      	sub	sp, #112	; 0x70
 8006fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fe8:	9002      	str	r0, [sp, #8]
 8006fea:	9006      	str	r0, [sp, #24]
 8006fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ff0:	4809      	ldr	r0, [pc, #36]	; (8007018 <siprintf+0x38>)
 8006ff2:	9107      	str	r1, [sp, #28]
 8006ff4:	9104      	str	r1, [sp, #16]
 8006ff6:	4909      	ldr	r1, [pc, #36]	; (800701c <siprintf+0x3c>)
 8006ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffc:	9105      	str	r1, [sp, #20]
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	a902      	add	r1, sp, #8
 8007004:	f000 f868 	bl	80070d8 <_svfiprintf_r>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	b01c      	add	sp, #112	; 0x70
 8007010:	f85d eb04 	ldr.w	lr, [sp], #4
 8007014:	b003      	add	sp, #12
 8007016:	4770      	bx	lr
 8007018:	2000001c 	.word	0x2000001c
 800701c:	ffff0208 	.word	0xffff0208

08007020 <__ssputs_r>:
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	688e      	ldr	r6, [r1, #8]
 8007026:	429e      	cmp	r6, r3
 8007028:	4682      	mov	sl, r0
 800702a:	460c      	mov	r4, r1
 800702c:	4690      	mov	r8, r2
 800702e:	461f      	mov	r7, r3
 8007030:	d838      	bhi.n	80070a4 <__ssputs_r+0x84>
 8007032:	898a      	ldrh	r2, [r1, #12]
 8007034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007038:	d032      	beq.n	80070a0 <__ssputs_r+0x80>
 800703a:	6825      	ldr	r5, [r4, #0]
 800703c:	6909      	ldr	r1, [r1, #16]
 800703e:	eba5 0901 	sub.w	r9, r5, r1
 8007042:	6965      	ldr	r5, [r4, #20]
 8007044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800704c:	3301      	adds	r3, #1
 800704e:	444b      	add	r3, r9
 8007050:	106d      	asrs	r5, r5, #1
 8007052:	429d      	cmp	r5, r3
 8007054:	bf38      	it	cc
 8007056:	461d      	movcc	r5, r3
 8007058:	0553      	lsls	r3, r2, #21
 800705a:	d531      	bpl.n	80070c0 <__ssputs_r+0xa0>
 800705c:	4629      	mov	r1, r5
 800705e:	f000 fb55 	bl	800770c <_malloc_r>
 8007062:	4606      	mov	r6, r0
 8007064:	b950      	cbnz	r0, 800707c <__ssputs_r+0x5c>
 8007066:	230c      	movs	r3, #12
 8007068:	f8ca 3000 	str.w	r3, [sl]
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	6921      	ldr	r1, [r4, #16]
 800707e:	464a      	mov	r2, r9
 8007080:	f7ff ff98 	bl	8006fb4 <memcpy>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800708a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	6126      	str	r6, [r4, #16]
 8007092:	6165      	str	r5, [r4, #20]
 8007094:	444e      	add	r6, r9
 8007096:	eba5 0509 	sub.w	r5, r5, r9
 800709a:	6026      	str	r6, [r4, #0]
 800709c:	60a5      	str	r5, [r4, #8]
 800709e:	463e      	mov	r6, r7
 80070a0:	42be      	cmp	r6, r7
 80070a2:	d900      	bls.n	80070a6 <__ssputs_r+0x86>
 80070a4:	463e      	mov	r6, r7
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	4632      	mov	r2, r6
 80070aa:	4641      	mov	r1, r8
 80070ac:	f000 faa8 	bl	8007600 <memmove>
 80070b0:	68a3      	ldr	r3, [r4, #8]
 80070b2:	1b9b      	subs	r3, r3, r6
 80070b4:	60a3      	str	r3, [r4, #8]
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	4433      	add	r3, r6
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	2000      	movs	r0, #0
 80070be:	e7db      	b.n	8007078 <__ssputs_r+0x58>
 80070c0:	462a      	mov	r2, r5
 80070c2:	f000 fb97 	bl	80077f4 <_realloc_r>
 80070c6:	4606      	mov	r6, r0
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d1e1      	bne.n	8007090 <__ssputs_r+0x70>
 80070cc:	6921      	ldr	r1, [r4, #16]
 80070ce:	4650      	mov	r0, sl
 80070d0:	f000 fab0 	bl	8007634 <_free_r>
 80070d4:	e7c7      	b.n	8007066 <__ssputs_r+0x46>
	...

080070d8 <_svfiprintf_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	4698      	mov	r8, r3
 80070de:	898b      	ldrh	r3, [r1, #12]
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	b09d      	sub	sp, #116	; 0x74
 80070e4:	4607      	mov	r7, r0
 80070e6:	460d      	mov	r5, r1
 80070e8:	4614      	mov	r4, r2
 80070ea:	d50e      	bpl.n	800710a <_svfiprintf_r+0x32>
 80070ec:	690b      	ldr	r3, [r1, #16]
 80070ee:	b963      	cbnz	r3, 800710a <_svfiprintf_r+0x32>
 80070f0:	2140      	movs	r1, #64	; 0x40
 80070f2:	f000 fb0b 	bl	800770c <_malloc_r>
 80070f6:	6028      	str	r0, [r5, #0]
 80070f8:	6128      	str	r0, [r5, #16]
 80070fa:	b920      	cbnz	r0, 8007106 <_svfiprintf_r+0x2e>
 80070fc:	230c      	movs	r3, #12
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007104:	e0d1      	b.n	80072aa <_svfiprintf_r+0x1d2>
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	616b      	str	r3, [r5, #20]
 800710a:	2300      	movs	r3, #0
 800710c:	9309      	str	r3, [sp, #36]	; 0x24
 800710e:	2320      	movs	r3, #32
 8007110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007114:	f8cd 800c 	str.w	r8, [sp, #12]
 8007118:	2330      	movs	r3, #48	; 0x30
 800711a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072c4 <_svfiprintf_r+0x1ec>
 800711e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007122:	f04f 0901 	mov.w	r9, #1
 8007126:	4623      	mov	r3, r4
 8007128:	469a      	mov	sl, r3
 800712a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800712e:	b10a      	cbz	r2, 8007134 <_svfiprintf_r+0x5c>
 8007130:	2a25      	cmp	r2, #37	; 0x25
 8007132:	d1f9      	bne.n	8007128 <_svfiprintf_r+0x50>
 8007134:	ebba 0b04 	subs.w	fp, sl, r4
 8007138:	d00b      	beq.n	8007152 <_svfiprintf_r+0x7a>
 800713a:	465b      	mov	r3, fp
 800713c:	4622      	mov	r2, r4
 800713e:	4629      	mov	r1, r5
 8007140:	4638      	mov	r0, r7
 8007142:	f7ff ff6d 	bl	8007020 <__ssputs_r>
 8007146:	3001      	adds	r0, #1
 8007148:	f000 80aa 	beq.w	80072a0 <_svfiprintf_r+0x1c8>
 800714c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714e:	445a      	add	r2, fp
 8007150:	9209      	str	r2, [sp, #36]	; 0x24
 8007152:	f89a 3000 	ldrb.w	r3, [sl]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80a2 	beq.w	80072a0 <_svfiprintf_r+0x1c8>
 800715c:	2300      	movs	r3, #0
 800715e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007166:	f10a 0a01 	add.w	sl, sl, #1
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007172:	931a      	str	r3, [sp, #104]	; 0x68
 8007174:	4654      	mov	r4, sl
 8007176:	2205      	movs	r2, #5
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	4851      	ldr	r0, [pc, #324]	; (80072c4 <_svfiprintf_r+0x1ec>)
 800717e:	f7f9 f87f 	bl	8000280 <memchr>
 8007182:	9a04      	ldr	r2, [sp, #16]
 8007184:	b9d8      	cbnz	r0, 80071be <_svfiprintf_r+0xe6>
 8007186:	06d0      	lsls	r0, r2, #27
 8007188:	bf44      	itt	mi
 800718a:	2320      	movmi	r3, #32
 800718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007190:	0711      	lsls	r1, r2, #28
 8007192:	bf44      	itt	mi
 8007194:	232b      	movmi	r3, #43	; 0x2b
 8007196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800719a:	f89a 3000 	ldrb.w	r3, [sl]
 800719e:	2b2a      	cmp	r3, #42	; 0x2a
 80071a0:	d015      	beq.n	80071ce <_svfiprintf_r+0xf6>
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	4654      	mov	r4, sl
 80071a6:	2000      	movs	r0, #0
 80071a8:	f04f 0c0a 	mov.w	ip, #10
 80071ac:	4621      	mov	r1, r4
 80071ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b2:	3b30      	subs	r3, #48	; 0x30
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d94e      	bls.n	8007256 <_svfiprintf_r+0x17e>
 80071b8:	b1b0      	cbz	r0, 80071e8 <_svfiprintf_r+0x110>
 80071ba:	9207      	str	r2, [sp, #28]
 80071bc:	e014      	b.n	80071e8 <_svfiprintf_r+0x110>
 80071be:	eba0 0308 	sub.w	r3, r0, r8
 80071c2:	fa09 f303 	lsl.w	r3, r9, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	46a2      	mov	sl, r4
 80071cc:	e7d2      	b.n	8007174 <_svfiprintf_r+0x9c>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	1d19      	adds	r1, r3, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	9103      	str	r1, [sp, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfbb      	ittet	lt
 80071da:	425b      	neglt	r3, r3
 80071dc:	f042 0202 	orrlt.w	r2, r2, #2
 80071e0:	9307      	strge	r3, [sp, #28]
 80071e2:	9307      	strlt	r3, [sp, #28]
 80071e4:	bfb8      	it	lt
 80071e6:	9204      	strlt	r2, [sp, #16]
 80071e8:	7823      	ldrb	r3, [r4, #0]
 80071ea:	2b2e      	cmp	r3, #46	; 0x2e
 80071ec:	d10c      	bne.n	8007208 <_svfiprintf_r+0x130>
 80071ee:	7863      	ldrb	r3, [r4, #1]
 80071f0:	2b2a      	cmp	r3, #42	; 0x2a
 80071f2:	d135      	bne.n	8007260 <_svfiprintf_r+0x188>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	1d1a      	adds	r2, r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	9203      	str	r2, [sp, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bfb8      	it	lt
 8007200:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007204:	3402      	adds	r4, #2
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072d4 <_svfiprintf_r+0x1fc>
 800720c:	7821      	ldrb	r1, [r4, #0]
 800720e:	2203      	movs	r2, #3
 8007210:	4650      	mov	r0, sl
 8007212:	f7f9 f835 	bl	8000280 <memchr>
 8007216:	b140      	cbz	r0, 800722a <_svfiprintf_r+0x152>
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	eba0 000a 	sub.w	r0, r0, sl
 800721e:	fa03 f000 	lsl.w	r0, r3, r0
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	4303      	orrs	r3, r0
 8007226:	3401      	adds	r4, #1
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722e:	4826      	ldr	r0, [pc, #152]	; (80072c8 <_svfiprintf_r+0x1f0>)
 8007230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007234:	2206      	movs	r2, #6
 8007236:	f7f9 f823 	bl	8000280 <memchr>
 800723a:	2800      	cmp	r0, #0
 800723c:	d038      	beq.n	80072b0 <_svfiprintf_r+0x1d8>
 800723e:	4b23      	ldr	r3, [pc, #140]	; (80072cc <_svfiprintf_r+0x1f4>)
 8007240:	bb1b      	cbnz	r3, 800728a <_svfiprintf_r+0x1b2>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	3307      	adds	r3, #7
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	3308      	adds	r3, #8
 800724c:	9303      	str	r3, [sp, #12]
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	4433      	add	r3, r6
 8007252:	9309      	str	r3, [sp, #36]	; 0x24
 8007254:	e767      	b.n	8007126 <_svfiprintf_r+0x4e>
 8007256:	fb0c 3202 	mla	r2, ip, r2, r3
 800725a:	460c      	mov	r4, r1
 800725c:	2001      	movs	r0, #1
 800725e:	e7a5      	b.n	80071ac <_svfiprintf_r+0xd4>
 8007260:	2300      	movs	r3, #0
 8007262:	3401      	adds	r4, #1
 8007264:	9305      	str	r3, [sp, #20]
 8007266:	4619      	mov	r1, r3
 8007268:	f04f 0c0a 	mov.w	ip, #10
 800726c:	4620      	mov	r0, r4
 800726e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007272:	3a30      	subs	r2, #48	; 0x30
 8007274:	2a09      	cmp	r2, #9
 8007276:	d903      	bls.n	8007280 <_svfiprintf_r+0x1a8>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0c5      	beq.n	8007208 <_svfiprintf_r+0x130>
 800727c:	9105      	str	r1, [sp, #20]
 800727e:	e7c3      	b.n	8007208 <_svfiprintf_r+0x130>
 8007280:	fb0c 2101 	mla	r1, ip, r1, r2
 8007284:	4604      	mov	r4, r0
 8007286:	2301      	movs	r3, #1
 8007288:	e7f0      	b.n	800726c <_svfiprintf_r+0x194>
 800728a:	ab03      	add	r3, sp, #12
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462a      	mov	r2, r5
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <_svfiprintf_r+0x1f8>)
 8007292:	a904      	add	r1, sp, #16
 8007294:	4638      	mov	r0, r7
 8007296:	f3af 8000 	nop.w
 800729a:	1c42      	adds	r2, r0, #1
 800729c:	4606      	mov	r6, r0
 800729e:	d1d6      	bne.n	800724e <_svfiprintf_r+0x176>
 80072a0:	89ab      	ldrh	r3, [r5, #12]
 80072a2:	065b      	lsls	r3, r3, #25
 80072a4:	f53f af2c 	bmi.w	8007100 <_svfiprintf_r+0x28>
 80072a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072aa:	b01d      	add	sp, #116	; 0x74
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	ab03      	add	r3, sp, #12
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	462a      	mov	r2, r5
 80072b6:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <_svfiprintf_r+0x1f8>)
 80072b8:	a904      	add	r1, sp, #16
 80072ba:	4638      	mov	r0, r7
 80072bc:	f000 f87a 	bl	80073b4 <_printf_i>
 80072c0:	e7eb      	b.n	800729a <_svfiprintf_r+0x1c2>
 80072c2:	bf00      	nop
 80072c4:	08007a1c 	.word	0x08007a1c
 80072c8:	08007a26 	.word	0x08007a26
 80072cc:	00000000 	.word	0x00000000
 80072d0:	08007021 	.word	0x08007021
 80072d4:	08007a22 	.word	0x08007a22

080072d8 <_printf_common>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	4699      	mov	r9, r3
 80072e0:	688a      	ldr	r2, [r1, #8]
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfb8      	it	lt
 80072ec:	4613      	movlt	r3, r2
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f4:	4607      	mov	r7, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	b10a      	cbz	r2, 80072fe <_printf_common+0x26>
 80072fa:	3301      	adds	r3, #1
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0699      	lsls	r1, r3, #26
 8007302:	bf42      	ittt	mi
 8007304:	6833      	ldrmi	r3, [r6, #0]
 8007306:	3302      	addmi	r3, #2
 8007308:	6033      	strmi	r3, [r6, #0]
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	f015 0506 	ands.w	r5, r5, #6
 8007310:	d106      	bne.n	8007320 <_printf_common+0x48>
 8007312:	f104 0a19 	add.w	sl, r4, #25
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	6832      	ldr	r2, [r6, #0]
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	42ab      	cmp	r3, r5
 800731e:	dc26      	bgt.n	800736e <_printf_common+0x96>
 8007320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007324:	1e13      	subs	r3, r2, #0
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	bf18      	it	ne
 800732a:	2301      	movne	r3, #1
 800732c:	0692      	lsls	r2, r2, #26
 800732e:	d42b      	bmi.n	8007388 <_printf_common+0xb0>
 8007330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007334:	4649      	mov	r1, r9
 8007336:	4638      	mov	r0, r7
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d01e      	beq.n	800737c <_printf_common+0xa4>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	68e5      	ldr	r5, [r4, #12]
 8007342:	6832      	ldr	r2, [r6, #0]
 8007344:	f003 0306 	and.w	r3, r3, #6
 8007348:	2b04      	cmp	r3, #4
 800734a:	bf08      	it	eq
 800734c:	1aad      	subeq	r5, r5, r2
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	bf0c      	ite	eq
 8007354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007358:	2500      	movne	r5, #0
 800735a:	4293      	cmp	r3, r2
 800735c:	bfc4      	itt	gt
 800735e:	1a9b      	subgt	r3, r3, r2
 8007360:	18ed      	addgt	r5, r5, r3
 8007362:	2600      	movs	r6, #0
 8007364:	341a      	adds	r4, #26
 8007366:	42b5      	cmp	r5, r6
 8007368:	d11a      	bne.n	80073a0 <_printf_common+0xc8>
 800736a:	2000      	movs	r0, #0
 800736c:	e008      	b.n	8007380 <_printf_common+0xa8>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4649      	mov	r1, r9
 8007374:	4638      	mov	r0, r7
 8007376:	47c0      	blx	r8
 8007378:	3001      	adds	r0, #1
 800737a:	d103      	bne.n	8007384 <_printf_common+0xac>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	3501      	adds	r5, #1
 8007386:	e7c6      	b.n	8007316 <_printf_common+0x3e>
 8007388:	18e1      	adds	r1, r4, r3
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	2030      	movs	r0, #48	; 0x30
 800738e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007392:	4422      	add	r2, r4
 8007394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800739c:	3302      	adds	r3, #2
 800739e:	e7c7      	b.n	8007330 <_printf_common+0x58>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4622      	mov	r2, r4
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0e6      	beq.n	800737c <_printf_common+0xa4>
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7d9      	b.n	8007366 <_printf_common+0x8e>
	...

080073b4 <_printf_i>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	7e0f      	ldrb	r7, [r1, #24]
 80073ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073bc:	2f78      	cmp	r7, #120	; 0x78
 80073be:	4691      	mov	r9, r2
 80073c0:	4680      	mov	r8, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	469a      	mov	sl, r3
 80073c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ca:	d807      	bhi.n	80073dc <_printf_i+0x28>
 80073cc:	2f62      	cmp	r7, #98	; 0x62
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x32>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	f000 80d8 	beq.w	8007586 <_printf_i+0x1d2>
 80073d6:	2f58      	cmp	r7, #88	; 0x58
 80073d8:	f000 80a3 	beq.w	8007522 <_printf_i+0x16e>
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e4:	e03a      	b.n	800745c <_printf_i+0xa8>
 80073e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ea:	2b15      	cmp	r3, #21
 80073ec:	d8f6      	bhi.n	80073dc <_printf_i+0x28>
 80073ee:	a101      	add	r1, pc, #4	; (adr r1, 80073f4 <_printf_i+0x40>)
 80073f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	08007461 	.word	0x08007461
 80073fc:	080073dd 	.word	0x080073dd
 8007400:	080073dd 	.word	0x080073dd
 8007404:	080073dd 	.word	0x080073dd
 8007408:	080073dd 	.word	0x080073dd
 800740c:	08007461 	.word	0x08007461
 8007410:	080073dd 	.word	0x080073dd
 8007414:	080073dd 	.word	0x080073dd
 8007418:	080073dd 	.word	0x080073dd
 800741c:	080073dd 	.word	0x080073dd
 8007420:	0800756d 	.word	0x0800756d
 8007424:	08007491 	.word	0x08007491
 8007428:	0800754f 	.word	0x0800754f
 800742c:	080073dd 	.word	0x080073dd
 8007430:	080073dd 	.word	0x080073dd
 8007434:	0800758f 	.word	0x0800758f
 8007438:	080073dd 	.word	0x080073dd
 800743c:	08007491 	.word	0x08007491
 8007440:	080073dd 	.word	0x080073dd
 8007444:	080073dd 	.word	0x080073dd
 8007448:	08007557 	.word	0x08007557
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	602a      	str	r2, [r5, #0]
 8007454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800745c:	2301      	movs	r3, #1
 800745e:	e0a3      	b.n	80075a8 <_printf_i+0x1f4>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	6829      	ldr	r1, [r5, #0]
 8007464:	0606      	lsls	r6, r0, #24
 8007466:	f101 0304 	add.w	r3, r1, #4
 800746a:	d50a      	bpl.n	8007482 <_printf_i+0xce>
 800746c:	680e      	ldr	r6, [r1, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	2e00      	cmp	r6, #0
 8007472:	da03      	bge.n	800747c <_printf_i+0xc8>
 8007474:	232d      	movs	r3, #45	; 0x2d
 8007476:	4276      	negs	r6, r6
 8007478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747c:	485e      	ldr	r0, [pc, #376]	; (80075f8 <_printf_i+0x244>)
 800747e:	230a      	movs	r3, #10
 8007480:	e019      	b.n	80074b6 <_printf_i+0x102>
 8007482:	680e      	ldr	r6, [r1, #0]
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800748a:	bf18      	it	ne
 800748c:	b236      	sxthne	r6, r6
 800748e:	e7ef      	b.n	8007470 <_printf_i+0xbc>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	1d19      	adds	r1, r3, #4
 8007496:	6029      	str	r1, [r5, #0]
 8007498:	0601      	lsls	r1, r0, #24
 800749a:	d501      	bpl.n	80074a0 <_printf_i+0xec>
 800749c:	681e      	ldr	r6, [r3, #0]
 800749e:	e002      	b.n	80074a6 <_printf_i+0xf2>
 80074a0:	0646      	lsls	r6, r0, #25
 80074a2:	d5fb      	bpl.n	800749c <_printf_i+0xe8>
 80074a4:	881e      	ldrh	r6, [r3, #0]
 80074a6:	4854      	ldr	r0, [pc, #336]	; (80075f8 <_printf_i+0x244>)
 80074a8:	2f6f      	cmp	r7, #111	; 0x6f
 80074aa:	bf0c      	ite	eq
 80074ac:	2308      	moveq	r3, #8
 80074ae:	230a      	movne	r3, #10
 80074b0:	2100      	movs	r1, #0
 80074b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b6:	6865      	ldr	r5, [r4, #4]
 80074b8:	60a5      	str	r5, [r4, #8]
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	bfa2      	ittt	ge
 80074be:	6821      	ldrge	r1, [r4, #0]
 80074c0:	f021 0104 	bicge.w	r1, r1, #4
 80074c4:	6021      	strge	r1, [r4, #0]
 80074c6:	b90e      	cbnz	r6, 80074cc <_printf_i+0x118>
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d04d      	beq.n	8007568 <_printf_i+0x1b4>
 80074cc:	4615      	mov	r5, r2
 80074ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80074d2:	fb03 6711 	mls	r7, r3, r1, r6
 80074d6:	5dc7      	ldrb	r7, [r0, r7]
 80074d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074dc:	4637      	mov	r7, r6
 80074de:	42bb      	cmp	r3, r7
 80074e0:	460e      	mov	r6, r1
 80074e2:	d9f4      	bls.n	80074ce <_printf_i+0x11a>
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d10b      	bne.n	8007500 <_printf_i+0x14c>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	07de      	lsls	r6, r3, #31
 80074ec:	d508      	bpl.n	8007500 <_printf_i+0x14c>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	4299      	cmp	r1, r3
 80074f4:	bfde      	ittt	le
 80074f6:	2330      	movle	r3, #48	; 0x30
 80074f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007500:	1b52      	subs	r2, r2, r5
 8007502:	6122      	str	r2, [r4, #16]
 8007504:	f8cd a000 	str.w	sl, [sp]
 8007508:	464b      	mov	r3, r9
 800750a:	aa03      	add	r2, sp, #12
 800750c:	4621      	mov	r1, r4
 800750e:	4640      	mov	r0, r8
 8007510:	f7ff fee2 	bl	80072d8 <_printf_common>
 8007514:	3001      	adds	r0, #1
 8007516:	d14c      	bne.n	80075b2 <_printf_i+0x1fe>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	b004      	add	sp, #16
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	4835      	ldr	r0, [pc, #212]	; (80075f8 <_printf_i+0x244>)
 8007524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007528:	6829      	ldr	r1, [r5, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007530:	6029      	str	r1, [r5, #0]
 8007532:	061d      	lsls	r5, r3, #24
 8007534:	d514      	bpl.n	8007560 <_printf_i+0x1ac>
 8007536:	07df      	lsls	r7, r3, #31
 8007538:	bf44      	itt	mi
 800753a:	f043 0320 	orrmi.w	r3, r3, #32
 800753e:	6023      	strmi	r3, [r4, #0]
 8007540:	b91e      	cbnz	r6, 800754a <_printf_i+0x196>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	f023 0320 	bic.w	r3, r3, #32
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	2310      	movs	r3, #16
 800754c:	e7b0      	b.n	80074b0 <_printf_i+0xfc>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	f043 0320 	orr.w	r3, r3, #32
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	2378      	movs	r3, #120	; 0x78
 8007558:	4828      	ldr	r0, [pc, #160]	; (80075fc <_printf_i+0x248>)
 800755a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800755e:	e7e3      	b.n	8007528 <_printf_i+0x174>
 8007560:	0659      	lsls	r1, r3, #25
 8007562:	bf48      	it	mi
 8007564:	b2b6      	uxthmi	r6, r6
 8007566:	e7e6      	b.n	8007536 <_printf_i+0x182>
 8007568:	4615      	mov	r5, r2
 800756a:	e7bb      	b.n	80074e4 <_printf_i+0x130>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	6826      	ldr	r6, [r4, #0]
 8007570:	6961      	ldr	r1, [r4, #20]
 8007572:	1d18      	adds	r0, r3, #4
 8007574:	6028      	str	r0, [r5, #0]
 8007576:	0635      	lsls	r5, r6, #24
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	d501      	bpl.n	8007580 <_printf_i+0x1cc>
 800757c:	6019      	str	r1, [r3, #0]
 800757e:	e002      	b.n	8007586 <_printf_i+0x1d2>
 8007580:	0670      	lsls	r0, r6, #25
 8007582:	d5fb      	bpl.n	800757c <_printf_i+0x1c8>
 8007584:	8019      	strh	r1, [r3, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	4615      	mov	r5, r2
 800758c:	e7ba      	b.n	8007504 <_printf_i+0x150>
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	1d1a      	adds	r2, r3, #4
 8007592:	602a      	str	r2, [r5, #0]
 8007594:	681d      	ldr	r5, [r3, #0]
 8007596:	6862      	ldr	r2, [r4, #4]
 8007598:	2100      	movs	r1, #0
 800759a:	4628      	mov	r0, r5
 800759c:	f7f8 fe70 	bl	8000280 <memchr>
 80075a0:	b108      	cbz	r0, 80075a6 <_printf_i+0x1f2>
 80075a2:	1b40      	subs	r0, r0, r5
 80075a4:	6060      	str	r0, [r4, #4]
 80075a6:	6863      	ldr	r3, [r4, #4]
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	2300      	movs	r3, #0
 80075ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b0:	e7a8      	b.n	8007504 <_printf_i+0x150>
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4649      	mov	r1, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	47d0      	blx	sl
 80075bc:	3001      	adds	r0, #1
 80075be:	d0ab      	beq.n	8007518 <_printf_i+0x164>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	079b      	lsls	r3, r3, #30
 80075c4:	d413      	bmi.n	80075ee <_printf_i+0x23a>
 80075c6:	68e0      	ldr	r0, [r4, #12]
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	4298      	cmp	r0, r3
 80075cc:	bfb8      	it	lt
 80075ce:	4618      	movlt	r0, r3
 80075d0:	e7a4      	b.n	800751c <_printf_i+0x168>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4632      	mov	r2, r6
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	47d0      	blx	sl
 80075dc:	3001      	adds	r0, #1
 80075de:	d09b      	beq.n	8007518 <_printf_i+0x164>
 80075e0:	3501      	adds	r5, #1
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	9903      	ldr	r1, [sp, #12]
 80075e6:	1a5b      	subs	r3, r3, r1
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	dcf2      	bgt.n	80075d2 <_printf_i+0x21e>
 80075ec:	e7eb      	b.n	80075c6 <_printf_i+0x212>
 80075ee:	2500      	movs	r5, #0
 80075f0:	f104 0619 	add.w	r6, r4, #25
 80075f4:	e7f5      	b.n	80075e2 <_printf_i+0x22e>
 80075f6:	bf00      	nop
 80075f8:	08007a2d 	.word	0x08007a2d
 80075fc:	08007a3e 	.word	0x08007a3e

08007600 <memmove>:
 8007600:	4288      	cmp	r0, r1
 8007602:	b510      	push	{r4, lr}
 8007604:	eb01 0402 	add.w	r4, r1, r2
 8007608:	d902      	bls.n	8007610 <memmove+0x10>
 800760a:	4284      	cmp	r4, r0
 800760c:	4623      	mov	r3, r4
 800760e:	d807      	bhi.n	8007620 <memmove+0x20>
 8007610:	1e43      	subs	r3, r0, #1
 8007612:	42a1      	cmp	r1, r4
 8007614:	d008      	beq.n	8007628 <memmove+0x28>
 8007616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800761a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800761e:	e7f8      	b.n	8007612 <memmove+0x12>
 8007620:	4402      	add	r2, r0
 8007622:	4601      	mov	r1, r0
 8007624:	428a      	cmp	r2, r1
 8007626:	d100      	bne.n	800762a <memmove+0x2a>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800762e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007632:	e7f7      	b.n	8007624 <memmove+0x24>

08007634 <_free_r>:
 8007634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007636:	2900      	cmp	r1, #0
 8007638:	d044      	beq.n	80076c4 <_free_r+0x90>
 800763a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800763e:	9001      	str	r0, [sp, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f1a1 0404 	sub.w	r4, r1, #4
 8007646:	bfb8      	it	lt
 8007648:	18e4      	addlt	r4, r4, r3
 800764a:	f000 f913 	bl	8007874 <__malloc_lock>
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <_free_r+0x94>)
 8007650:	9801      	ldr	r0, [sp, #4]
 8007652:	6813      	ldr	r3, [r2, #0]
 8007654:	b933      	cbnz	r3, 8007664 <_free_r+0x30>
 8007656:	6063      	str	r3, [r4, #4]
 8007658:	6014      	str	r4, [r2, #0]
 800765a:	b003      	add	sp, #12
 800765c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007660:	f000 b90e 	b.w	8007880 <__malloc_unlock>
 8007664:	42a3      	cmp	r3, r4
 8007666:	d908      	bls.n	800767a <_free_r+0x46>
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	1961      	adds	r1, r4, r5
 800766c:	428b      	cmp	r3, r1
 800766e:	bf01      	itttt	eq
 8007670:	6819      	ldreq	r1, [r3, #0]
 8007672:	685b      	ldreq	r3, [r3, #4]
 8007674:	1949      	addeq	r1, r1, r5
 8007676:	6021      	streq	r1, [r4, #0]
 8007678:	e7ed      	b.n	8007656 <_free_r+0x22>
 800767a:	461a      	mov	r2, r3
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	b10b      	cbz	r3, 8007684 <_free_r+0x50>
 8007680:	42a3      	cmp	r3, r4
 8007682:	d9fa      	bls.n	800767a <_free_r+0x46>
 8007684:	6811      	ldr	r1, [r2, #0]
 8007686:	1855      	adds	r5, r2, r1
 8007688:	42a5      	cmp	r5, r4
 800768a:	d10b      	bne.n	80076a4 <_free_r+0x70>
 800768c:	6824      	ldr	r4, [r4, #0]
 800768e:	4421      	add	r1, r4
 8007690:	1854      	adds	r4, r2, r1
 8007692:	42a3      	cmp	r3, r4
 8007694:	6011      	str	r1, [r2, #0]
 8007696:	d1e0      	bne.n	800765a <_free_r+0x26>
 8007698:	681c      	ldr	r4, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	6053      	str	r3, [r2, #4]
 800769e:	4421      	add	r1, r4
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	e7da      	b.n	800765a <_free_r+0x26>
 80076a4:	d902      	bls.n	80076ac <_free_r+0x78>
 80076a6:	230c      	movs	r3, #12
 80076a8:	6003      	str	r3, [r0, #0]
 80076aa:	e7d6      	b.n	800765a <_free_r+0x26>
 80076ac:	6825      	ldr	r5, [r4, #0]
 80076ae:	1961      	adds	r1, r4, r5
 80076b0:	428b      	cmp	r3, r1
 80076b2:	bf04      	itt	eq
 80076b4:	6819      	ldreq	r1, [r3, #0]
 80076b6:	685b      	ldreq	r3, [r3, #4]
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	bf04      	itt	eq
 80076bc:	1949      	addeq	r1, r1, r5
 80076be:	6021      	streq	r1, [r4, #0]
 80076c0:	6054      	str	r4, [r2, #4]
 80076c2:	e7ca      	b.n	800765a <_free_r+0x26>
 80076c4:	b003      	add	sp, #12
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	20014510 	.word	0x20014510

080076cc <sbrk_aligned>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4e0e      	ldr	r6, [pc, #56]	; (8007708 <sbrk_aligned+0x3c>)
 80076d0:	460c      	mov	r4, r1
 80076d2:	6831      	ldr	r1, [r6, #0]
 80076d4:	4605      	mov	r5, r0
 80076d6:	b911      	cbnz	r1, 80076de <sbrk_aligned+0x12>
 80076d8:	f000 f8bc 	bl	8007854 <_sbrk_r>
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f8b7 	bl	8007854 <_sbrk_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d00a      	beq.n	8007700 <sbrk_aligned+0x34>
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d007      	beq.n	8007704 <sbrk_aligned+0x38>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 f8ac 	bl	8007854 <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d101      	bne.n	8007704 <sbrk_aligned+0x38>
 8007700:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007704:	4620      	mov	r0, r4
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	20014514 	.word	0x20014514

0800770c <_malloc_r>:
 800770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007710:	1ccd      	adds	r5, r1, #3
 8007712:	f025 0503 	bic.w	r5, r5, #3
 8007716:	3508      	adds	r5, #8
 8007718:	2d0c      	cmp	r5, #12
 800771a:	bf38      	it	cc
 800771c:	250c      	movcc	r5, #12
 800771e:	2d00      	cmp	r5, #0
 8007720:	4607      	mov	r7, r0
 8007722:	db01      	blt.n	8007728 <_malloc_r+0x1c>
 8007724:	42a9      	cmp	r1, r5
 8007726:	d905      	bls.n	8007734 <_malloc_r+0x28>
 8007728:	230c      	movs	r3, #12
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	2600      	movs	r6, #0
 800772e:	4630      	mov	r0, r6
 8007730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007734:	4e2e      	ldr	r6, [pc, #184]	; (80077f0 <_malloc_r+0xe4>)
 8007736:	f000 f89d 	bl	8007874 <__malloc_lock>
 800773a:	6833      	ldr	r3, [r6, #0]
 800773c:	461c      	mov	r4, r3
 800773e:	bb34      	cbnz	r4, 800778e <_malloc_r+0x82>
 8007740:	4629      	mov	r1, r5
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff ffc2 	bl	80076cc <sbrk_aligned>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	4604      	mov	r4, r0
 800774c:	d14d      	bne.n	80077ea <_malloc_r+0xde>
 800774e:	6834      	ldr	r4, [r6, #0]
 8007750:	4626      	mov	r6, r4
 8007752:	2e00      	cmp	r6, #0
 8007754:	d140      	bne.n	80077d8 <_malloc_r+0xcc>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	4631      	mov	r1, r6
 800775a:	4638      	mov	r0, r7
 800775c:	eb04 0803 	add.w	r8, r4, r3
 8007760:	f000 f878 	bl	8007854 <_sbrk_r>
 8007764:	4580      	cmp	r8, r0
 8007766:	d13a      	bne.n	80077de <_malloc_r+0xd2>
 8007768:	6821      	ldr	r1, [r4, #0]
 800776a:	3503      	adds	r5, #3
 800776c:	1a6d      	subs	r5, r5, r1
 800776e:	f025 0503 	bic.w	r5, r5, #3
 8007772:	3508      	adds	r5, #8
 8007774:	2d0c      	cmp	r5, #12
 8007776:	bf38      	it	cc
 8007778:	250c      	movcc	r5, #12
 800777a:	4629      	mov	r1, r5
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff ffa5 	bl	80076cc <sbrk_aligned>
 8007782:	3001      	adds	r0, #1
 8007784:	d02b      	beq.n	80077de <_malloc_r+0xd2>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	442b      	add	r3, r5
 800778a:	6023      	str	r3, [r4, #0]
 800778c:	e00e      	b.n	80077ac <_malloc_r+0xa0>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	1b52      	subs	r2, r2, r5
 8007792:	d41e      	bmi.n	80077d2 <_malloc_r+0xc6>
 8007794:	2a0b      	cmp	r2, #11
 8007796:	d916      	bls.n	80077c6 <_malloc_r+0xba>
 8007798:	1961      	adds	r1, r4, r5
 800779a:	42a3      	cmp	r3, r4
 800779c:	6025      	str	r5, [r4, #0]
 800779e:	bf18      	it	ne
 80077a0:	6059      	strne	r1, [r3, #4]
 80077a2:	6863      	ldr	r3, [r4, #4]
 80077a4:	bf08      	it	eq
 80077a6:	6031      	streq	r1, [r6, #0]
 80077a8:	5162      	str	r2, [r4, r5]
 80077aa:	604b      	str	r3, [r1, #4]
 80077ac:	4638      	mov	r0, r7
 80077ae:	f104 060b 	add.w	r6, r4, #11
 80077b2:	f000 f865 	bl	8007880 <__malloc_unlock>
 80077b6:	f026 0607 	bic.w	r6, r6, #7
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	1af2      	subs	r2, r6, r3
 80077be:	d0b6      	beq.n	800772e <_malloc_r+0x22>
 80077c0:	1b9b      	subs	r3, r3, r6
 80077c2:	50a3      	str	r3, [r4, r2]
 80077c4:	e7b3      	b.n	800772e <_malloc_r+0x22>
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	bf0c      	ite	eq
 80077cc:	6032      	streq	r2, [r6, #0]
 80077ce:	605a      	strne	r2, [r3, #4]
 80077d0:	e7ec      	b.n	80077ac <_malloc_r+0xa0>
 80077d2:	4623      	mov	r3, r4
 80077d4:	6864      	ldr	r4, [r4, #4]
 80077d6:	e7b2      	b.n	800773e <_malloc_r+0x32>
 80077d8:	4634      	mov	r4, r6
 80077da:	6876      	ldr	r6, [r6, #4]
 80077dc:	e7b9      	b.n	8007752 <_malloc_r+0x46>
 80077de:	230c      	movs	r3, #12
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4638      	mov	r0, r7
 80077e4:	f000 f84c 	bl	8007880 <__malloc_unlock>
 80077e8:	e7a1      	b.n	800772e <_malloc_r+0x22>
 80077ea:	6025      	str	r5, [r4, #0]
 80077ec:	e7de      	b.n	80077ac <_malloc_r+0xa0>
 80077ee:	bf00      	nop
 80077f0:	20014510 	.word	0x20014510

080077f4 <_realloc_r>:
 80077f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f8:	4680      	mov	r8, r0
 80077fa:	4614      	mov	r4, r2
 80077fc:	460e      	mov	r6, r1
 80077fe:	b921      	cbnz	r1, 800780a <_realloc_r+0x16>
 8007800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007804:	4611      	mov	r1, r2
 8007806:	f7ff bf81 	b.w	800770c <_malloc_r>
 800780a:	b92a      	cbnz	r2, 8007818 <_realloc_r+0x24>
 800780c:	f7ff ff12 	bl	8007634 <_free_r>
 8007810:	4625      	mov	r5, r4
 8007812:	4628      	mov	r0, r5
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	f000 f838 	bl	800788c <_malloc_usable_size_r>
 800781c:	4284      	cmp	r4, r0
 800781e:	4607      	mov	r7, r0
 8007820:	d802      	bhi.n	8007828 <_realloc_r+0x34>
 8007822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007826:	d812      	bhi.n	800784e <_realloc_r+0x5a>
 8007828:	4621      	mov	r1, r4
 800782a:	4640      	mov	r0, r8
 800782c:	f7ff ff6e 	bl	800770c <_malloc_r>
 8007830:	4605      	mov	r5, r0
 8007832:	2800      	cmp	r0, #0
 8007834:	d0ed      	beq.n	8007812 <_realloc_r+0x1e>
 8007836:	42bc      	cmp	r4, r7
 8007838:	4622      	mov	r2, r4
 800783a:	4631      	mov	r1, r6
 800783c:	bf28      	it	cs
 800783e:	463a      	movcs	r2, r7
 8007840:	f7ff fbb8 	bl	8006fb4 <memcpy>
 8007844:	4631      	mov	r1, r6
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fef4 	bl	8007634 <_free_r>
 800784c:	e7e1      	b.n	8007812 <_realloc_r+0x1e>
 800784e:	4635      	mov	r5, r6
 8007850:	e7df      	b.n	8007812 <_realloc_r+0x1e>
	...

08007854 <_sbrk_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d06      	ldr	r5, [pc, #24]	; (8007870 <_sbrk_r+0x1c>)
 8007858:	2300      	movs	r3, #0
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	f000 f81e 	bl	80078a0 <_sbrk>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_sbrk_r+0x1a>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_sbrk_r+0x1a>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20014518 	.word	0x20014518

08007874 <__malloc_lock>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__malloc_lock+0x8>)
 8007876:	f000 b811 	b.w	800789c <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	2001451c 	.word	0x2001451c

08007880 <__malloc_unlock>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__malloc_unlock+0x8>)
 8007882:	f000 b80c 	b.w	800789e <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	2001451c 	.word	0x2001451c

0800788c <_malloc_usable_size_r>:
 800788c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007890:	1f18      	subs	r0, r3, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfbc      	itt	lt
 8007896:	580b      	ldrlt	r3, [r1, r0]
 8007898:	18c0      	addlt	r0, r0, r3
 800789a:	4770      	bx	lr

0800789c <__retarget_lock_acquire_recursive>:
 800789c:	4770      	bx	lr

0800789e <__retarget_lock_release_recursive>:
 800789e:	4770      	bx	lr

080078a0 <_sbrk>:
 80078a0:	4a04      	ldr	r2, [pc, #16]	; (80078b4 <_sbrk+0x14>)
 80078a2:	6811      	ldr	r1, [r2, #0]
 80078a4:	4603      	mov	r3, r0
 80078a6:	b909      	cbnz	r1, 80078ac <_sbrk+0xc>
 80078a8:	4903      	ldr	r1, [pc, #12]	; (80078b8 <_sbrk+0x18>)
 80078aa:	6011      	str	r1, [r2, #0]
 80078ac:	6810      	ldr	r0, [r2, #0]
 80078ae:	4403      	add	r3, r0
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4770      	bx	lr
 80078b4:	20014520 	.word	0x20014520
 80078b8:	20014528 	.word	0x20014528

080078bc <_init>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr

080078c8 <_fini>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr
